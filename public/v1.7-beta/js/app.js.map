{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n'use strict';\n\n/*\r\n LiveData objects refresh data automatically\r\n - source_uri provides the data source. Normally an API\r\n - interval sets the interval between data pulls\r\n - type sets the type of data we're fetching and defines\r\n what the callback method will do with new data\r\n - target defines the element where the callback\r\n function will put the new data\r\n */\n\nvar liveDataObjects = [];\n\nglobal.LiveData = function (source_uri, interval, callback, target) {\n    liveDataObjects += this;\n    this.source_uri = source_uri;\n    this.interval = interval * 1000;\n    this.callback = callback;\n    this.target = target;\n    this.runner = null;\n    this.refs = new Array();\n    return this;\n};\n\nLiveData.prototype.run = function () {\n    var ld = this;\n    ld.fetchData(ld);\n    this.runner = setInterval(function () {\n        ld.fetchData(ld);\n    }, this.interval);\n};\n\nLiveData.prototype.fetchData = function (ld) {\n    $.ajax({\n        url: ld.source_uri,\n        type: 'GET',\n        error: function error() {\n            ld.callback(false, 'error', ld);\n        },\n        success: function success(data) {\n            ld.callback(true, data, ld);\n        }\n    });\n};\n\nLiveData.prototype.cleanupRefs = function () {\n    $.each(this.refs, function () {\n        this.remove();\n    });\n\n    this.refs = new Array();\n};\n\nLiveData.prototype.stop = function () {\n    clearInterval(this.runner);\n};\n\nwindow.submit_form = function (e) {\n    var _callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    console.log(e);\n    e.preventDefault();\n\n    if ($(e.target).data('prevent-submit-on-enter') === true && e.keyCode === 13) {\n        return false;\n    }\n\n    var btns = $('button[type=submit]:enabled');\n    btns.attr('disabled', 'disabled');\n    var callback = $(e.target).data('callback') || _callback;\n    var redirect_success = $(e.target).data('redirect-success');\n    /*\r\n     * Fix for empty data when using\r\n     * PUT with FormData\r\n     */\n    var data = null;\n    if ($(e.target).data('user-formdata')) {\n        data = new FormData(this);\n    } else {\n        data = $(e.target).serialize();\n    }\n\n    var content_type = 'application/x-www-form-urlencoded';\n    if ($(e.target).data('ignore-enctype')) {\n        content_type = false;\n    }\n\n    var form_id = $(e.target).prop('id');\n    var form = this;\n\n    return $.ajax({\n        url: $(e.target).prop('action'),\n        type: $(e.target).data('method'),\n        data: data,\n        cache: false,\n        contentType: content_type,\n        processData: false,\n        xhr: function xhr() {\n            // Custom XMLHttpRequest\n            var xhr = $.ajaxSettings.xhr();\n            if (xhr.upload) {\n                // Check if upload property exists\n                xhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload\n            }\n            return xhr;\n        },\n        success: function success(data) {\n            btns.removeAttr('disabled');\n\n            if (!$(e.target).data('no-confirm')) {\n                window.notification('<i class=\"material-icons\">check</i>', 'teal darken-1 text-white');\n            }\n\n            window.eventHubVue.$emit('FormSubmitReturnedSuccess', {\n                'source_id': form_id,\n                'data': data\n            });\n            if (callback !== undefined) {\n                if (typeof callback === 'string') {\n                    window[callback](data);\n                } else {\n                    callback(data);\n                }\n            }\n\n            if (redirect_success !== undefined) {\n                if (redirect_success == 'auto') {\n                    if (data.meta.redirect.uri !== undefined) {\n                        window.setTimeout(function () {\n                            window.location.replace(data.meta.redirect.uri);\n                        }, 1000);\n                    }\n                } else {\n                    window.setTimeout(function () {\n                        window.location.replace(redirect_success);\n                    }, 1000);\n                }\n            }\n        },\n        error: function error(data) {\n            btns.removeAttr('disabled');\n            var msg = 'Unknown';\n            if (data.responseJSON !== undefined) msg = data.responseJSON.error.message;\n            window.notification('Error ' + data.status + '<br />' + data.statusText + ':<br />' + msg, 'orange darken-2 text-white');\n        }\n    });\n};\n\nvar progressHandlingFunction = function progressHandlingFunction(e) {\n    if (e.lengthComputable) {\n        $('.form-progress-bar').data('valuenow', e.loaded / e.total * 100);\n        $('.form-progress-bar').css('width', e.loaded / e.total * 100 + '%');\n    }\n};\n\nwindow.notification = function (text, cssClass, length) {\n    length = length || 5000;\n    cssClass = cssClass || null;\n    Materialize.toast(text, length, cssClass);\n};\n\nwindow.runPage = function () {\n    $('select').material_select();\n\n    $('.dropdown-button').dropdown();\n\n    $('.button-collapse').sideNav();\n\n    // SideNav collapse active\n    var active_headers = $('.collapsible-body ul li.active').parent().parent().parent();\n    active_headers.addClass('active');\n    active_headers.children('.collapsible-body').css('display', 'block');\n\n    $('form').submit(window.submit_form);\n\n    $('[data-livedata=\"true\"]').each(function () {\n        new LiveData($(this).data('livedatasource'), $(this).data('livedatainterval'), domCallbacks[$(this).data('livedatacallback')], this).run();\n    });\n\n    /* Enable tabs to update url with tab hash and\r\n     * force rerender of masonry grids */\n    $('ul.tabs').tabs({\n        onShow: function onShow(event, ui) {\n            location.hash = $(this).attr('href');\n            var grid = $('.masonry-grid');\n            if (grid !== undefined) {\n                grid.masonry('layout');\n                grid.masonry('reloadItems');\n            }\n            window.eventHubVue.$emit('ForceRerender');\n\n            /*\r\n             * Avoid scrolling when anchor is in url\r\n             * @TODO: find better solution, it's quite sloppy\r\n             */\n            setTimeout(function () {\n                window.scrollTo(0, 0);\n            }, 1);\n        }\n    });\n};\n\nString.prototype.toUnderscoreCase = function () {\n    return this.replace(/\\.?([A-Z])/g, function (x, y) {\n        return \"_\" + y.toLowerCase();\n    }).replace(/^_/, \"\");\n};\n\nDate.prototype.toYmd = function () {\n    var month = this.getMonth() + 1;\n    var date = this.getDate();\n    return this.getFullYear() + '-' + (month > 9 ? month : '0' + month) + '-' + (date > 9 ? date : '0' + date);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[1]);\n"],"file":"app.js"}