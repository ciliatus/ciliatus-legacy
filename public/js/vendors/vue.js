/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 142);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = Object.create(options.computed || null)
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
    options.computed = computed
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(39),
  /* template */
  __webpack_require__(119),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\loading-indicator.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] loading-indicator.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6d20a6fb", Component.options)
  } else {
    hotAPI.reload("data-v-6d20a6fb", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 2 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(38),
  /* template */
  __webpack_require__(128),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\inline-graph.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] inline-graph.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-8768f226", Component.options)
  } else {
    hotAPI.reload("data-v-8768f226", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * vue-peity v0.5.0
 * (c) 2016 Fangdun Cai <cfddream@gmail.com>
 * Released under the MIT License.
 */
!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VuePeity=e():t.VuePeity=e()}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){var n,r;n=i(1);var s=i(6);r=n=n||{},"object"!=typeof n.default&&"function"!=typeof n.default||(r=n=n.default),"function"==typeof r&&(r=r.options),r.render=s.render,r.staticRenderFns=s.staticRenderFns,t.exports=n},function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=i(4),s=n(r),a=["line","bar","pie","donut"];e.default={props:{type:{type:String,required:!0,validator:function(t){return a.indexOf(t)>-1}},data:{type:String,required:!0},options:{type:Object,default:function(){return{}}}},data:function(){return{chart:null}},mounted:function(){this.chart=new s.default(this.$el,this.type,this.data,this.options),this.chart.draw()},watch:{data:function(t){var e=this;this.$nextTick(function(){e.chart.raw=t,e.chart.draw()})}}}},function(t,e){"use strict";t.exports={options:{delimiter:",",fill:["#4D89F9"],height:16,min:0,padding:.1,width:32},draw:function(t){for(var e=this.values(),i=Math.max.apply(Math,void 0===t.max?e:e.concat(t.max)),n=Math.min.apply(Math,void 0===t.min?e:e.concat(t.min)),r=this.prepare(t.width,t.height),s=r.getBoundingClientRect(),a=s.width,o=s.height,h=i-n,u=t.padding,l=this.fill(),c=this.x=function(t){return t*a/e.length},f=this.y=function(t){return o-(h?(t-n)/h*o:1)},p=0;p<e.length;p++){var d,v=c(p+u),g=c(p+1-u)-v,m=e[p],y=f(m),w=y,x=y;h?m<0?w=f(Math.min(i,0)):x=f(Math.max(n,0)):d=1,d=x-w,0===d&&(d=1,i>0&&h&&w--),r.appendChild(this.svgElement("rect",{fill:l.call(this,m,p,e),x:v,y:w,width:g,height:d}))}}}},function(t,e){"use strict";t.exports={options:{delimiter:",",fill:"#c6d9fd",height:16,min:0,stroke:"#4d89f9",strokeWidth:1,width:32},draw:function(t){var e=this.values();1===e.length&&e.push(e[0]);for(var i=Math.max.apply(Math,void 0===t.max?e:e.concat(t.max)),n=Math.min.apply(Math,void 0===t.min?e:e.concat(t.min)),r=this.prepare(t.width,t.height),s=r.getBoundingClientRect(),a=t.strokeWidth,o=s.width,h=s.height-a,u=i-n,l=this.x=function(t){return t*(o/(e.length-1))},c=this.y=function(t){var e=h;return u&&(e-=(t-n)/u*h),e+a/2},f=c(Math.max(n,0)),p=[0,f],d=0;d<e.length;d++)p.push(l(d),c(e[d]));p.push(o,f),t.fill&&r.appendChild(this.svgElement("polygon",{fill:t.fill,points:p.join(" ")})),a&&r.appendChild(this.svgElement("polyline",{fill:"none",points:p.slice(2,p.length-2).join(" "),stroke:t.stroke,"stroke-width":a,"stroke-linecap":"square"}))}}},function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),s=i(2),a=i(3),o=i(5),h=function(t,e){var i=document.createElementNS("http://www.w3.org/2000/svg",t);for(var n in e)i.setAttribute(n,e[n]);return i},u=function(){function t(e,i,r,s){n(this,t),this.$el=e,this.type=i,this.raw=r,this.options=Object.assign({},t.defaults[this.type],s)}return r(t,[{key:"svgElement",value:function(){return h.apply(void 0,arguments)}},{key:"prepare",value:function(t,e){return this.$svg||(this.$el.style.display="none",this.$svg=h("svg",{class:"peity"}),this.$el.parentNode.insertBefore(this.$svg,this.$el)),this.$svg.innerHTML="",this.$svg.setAttribute("width",t),this.$svg.setAttribute("height",e),this.$svg}},{key:"fill",value:function(){var t=this.options.fill;return"function"==typeof t?t:function(e,i){return t[i%t.length]}}},{key:"draw",value:function(){t.graphers[this.type].call(this,this.options)}},{key:"values",value:function(){return this.raw.split(this.options.delimiter).map(function(t){return parseFloat(t)})}}]),t}();u.defaults={},u.graphers={},u.register=function(t,e){u.defaults[t]=e.options,u.graphers[t]=e.draw},u.register("bar",s),u.register("donut",o),u.register("line",a),u.register("pie",o),t.exports=u},function(t,e){"use strict";t.exports={options:{fill:["#ff9900","#fff4dd","#ffc66e"],radius:8},draw:function(t){if(!t.delimiter){var e=this.raw.match(/[^0-9\.]/);t.delimiter=e?e[0]:","}var i=this.values().map(function(t){return t>0?t:0});if("/"===t.delimiter){var n=i[0],r=i[1];i=[n,Math.max(0,r-n)]}for(var s=0,a=i.length,o=0;s<a;s++)o+=i[s];o||(a=2,o=1,i=[0,1]);var h=2*t.radius,u=this.prepare(t.width||h,t.height||h),l=u.getBoundingClientRect(),c=l.width,f=l.height,p=c/2,d=f/2,v=Math.min(p,d),g=t.innerRadius;"donut"!==this.type||g||(g=.5*v);var m=Math.PI,y=this.fill(),w=this.scale=function(t,e){var i=t/o*m*2-m/2;return[e*Math.cos(i)+p,e*Math.sin(i)+d]},x=0;for(s=0;s<a;s++){var M,b=i[s],k=b/o;if(0!==k){if(1===k)if(g){var $=p-.01,j=d-v,E=d-g;M=this.svgElement("path",{d:["M",p,j,"A",v,v,0,1,1,$,j,"L",$,E,"A",g,g,0,1,0,p,E].join(" ")})}else M=this.svgElement("circle",{cx:p,cy:d,r:v});else{var A=x+b,C=["M"].concat(w(x,v),"A",v,v,0,k>.5?1:0,1,w(A,v),"L");g?C=C.concat(w(A,g),"A",g,g,0,k>.5?1:0,0,w(x,g)):C.push(p,d),x+=b,M=this.svgElement("path",{d:C.join(" ")})}M.setAttribute("fill",y.call(this,b,s,i)),u.appendChild(M)}}}}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("span")},staticRenderFns:[]}}])});

/***/ }),
/* 5 */,
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_peity__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_peity___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_peity__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_i18n__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vue_system_indicator_vue__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vue_system_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__vue_system_indicator_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vue_loading_indicator_vue__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vue_loading_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__vue_loading_indicator_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vue_dashboard_widget_vue__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vue_dashboard_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__vue_dashboard_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__vue_google_graph_vue__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__vue_google_graph_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__vue_google_graph_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__vue_dygraph_graph_vue__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__vue_dygraph_graph_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__vue_dygraph_graph_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__vue_chartjs_graph_vue__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__vue_chartjs_graph_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__vue_chartjs_graph_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__vue_inline_graph_vue__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__vue_inline_graph_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__vue_inline_graph_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__vue_animals_widget_vue__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__vue_animals_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__vue_animals_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__vue_animal_feedings_widget_vue__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__vue_animal_feedings_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__vue_animal_feedings_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__vue_animal_feeding_schedules_widget_vue__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__vue_animal_feeding_schedules_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__vue_animal_feeding_schedules_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__vue_animal_feeding_schedules_matrix_widget_vue__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__vue_animal_feeding_schedules_matrix_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__vue_animal_feeding_schedules_matrix_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__vue_animal_weighing_schedules_matrix_widget_vue__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__vue_animal_weighing_schedules_matrix_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__vue_animal_weighing_schedules_matrix_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__vue_animal_weighings_widget_vue__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__vue_animal_weighings_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__vue_animal_weighings_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__vue_animal_weighing_schedules_widget_vue__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__vue_animal_weighing_schedules_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__vue_animal_weighing_schedules_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__vue_terraria_widget_vue__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__vue_terraria_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__vue_terraria_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__vue_terraria_overview_widget_vue__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__vue_terraria_overview_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__vue_terraria_overview_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__vue_controlunit_widget_vue__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__vue_controlunit_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18__vue_controlunit_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__vue_controlunits_list_widget_vue__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__vue_controlunits_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__vue_controlunits_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__vue_files_widget_vue__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__vue_files_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20__vue_files_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__vue_files_list_widget_vue__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__vue_files_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21__vue_files_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__vue_files_show_widget_vue__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__vue_files_show_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22__vue_files_show_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__vue_action_sequences_list_widget_vue__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__vue_action_sequences_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23__vue_action_sequences_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__vue_action_sequences_widget_vue__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__vue_action_sequences_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24__vue_action_sequences_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__vue_action_sequence_schedule_widget_vue__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__vue_action_sequence_schedule_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25__vue_action_sequence_schedule_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__vue_pumps_widget_vue__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__vue_pumps_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26__vue_pumps_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__vue_pumps_list_widget_vue__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__vue_pumps_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_27__vue_pumps_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__vue_valves_widget_vue__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__vue_valves_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_28__vue_valves_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__vue_valves_list_widget_vue__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__vue_valves_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_29__vue_valves_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__vue_physical_sensors_widget_vue__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__vue_physical_sensors_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_30__vue_physical_sensors_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__vue_physical_sensors_list_widget_vue__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__vue_physical_sensors_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_31__vue_physical_sensors_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__vue_logical_sensors_widget_vue__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__vue_logical_sensors_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_32__vue_logical_sensors_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__vue_logical_sensors_list_widget_vue__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__vue_logical_sensors_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_33__vue_logical_sensors_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__vue_generic_components_widget_vue__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__vue_generic_components_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_34__vue_generic_components_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__vue_generic_components_list_widget_vue__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__vue_generic_components_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_35__vue_generic_components_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__vue_users_widget_vue__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__vue_users_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_36__vue_users_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__vue_biography_entries_widget_vue__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__vue_biography_entries_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_37__vue_biography_entries_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__vue_caresheets_widget_vue__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__vue_caresheets_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_38__vue_caresheets_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__vue_logs_widget_vue__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__vue_logs_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_39__vue_logs_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__vue_components_list_widget_vue__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__vue_components_list_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_40__vue_components_list_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__vue_api_io_widget_vue__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__vue_api_io_widget_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_41__vue_api_io_widget_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__vue_bus_type_edit_form_vue__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__vue_bus_type_edit_form_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_42__vue_bus_type_edit_form_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__vue_generic_component_type_create_form_vue__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__vue_generic_component_type_create_form_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_43__vue_generic_component_type_create_form_vue__);
var Vue = __webpack_require__(139);



$.ajaxPrefilter(function (options) {
    if (!options.beforeSend) {
        options.beforeSend = function (xhr) {
            xhr.setRequestHeader('X-CSRF-TOKEN', window.Laravel.csrfToken);
        };
    }
});

window.eventHubVue = new Vue({
    props: {
        globalLoadingBarCount: {
            type: Number,
            default: 0,
            required: false
        }
    },

    methods: {
        processStarted: function processStarted() {
            this.globalLoadingBarCount++;
            this.checkLoadingBarState();
        },

        processEnded: function processEnded() {
            this.globalLoadingBarCount--;
            this.checkLoadingBarState();
        },

        checkLoadingBarState: function checkLoadingBarState() {
            if (this.globalLoadingBarCount > 0) {
                $('.main-loader').addClass('spinning-logo');
                //$('#global-loading-bar').show();
            } else {
                $('.main-loader').one('animationiteration webkitAnimationIteration', function () {
                    $(this).removeClass('spinning-logo');
                });
                //$('#global-loading-bar').hide();
            }
        }
    }
});

Vue.use(__WEBPACK_IMPORTED_MODULE_1_vue_i18n__["a" /* default */]);

var locales = __webpack_require__(53);
var lang = $('body').data('lang');
var locales_array = [];
Object.keys(locales).forEach(function (lang) {
    locales_array[lang] = locales[lang];
});
var i18n = new __WEBPACK_IMPORTED_MODULE_1_vue_i18n__["a" /* default */]({
    locale: lang,
    messages: locales_array
});

var TimeStringFormatter = Object;
TimeStringFormatter.install = function (Vue, options) {
    Vue.prototype.$getMatchingTimeDiff = function (obj) {
        if (obj == null) {
            return { val: null, unit: 'no_data' };
        }
        if (obj.years > 1) {
            return { val: obj.years, unit: 'years_ago' };
        }
        if (obj.months > 1) {
            return { val: obj.months, unit: 'months_ago' };
        }
        if (obj.weeks > 1) {
            return { val: obj.weeks, unit: 'weeks_ago' };
        }
        if (obj.days > 1) {
            return { val: obj.days, unit: 'days_ago' };
        }
        if (obj.hours > 1) {
            return { val: obj.hours, unit: 'hours_ago' };
        }
        if (obj.minutes > 1) {
            return { val: obj.minutes, unit: 'minutes_ago' };
        }
        return { val: null, unit: 'just_now' };
    };
};

Vue.use(TimeStringFormatter);















































window.bodyVue = new Vue({

    el: '#body',

    i18n: i18n,

    data: {
        terraria: [],
        files: [],
        animals: []
    },

    props: {
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_type: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_id: {
            type: String,
            default: '',
            required: false
        }
    },

    components: {
        'system-indicator': __WEBPACK_IMPORTED_MODULE_2__vue_system_indicator_vue___default.a,
        'loading-indicator': __WEBPACK_IMPORTED_MODULE_3__vue_loading_indicator_vue___default.a,

        'dashboard-widget': __WEBPACK_IMPORTED_MODULE_4__vue_dashboard_widget_vue___default.a,
        'peity': __WEBPACK_IMPORTED_MODULE_0_vue_peity___default.a,
        'google-graph': __WEBPACK_IMPORTED_MODULE_5__vue_google_graph_vue___default.a,
        'dygraph-graph': __WEBPACK_IMPORTED_MODULE_6__vue_dygraph_graph_vue___default.a,
        'chartjs-graph': __WEBPACK_IMPORTED_MODULE_7__vue_chartjs_graph_vue___default.a,
        'inline-graph': __WEBPACK_IMPORTED_MODULE_8__vue_inline_graph_vue___default.a,
        'animals-widget': __WEBPACK_IMPORTED_MODULE_9__vue_animals_widget_vue___default.a,
        'animal_feedings-widget': __WEBPACK_IMPORTED_MODULE_10__vue_animal_feedings_widget_vue___default.a,
        'animal_feeding_schedules-widget': __WEBPACK_IMPORTED_MODULE_11__vue_animal_feeding_schedules_widget_vue___default.a,
        'animal_feeding_schedules-matrix-widget': __WEBPACK_IMPORTED_MODULE_12__vue_animal_feeding_schedules_matrix_widget_vue___default.a,
        'animal_weighing_schedules-matrix-widget': __WEBPACK_IMPORTED_MODULE_13__vue_animal_weighing_schedules_matrix_widget_vue___default.a,
        'animal_weighings-widget': __WEBPACK_IMPORTED_MODULE_14__vue_animal_weighings_widget_vue___default.a,
        'animal_weighing_schedules-widget': __WEBPACK_IMPORTED_MODULE_15__vue_animal_weighing_schedules_widget_vue___default.a,
        'terraria-widget': __WEBPACK_IMPORTED_MODULE_16__vue_terraria_widget_vue___default.a,
        'terraria-overview-widget': __WEBPACK_IMPORTED_MODULE_17__vue_terraria_overview_widget_vue___default.a,
        'controlunits-widget': __WEBPACK_IMPORTED_MODULE_18__vue_controlunit_widget_vue___default.a,
        'controlunits-list-widget': __WEBPACK_IMPORTED_MODULE_19__vue_controlunits_list_widget_vue___default.a,
        'files-widget': __WEBPACK_IMPORTED_MODULE_20__vue_files_widget_vue___default.a,
        'files-list-widget': __WEBPACK_IMPORTED_MODULE_21__vue_files_list_widget_vue___default.a,
        'files-show-widget': __WEBPACK_IMPORTED_MODULE_22__vue_files_show_widget_vue___default.a,
        'action_sequences-list-widget': __WEBPACK_IMPORTED_MODULE_23__vue_action_sequences_list_widget_vue___default.a,
        'action_sequences-widget': __WEBPACK_IMPORTED_MODULE_24__vue_action_sequences_widget_vue___default.a,
        'action_sequence_schedule-widget': __WEBPACK_IMPORTED_MODULE_25__vue_action_sequence_schedule_widget_vue___default.a,
        'pumps-widget': __WEBPACK_IMPORTED_MODULE_26__vue_pumps_widget_vue___default.a,
        'pumps-list-widget': __WEBPACK_IMPORTED_MODULE_27__vue_pumps_list_widget_vue___default.a,
        'valves-widget': __WEBPACK_IMPORTED_MODULE_28__vue_valves_widget_vue___default.a,
        'valves-list-widget': __WEBPACK_IMPORTED_MODULE_29__vue_valves_list_widget_vue___default.a,
        'physical_sensors-widget': __WEBPACK_IMPORTED_MODULE_30__vue_physical_sensors_widget_vue___default.a,
        'physical_sensors-list-widget': __WEBPACK_IMPORTED_MODULE_31__vue_physical_sensors_list_widget_vue___default.a,
        'logical_sensors-widget': __WEBPACK_IMPORTED_MODULE_32__vue_logical_sensors_widget_vue___default.a,
        'logical_sensors-list-widget': __WEBPACK_IMPORTED_MODULE_33__vue_logical_sensors_list_widget_vue___default.a,
        'generic_components-widget': __WEBPACK_IMPORTED_MODULE_34__vue_generic_components_widget_vue___default.a,
        'generic_components-list-widget': __WEBPACK_IMPORTED_MODULE_35__vue_generic_components_list_widget_vue___default.a,
        'users-widget': __WEBPACK_IMPORTED_MODULE_36__vue_users_widget_vue___default.a,
        'biography_entries-widget': __WEBPACK_IMPORTED_MODULE_37__vue_biography_entries_widget_vue___default.a,
        'caresheets-widget': __WEBPACK_IMPORTED_MODULE_38__vue_caresheets_widget_vue___default.a,
        'logs-widget': __WEBPACK_IMPORTED_MODULE_39__vue_logs_widget_vue___default.a,
        'components-list-widget': __WEBPACK_IMPORTED_MODULE_40__vue_components_list_widget_vue___default.a,

        'api-io-widget': __WEBPACK_IMPORTED_MODULE_41__vue_api_io_widget_vue___default.a,

        'bus-type-edit-form': __WEBPACK_IMPORTED_MODULE_42__vue_bus_type_edit_form_vue___default.a,
        'generic_component_type_create-form': __WEBPACK_IMPORTED_MODULE_43__vue_generic_component_type_create_form_vue___default.a
    }
});

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            action_sequence_schedules: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        assId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: 'with[]=sequence&filter[last_finished_at]=nottoday',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(ass) {
            var item = null;
            this.action_sequence_schedules.forEach(function (data, index) {
                if (data.id === ass.action_sequence_schedule.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.action_sequence_schedules.push(ass.action_sequence_schedule);
            } else if (item !== null) {
                this.action_sequence_schedules.splice(item, 1, ass.action_sequence_schedule);
            }
        },

        delete: function _delete(ass) {
            var item = null;
            this.action_sequence_schedules.forEach(function (data, index) {
                if (data.id === ass.action_sequence_schedule_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.action_sequence_schedules.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: uri,
                method: 'GET',
                success: function success(data) {
                    if (that.assId !== '') {
                        that.action_sequence_schedules = [data.data];
                    } else {
                        that.action_sequence_schedules = data.data;
                    }

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ActionSequenceScheduleUpdated', function (e) {
            _this.update(e);
        }).listen('ActionSequenceScheduleDeleted', function (e) {
            _this.delete(e);
        });

        var uri = '';
        if (this.assid === '') {
            uri = '/api/v1/action_sequence_schedules/?raw=true&' + this.sourceFilter;
        } else {
            uri = '/api/v1/action_sequence_schedules/' + this.assid;
        }

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            action_sequences: [],
            meta: [],
            filter: {
                name: '',
                model: '',
                'terrarium.name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.action_sequences.forEach(function (data, index) {
                if (data.id === cu.action_sequence.id) {
                    item = index;
                }
            });
            if (item !== null) {
                var that = this;
                $.ajax({
                    url: '/api/v1/action_sequences/' + cu.action_sequence.id,
                    method: 'GET',
                    success: function success(data) {
                        that.action_sequences.splice(item, 1, data.data);
                    },
                    error: function error(_error) {
                        console.log(JSON.stringify(_error));
                    }
                });
            }
        },

        delete: function _delete(cu) {
            var item = null;
            this.action_sequences.forEach(function (data, index) {
                if (data.id === cu.action_sequence.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.action_sequences.splice(item, 1);
            }
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/action_sequences?with[]=schedules&with[]=triggers&with[]=intentions&with[]=terrarium&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.action_sequences = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error2) {
                    console.log(JSON.stringify(_error2));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ActionSequenceUpdated', function (e) {
            _this.update(e);
        }).listen('ActionSequenceDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        var that = this;
        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            action_sequences: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        action_sequenceId: {
            type: String,
            default: '',
            required: false
        },
        terrariumId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            this.action_sequences.forEach(function (data, index) {
                if (data.id === a.action_sequence.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.action_sequences.push(a.animal);
            } else if (item !== null) {
                this.action_sequences.splice(item, 1, a.animal);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.action_sequences.forEach(function (data, index) {
                if (data.id === a.action_sequences_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.action_sequences.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/action_sequences/' + that.action_sequenceId + '?with[]=schedules&with[]=triggers&' + 'with[]=intentions&with[]=terrarium&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.action_sequenceId !== '') {
                        that.action_sequences = [data.data];
                    } else {
                        that.action_sequences = data.data;
                    }

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ActionSequenceUpdated', function (e) {
            _this.update(e);
        }).listen('ActionSequenceDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            feeding_types: [],
            animals: [],
            schedules: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        get_animal_feeding_schedules_of_type: function get_animal_feeding_schedules_of_type(animal_id, type) {
            return this.schedules.filter(function (el) {
                return el.type == type && el.animal.id == animal_id;
            });
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;

            /*
             * Load feeding types
             * then load animals
             * then load feeding schedules
             *
             * @TODO: First two should be parallel
             */

            /*
             * Load feeding types
             */
            $.ajax({
                url: '/api/v1/properties?filter[type]=AnimalFeedingType&raw=true',
                method: 'GET',
                success: function success(data) {
                    that.feeding_types = data.data;

                    /*
                     * Load animals
                     */
                    $.ajax({
                        url: '/api/v1/animals?filter[death_date]=null&raw=true',
                        method: 'GET',
                        success: function success(data) {
                            that.animals = data.data;

                            /*
                             * Load feeding schedules
                             */
                            $.ajax({
                                url: '/api/v1/animal_feeding_schedules?raw',
                                method: 'GET',
                                success: function success(data) {
                                    that.schedules = data.data;
                                    that.$nextTick(function () {
                                        $('.dropdown-button').dropdown();
                                    });
                                    window.eventHubVue.processEnded();
                                },
                                error: function error(_error) {
                                    console.log(JSON.stringify(_error));
                                    window.eventHubVue.processEnded();
                                }
                            });
                            window.eventHubVue.processEnded();

                            /*
                             * END Load feeding schedules
                             */
                        },
                        error: function error(_error2) {
                            console.log(JSON.stringify(_error2));
                            window.eventHubVue.processEnded();
                        }
                    });

                    window.eventHubVue.processEnded();

                    /*
                     * END Load animals
                     */
                },
                error: function error(_error3) {
                    console.log(JSON.stringify(_error3));
                    window.eventHubVue.processEnded();
                }
            });

            /*
             * END Load feeding types
             */
        }
    },

    created: function created() {

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animal_feeding_schedules: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        animalId: {
            type: String,
            required: true
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;

            if (a.animal_feeding_schedule.animal.id !== this.animalId) {
                return;
            }

            this.animal_feeding_schedules.forEach(function (data, index) {
                if (data.id === a.animal_feeding_schedule.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.animal_feeding_schedules.push(a.animal_feeding_schedule);
            } else if (item !== null) {
                this.animal_feeding_schedules.splice(item, 1, a.animal_feeding_schedule);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.animal_feeding_schedules.forEach(function (data, index) {
                if (data.id === a.animal_feeding_schedule_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.animal_feeding_schedules.splice(item, 1);
            }
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/animals/' + that.animalId + '/feeding_schedules?raw=true&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.animal_feeding_schedules = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('AnimalFeedingScheduleUpdated', function (e) {
            _this.update(e);
        }).listen('AnimalFeedingScheduleDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animal_feedings: [],
            animal_feeding_types: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        animalId: {
            type: String,
            required: true
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            if (a.animal_feeding.animal.id !== this.animalId) {
                return;
            }

            this.animal_feedings.forEach(function (data, index) {
                if (data.id === a.animal_feeding.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.animal_feedings.push(a.animal_feeding);
            } else if (item !== null) {
                this.animal_feedings.splice(item, 1, a.animal_feeding);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.animal_feedings.forEach(function (data, index) {
                if (data.id === a.animal_feeding_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.animal_feedings.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/animals/' + that.animalId + '/feedings?raw=true&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.animal_feedings = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });

            window.eventHubVue.processStarted();
            $.ajax({
                url: '/api/v1/animals/feedings/types',
                method: 'GET',
                success: function success(data) {
                    that.animal_feeding_types = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error2) {
                    console.log(JSON.stringify(_error2));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('AnimalFeedingUpdated', function (e) {
            _this.update(e);
        }).listen('AnimalFeedingDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animals: [],
            schedules: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        sourceFilter: {
            type: String,
            default: 'filter[death_date]=null',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        get_animal_weighing_schedules: function get_animal_weighing_schedules(animal_id) {
            return this.schedules.filter(function (el) {
                return el.animal.id == animal_id;
            });
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;

            /*
             * load animals
             * then load weighing schedules
             */
            $.ajax({
                url: '/api/v1/animals?raw=true&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.animals = data.data;

                    /*
                     * Load weighing schedules
                     */
                    $.ajax({
                        url: '/api/v1/animal_weighing_schedules?raw=true',
                        method: 'GET',
                        success: function success(data) {
                            that.schedules = data.data;
                            that.$nextTick(function () {
                                $('.dropdown-button').dropdown();
                            });
                            window.eventHubVue.processEnded();
                        },
                        error: function error(_error) {
                            console.log(JSON.stringify(_error));
                            window.eventHubVue.processEnded();
                        }
                    });
                    window.eventHubVue.processEnded();

                    /*
                     * END Load weighing schedules
                     */
                },
                error: function error(_error2) {
                    console.log(JSON.stringify(_error2));
                    window.eventHubVue.processEnded();
                }
            });

            window.eventHubVue.processEnded();

            /*
             * END Load animals
             */
        }
    },

    created: function created() {

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animal_weighing_schedules: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        animalId: {
            type: String,
            required: true
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;

            if (a.animal_weighing_schedule.animal.id !== this.animalId) {
                return;
            }

            this.animal_weighing_schedules.forEach(function (data, index) {
                if (data.id === a.animal_weighing_schedule.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.animal_weighing_schedules.push(a.animal_weighing_schedule);
            } else if (item !== null) {
                this.animal_weighing_schedules.splice(item, 1, a.animal_weighing_schedule);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.animal_weighing_schedules.forEach(function (data, index) {
                if (data.id === a.animal_weighing_schedule_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.animal_weighing_schedules.splice(item, 1);
            }
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/animals/' + that.animalId + '/weighing_schedules?raw=true&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.animal_weighing_schedules = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('AnimalWeighingScheduleUpdated', function (e) {
            _this.update(e);
        }).listen('AnimalWeighingScheduleDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animal_weighings: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        animalId: {
            type: String,
            required: true
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            if (a.animal_weighing.animal.id !== this.animalId) {
                return;
            }

            this.animal_weighings.forEach(function (data, index) {
                if (data.id === a.animal_weighing.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.animal_weighings.push(a.animal_weighing);
            } else if (item !== null) {
                this.animal_weighings.splice(item, 1, a.animal_weighing);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.animal_weighings.forEach(function (data, index) {
                if (data.id === a.animal_weighing_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.animal_weighings.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/animals/' + that.animalId + '/weighings?raw=true&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.animal_weighings = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('AnimalWeighingUpdated', function (e) {
            _this.update(e);
        }).listen('AnimalWeighingDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            animals: [],
            initial: true,
            meta: [],
            feeding_types: [],
            filter: {},
            filter_string: '',
            order: {
                field: 'display_name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        animalId: {
            type: String,
            default: null,
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'animals-masonry-grid',
            required: false
        },
        showFilters: {
            type: Boolean,
            default: false,
            required: false
        }
    },

    components: {
        'loading-indicator': __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default.a
    },

    methods: {
        toggle_filters: function toggle_filters() {
            this.showFilters = !this.showFilters;
        },
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        update: function update(a) {
            var item = null;
            this.animals.forEach(function (data, index) {
                if (data.id === a.animal_id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                var that = this;
                $.ajax({
                    url: '/api/v1/animals/' + a.animal_id,
                    method: 'GET',
                    success: function success(data) {
                        that.animals.push(data.data);

                        that.$nextTick(function () {
                            that.refresh_grid();
                        });
                    },
                    error: function error(_error) {
                        console.log(JSON.stringify(_error));
                    }
                });
            } else if (item !== null) {
                this.$set(this.animals[item], 'loading_data', true);
                var that = this;
                $.ajax({
                    url: '/api/v1/animals/' + a.animal_id,
                    method: 'GET',
                    success: function success(data) {
                        that.animals.splice(item, 1, data.data);

                        that.$nextTick(function () {
                            that.refresh_grid();
                        });
                    },
                    error: function error(_error2) {
                        console.log(JSON.stringify(_error2));
                        this.$set(this.animals[item], 'loading_data', false);
                    }
                });
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },
        delete: function _delete(a) {
            var item = null;
            this.animals.forEach(function (data, index) {
                if (data.id === a.animal_id) {
                    item = index;
                }
            });

            if (item !== null && this.subscribeDelete === true) {
                this.animals.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        load_data: function load_data() {
            var that = this;
            var source_url = '';
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            if (this.animalId !== null) {
                source_url = '/api/v1/animals/' + this.animalId + '/?with[]=terrarium';
            } else {
                source_url = '/api/v1/animals/?with[]=terrarium&pagination[per_page]=6&page=' + this.page + this.filter_string + this.order_string;
            }

            window.eventHubVue.processStarted();
            $.ajax({
                url: source_url,
                method: 'GET',
                success: function success(data) {
                    if (that.animalId !== null) {
                        that.animals = [data.data];
                    } else {
                        that.meta = data.meta;
                        that.animals = data.data;
                    }

                    that.$nextTick(function () {
                        if (that.initial) {
                            var element = '#' + this.containerId;
                            $(element).masonry({
                                columnWidth: '.col',
                                itemSelector: '.col'
                            });
                            that.initial = false;
                        }
                        that.refresh_grid();
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error3) {
                    console.log(JSON.stringify(_error3));
                    window.eventHubVue.processEnded();
                }
            });

            window.eventHubVue.processStarted();
            $.ajax({
                url: '/api/v1/properties?filter[type]=AnimalFeedingType&raw=true',
                method: 'GET',
                success: function success(data) {
                    that.feeding_types = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error4) {
                    console.log(JSON.stringify(_error4));
                    window.eventHubVue.processEnded();
                }
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
            $('.modal').modal();
            $('.datepicker').pickadate({
                selectMonths: true,
                selectYears: 15,
                format: 'yyyy-mm-dd'
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('AnimalUpdated', function (e) {
            _this.update(e);
        }).listen('AnimalDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            loading: false,
            recording: false,
            recording_capability: true,
            result: null,
            recognition: null,
            transcript: ''
        };
    },


    props: {},

    methods: {
        submit_interceptor: function submit_interceptor(e) {
            if (this.loading) {
                e.preventDefault();
                return;
            }

            this.loading = true;
            window.eventHubVue.processStarted();
        },
        parse_result: function parse_result(data) {
            if (data.source_id !== 'api-io-widget-form') {
                return;
            }

            this.result = data.data;
            this.loading = false;
            window.eventHubVue.processEnded();
            var result_text = '';

            if (this.result.data.api_result.result !== undefined) {
                result_text = this.result.data.api_result.result.fulfillment.speech;
            } else {
                result_text = this.result.data.api_result;
            }

            $('#api-io-widget-result-modal-content').html(result_text);
            $('#api-io-widget-result-modal').modal('open');
            var msg = new SpeechSynthesisUtterance(result_text);
            window.speechSynthesis.speak(msg);
            //$('#ask-me-something').val('');
        },
        record: function record() {
            this.recording = !this.recording;
            if (this.recording) {
                this.recognition.start();
            } else {
                this.stop();
            }
        },
        stop_recording: function stop_recording() {
            this.recording = false;
            this.recognition.stop();
        }
    },

    created: function created() {
        window.eventHubVue.$on('FormSubmitReturnedSuccess', this.parse_result);
        if (!('webkitSpeechRecognition' in window)) {
            this.recording_capability = false;
        } else {
            var that = this;
            this.recognition = new webkitSpeechRecognition();
            this.recognition.continuous = true;
            this.recognition.interimResults = true;
            this.recognition.lang = $('body').data('lang');

            this.recognition.onstart = function () {
                that.recording = true;
                $('#ask-me-something-label').addClass('active');
            };
            this.recognition.onresult = function (e) {
                var transcript = '';

                for (var i = e.resultIndex; i < e.results.length; ++i) {
                    transcript += e.results[i][0].transcript;
                }

                that.transcript = transcript.replace('/\S/', function (m) {
                    return m.toUpperCase();
                });
            };
            this.recognition.onerror = function (e) {
                that.recording = false;
            };
            this.recognition.onend = function () {
                $('#api-io-widget-form').submit();
                that.recording = false;
                that.loading = true;
            };
        }
        this.$nextTick(function () {
            $('#api-io-widget-result-modal').modal();
        });
    }

});

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            entries: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        belongsToType: {
            type: String,
            default: null,
            required: false
        },
        belongsToId: {
            type: String,
            default: null,
            required: false
        },
        entryId: {
            type: String,
            default: null,
            required: false
        },
        containerId: {
            type: String,
            default: 'biography-entries-widget',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            this.entries.forEach(function (data, index) {
                if (data.id === a.entry.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.entries.push(a.animal);
            } else if (item !== null) {
                this.entries.splice(item, 1, a.entry);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(a) {
            var item = null;
            this.entries.forEach(function (data, index) {
                if (data.id === a.entry_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.entries.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('.tooltipped').tooltip({ delay: 50 });
        },

        load_data: function load_data() {
            var that = this;

            var source_url = '';
            if (this.entryId !== null) {
                source_url = '/api/v1/biography_entries/' + this.entryId + '?with[]=files';
            } else {
                source_url = '/api/v1/biography_entries/?with[]=files&order[created_at]=desc&filter[belongsTo_type]=' + this.belongsToType + '&filter[belongsTo_id]=' + this.belongsToId + '&raw=true';
            }

            window.eventHubVue.processStarted();
            $.ajax({
                url: source_url,
                method: 'GET',
                success: function success(data) {
                    if (that.entryId !== null) {
                        that.entries = [data.data];
                    } else {
                        that.entries = data.data;
                    }

                    that.$nextTick(function () {
                        that.refresh_grid();
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('BiographyEntryUpdated', function (e) {
            _this.update(e);
        }).listen('BiographyEntryDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            physical_sensor_id: '',
            bus_type: '',
            gpio_pin: '',
            gpio_default_high: false,
            i2c_address: '',
            i2c_multiplexer_address: '',
            i2c_multiplexer_port: ''
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        formUri: {
            type: String,
            default: null,
            required: false
        },
        physicalSensorId: {
            type: String,
            default: null,
            required: false
        },
        busType: {
            type: String,
            default: null,
            required: false
        },
        gpioPin: {
            type: String,
            default: null,
            required: false
        },
        gpioDefaultHigh: {
            type: Boolean,
            default: false,
            required: false
        },
        i2cAddress: {
            type: String,
            default: null,
            required: false
        },
        i2cMultiplexerAddress: {
            type: String,
            default: null,
            required: false
        },
        i2cMultiplexerPort: {
            type: String,
            default: null,
            required: false
        }
    },

    methods: {
        change_bus_type: function change_bus_type(e) {
            this.bus_type = e;
        }
    },

    created: function created() {
        var that = this;
        this.$nextTick(function () {
            that.physical_sensor_id = that.physicalSensorId;
            if (that.busType !== null) {
                that.bus_type = that.busType;
                that.gpio_pin = that.gpioPin;
                that.gpio_default_high = that.gpioDefaultHigh;
                that.i2c_address = that.i2cAddress;
                that.i2c_multiplexer_address = that.i2cMultiplexerAddress;
                that.i2c_multiplexer_port = that.i2cMultiplexerPort;
            }
        });
    }
});

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            caresheets: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        belongsToType: {
            type: String,
            default: 'Animal',
            required: false
        },
        belongsToId: {
            type: String,
            default: null,
            required: false
        },
        caresheetId: {
            type: String,
            default: null,
            required: false
        },
        containerId: {
            type: String,
            default: 'caresheet-list',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            this.caresheets.forEach(function (data, index) {
                if (data.id === a.caresheet.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.caresheets.push(a.caresheet);
            } else if (item !== null) {
                this.caresheets.splice(item, 1, a.caresheet);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(a) {
            var item = null;
            this.caresheets.forEach(function (data, index) {
                if (data.id === a.caresheet_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.caresheets.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('.tooltipped').tooltip({ delay: 50 });
        },

        load_data: function load_data() {
            var that = this;

            var source_url = '';
            if (this.caresheetId !== null) {
                source_url = '/api/v1/animals/caresheets/' + this.caresheetId;
            } else {
                source_url = '/api/v1/animals/' + this.belongsToId + '/caresheets/?order[created_at]=desc&filter[belongsTo_type]=' + this.belongsToType + '&filter[belongsTo_id]=' + this.belongsToId + '&raw=true';
            }

            window.eventHubVue.processStarted();
            $.ajax({
                url: source_url,
                method: 'GET',
                success: function success(data) {
                    if (that.caresheetId !== null) {
                        that.caresheets = [data.data];
                    } else {
                        that.caresheets = data.data;
                    }

                    that.$nextTick(function () {
                        that.refresh_grid();
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('BiographyEntryUpdated', function (e) {
            _this.update(e);
        }).listen('BiographyEntryDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({

    props: {
        id: {
            type: Number,
            required: false,
            default: Math.floor(Math.random() * 1000000)
        },
        source: {
            type: String,
            required: true
        },
        FilterColumn: {
            type: String,
            default: 'created_at',
            required: false
        },
        ShowFilterForm: {
            type: Boolean,
            default: false,
            required: false
        },
        FilterFromDate: {
            type: String,
            default: new Date(new Date().setDate(new Date().getDate() - 2)).toYmd(),
            required: false
        },
        FilterToDate: {
            type: String,
            default: new Date().toYmd(),
            required: false
        }
    },

    data: function data() {
        return {
            chart: null,
            options: {},
            data: null
        };
    },


    components: {
        'loading-indicator': __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default.a
    },

    methods: {
        get_filter_from_date: function get_filter_from_date() {
            if ($('#filter_from_' + this.id).val() == undefined) {
                return this.FilterFromDate;
            }

            return $('#filter_from_' + this.id).val();
        },
        get_filter_to_date: function get_filter_to_date() {
            if ($('#filter_to_' + this.id).val() == undefined) {
                return this.FilterToDate + " 23:59:59";
            }

            return $('#filter_to_' + this.id).val() + " 23:59:59";
        },

        init: function init() {
            this.build();
        },
        build: function build() {
            $('#chartjs_' + this.id + '_loading').show();
            var that = this;
            var url = this.source + '?filter[' + this.FilterColumn + ']=ge:' + this.get_filter_from_date() + ':and:le:' + this.get_filter_to_date() + '&filter[is_anomaly]=0';

            $.ajax({
                url: url,
                method: 'GET',
                success: function success(data) {
                    that.data = [];
                    $.each(data.data, function (srg) {
                        var group = data.data[srg];
                        var group_data = group.map(function (sr) {
                            return { y: sr.value, x: sr.created_at };
                        });
                        that.data.push({
                            label: group[0].logical_sensor_name,
                            data: group_data
                        });
                    });

                    that.draw();
                },
                error: function error(_error) {
                    $('#chartjs_' + that.id + '_loading').hide();
                    console.log(JSON.stringify(_error));
                }
            });
        },
        draw: function draw() {
            if (this.data === null) {
                return;
            }

            var that = this;
            var c = new Chart(document.getElementById('chartjs_' + this.id), {
                type: 'line',
                data: {
                    datasets: that.data
                },
                options: {
                    scales: {
                        xAxes: [{
                            type: 'time'
                        }]
                    }
                }
            });

            $('#chartjs_' + that.id + '_loading').hide();
        }
    },

    created: function created() {
        window.eventHubVue.processStarted();

        window.eventHubVue.$on('ForceRerender', this.draw);

        var that = this;
        this.$nextTick(function () {
            $('.datepicker').pickadate({
                format: 'yyyy-mm-dd'
            });

            that.build();
        });

        window.eventHubVue.processEnded();
    }
});

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            components: [],
            meta: [],
            filter: {
                name: '',
                'controlunit.name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceApiBaseUrl: {
            type: String,
            required: true
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        }
    },

    methods: {
        update: function update(e) {
            var item = null;
            var component = this.get_component_from_event(e);

            this.components.forEach(function (data, index) {
                if (data.id === component.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.components.splice(item, 1, component);
            }
        },

        delete: function _delete(e) {
            var item = null;
            var component = this.get_component_from_event(e);

            this.components.forEach(function (data, index) {
                if (data.id === component.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.components.splice(item, 1);
            }
        },

        get_component_from_event: function get_component_from_event(e) {
            var component_types = ['physical_sensor', 'logical_sensor', 'valve', 'pump', 'generic_component'];

            var component = null;

            component_types.forEach(function (item) {
                if (e[item] !== undefined) {
                    component = e[item];
                    return;
                }
            });

            return component;
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/' + that.sourceApiBaseUrl + '?' + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.components = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('PhysicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('PhysicalSensorDeleted', function (e) {
            _this.delete(e);
        }).listen('LogicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('LogicalSensorDeleted', function (e) {
            _this.delete(e);
        }).listen('ValveUpdated', function (e) {
            _this.update(e);
        }).listen('ValveDeleted', function (e) {
            _this.delete(e);
        }).listen('PumpUpdated', function (e) {
            _this.update(e);
        }).listen('PumpDeleted', function (e) {
            _this.delete(e);
        }).listen('GenericComponentUpdated', function (e) {
            _this.update(e);
        }).listen('GenericComponentDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            controlunits: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        controlunitId: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'valves-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.controlunits.forEach(function (data, index) {
                if (data.id === cu.controlunit.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.controlunits.push(cu.controlunit);
            } else if (item !== null) {
                this.controlunits.splice(item, 1, cu.controlunit);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(cu) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.controlunits.forEach(function (data, index) {
                if (data.id === cu.controlunit_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.controlunits.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
            $('.tooltipped').tooltip({ delay: 50 });
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/controlunits/?with[]=physical_sensors&with[]=valves&with[]=pumps&with[]=generic_components&' + that.controlunitId + '?raw=true',
                method: 'GET',
                success: function success(data) {
                    if (that.controlunitId !== '') {
                        that.controlunits = [data.data];
                    } else {
                        that.controlunits = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                        $('.tooltipped').tooltip({ delay: 50 });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ControlunitUpdated', function (e) {
            _this.update(e);
        }).listen('ControlunitDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            controlunits: [],
            meta: [],
            filter: {
                name: '',
                model: '',
                'controlunit.name': '',
                'terrarium.display_name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.controlunits.forEach(function (data, index) {
                if (data.id === cu.controlunit.id) {
                    item = index;
                }
            });
            if (item !== null) {
                var that = this;
                $.ajax({
                    url: '/api/v1/controlunits/' + cu.controlunit.id,
                    method: 'GET',
                    success: function success(data) {
                        that.controlunits.splice(item, 1, data.data);
                    },
                    error: function error(_error) {
                        console.log(JSON.stringify(_error));
                    }
                });
            }
        },

        delete: function _delete(cu) {
            var item = null;
            this.controlunits.forEach(function (data, index) {
                if (data.id === cu.controlunit.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.controlunits.splice(item, 1);
            }
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/controlunits?with[]=physical_sensors&with[]=valves&with[]=pumps&with[]=generic_components' + '&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.controlunits = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error2) {
                    console.log(JSON.stringify(_error2));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ControlunitUpdated', function (e) {
            _this.update(e);
        }).listen('ControlunitDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            dashboard: {
                action_sequence_intentions: {
                    running: [],
                    should_be_running: []
                },
                action_sequence_schedules: {
                    due: [],
                    overdue: [],
                    running: []
                },
                action_sequence_triggers: {
                    running: [],
                    should_be_running: []
                },
                animal_feeding_schedules: {
                    due: [],
                    overdue: []
                },
                animal_weighing_schedules: {
                    due: [],
                    overdue: []
                },
                suggestions: [],
                terraria: {
                    ok: [],
                    critical: []
                },
                controlunits: {
                    critical: []
                },
                physical_sensors: {
                    critical: []
                }
            }
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'dashboard-masonry-grid',
            required: false
        }
    },

    methods: {

        /*
         * Terrarium events
         */
        updateTerrarium: function updateTerrarium(e) {
            var item = null;
            var found = false;

            /*
             * Check in ok array
             */
            this.dashboard.terraria.ok.forEach(function (data, index) {
                if (data.id === e.terrarium_id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.terrarium.temperature_critical !== false || e.terrarium.humidity_critical !== false || e.terrarium.heartbeat_critical !== false) {
                    this.dashboard.terraria.ok.splice(item, 1);
                } else {
                    this.dashboard.terraria.ok.splice(item, 1, e.terrarium);
                    found = true;
                }
            }

            /*
             * Check in critical array
             */
            item = null;
            this.dashboard.terraria.critical.forEach(function (data, index) {
                if (data.id === e.terrarium_id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.terrarium.temperature_critical === false && e.terrarium.humidity_critical === false && e.terrarium.heartbeat_critical === false) {
                    this.dashboard.terraria.critical.splice(item, 1);
                } else {
                    this.dashboard.terraria.critical.splice(item, 1, e.terrarium);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.terrarium.temperature_critical === false && e.terrarium.humidity_critical === false && e.terrarium.heartbeat_critical === false) {
                    this.dashboard.terraria.ok.push(e.terrarium);
                } else {
                    this.dashboard.terraria.critical.push(e.terrarium);
                }
            }

            this.refresh_grid();
        },
        deleteTerrarium: function deleteTerrarium(e) {
            var that = this;

            /*
             * Check ok array
             */
            this.dashboard.terraria.ok.forEach(function (data, index) {
                if (data.id === e.terrarium_id) {
                    this.dashboard.terraria.ok.splice(index, 1);
                }
            });

            /*
             * Check critical array
             */
            this.dashboard.terraria.critical.forEach(function (data, index) {
                if (data.id === e.terrarium_id) {
                    this.dashboard.terraria.critical.splice(index, 1);
                }
            });

            this.refresh_grid();
        },

        /*
         * AnimalFeedingSchedule events
         */
        updateAnimalFeedingSchedule: function updateAnimalFeedingSchedule(e) {
            var item = null;
            var found = false;

            /*
             * Check in due array
             */
            this.dashboard.animal_feeding_schedules.due.forEach(function (data, index) {
                if (data.id === e.animal_feeding_schedule.id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.animal_feeding_schedule.due_days === 0) {
                    this.dashboard.animal_feeding_schedules.due.splice(item, 1, e.animal_feeding_schedule);
                    found = true;
                } else {
                    this.dashboard.animal_feeding_schedules.due.splice(item, 1);
                }
            }

            /*
             * Check in overdue array
             */
            item = null;
            this.dashboard.animal_feeding_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.animal_feeding_schedule.id) {
                    item = index;
                }
            });

            if (item !== null) {
                if (e.animal_feeding_schedule.due_days >= 0) {
                    this.dashboard.animal_feeding_schedules.overdue.splice(item, 1);
                } else {
                    this.dashboard.animal_feeding_schedules.overdue.splice(item, 1, e.animal_feeding_schedule);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.animal_feeding_schedule.due_days == 0) {
                    this.dashboard.animal_feeding_schedules.due.push(e.animal_feeding_schedule);
                } else if (e.animal_feeding_schedule.due_days < 0) {
                    this.dashboard.animal_feeding_schedules.overdue.push(e.animal_feeding_schedule);
                }
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteAnimalFeedingSchedule: function deleteAnimalFeedingSchedule(e) {
            var that = this;

            /*
             * check in due array
             */
            this.dashboard.animal_feeding_schedules.due.forEach(function (data, index) {
                if (data.id === e.animal_feeding_schedule_id) {
                    that.dashboard.animal_feeding_schedules.due.splice(index, 1);
                }
            });

            /*
             * check in overdue array
             */
            this.dashboard.animal_feeding_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.animal_feeding_schedule_id) {
                    this.dashboard.animal_feeding_schedules.overdue.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        /*
         * AnimalWeighingSchedule events
         */
        updateAnimalWeighingSchedule: function updateAnimalWeighingSchedule(e) {
            var item = null;
            var found = false;

            /*
             * Check in due array
             */
            this.dashboard.animal_weighing_schedules.due.forEach(function (data, index) {
                if (data.id === e.animal_weighing_schedule.id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.animal_weighing_schedule.due_days === 0) {
                    this.dashboard.animal_weighing_schedules.due.splice(item, 1, e.animal_weighing_schedule);
                    found = true;
                } else {
                    this.dashboard.animal_weighing_schedules.due.splice(item, 1);
                }
            }

            /*
             * Check in overdue array
             */
            item = null;
            this.dashboard.animal_weighing_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.animal_weighing_schedule.id) {
                    item = index;
                }
            });

            if (item !== null) {
                if (e.animal_weighing_schedule.due_days >= 0) {
                    this.dashboard.animal_weighing_schedules.overdue.splice(item, 1);
                } else {
                    this.dashboard.animal_weighing_schedules.overdue.splice(item, 1, e.animal_weighing_schedule);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.animal_weighing_schedule.due_days == 0) {
                    this.dashboard.animal_weighing_schedules.due.push(e.animal_weighing_schedule);
                } else if (e.animal_weighing_schedule.due_days < 0) {
                    this.dashboard.animal_weighing_schedules.overdue.push(e.animal_weighing_schedule);
                }
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteAnimalWeighingSchedule: function deleteAnimalWeighingSchedule(e) {
            var that = this;

            /*
             * check in due array
             */
            this.dashboard.animal_weighing_schedules.due.forEach(function (data, index) {
                if (data.id === e.animal_weighing_schedule_id) {
                    that.dashboard.animal_weighing_schedules.due.splice(index, 1);
                }
            });

            /*
             * check in overdue array
             */
            this.dashboard.animal_weighing_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.animal_weighing_schedule_id) {
                    this.dashboard.animal_weighing_schedules.overdue.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        /*
         * ActionSequenceSchedule events
         */
        updateActionSequenceSchedule: function updateActionSequenceSchedule(e) {
            var item = null;
            var found = false;

            /*
             * Check in due array
             */
            this.dashboard.action_sequence_schedules.due.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule.id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.action_sequence_schedule.states.is_overdue === false && e.action_sequence_schedule.states.will_run_today === true) {
                    this.dashboard.action_sequence_schedules.due.splice(item, 1, e.action_sequence_schedule);
                    found = true;
                } else {
                    this.dashboard.action_sequence_schedules.due.splice(item, 1);
                }
            }
            item = null;

            /*
             * Check in overdue array
             */
            item = null;
            this.dashboard.action_sequence_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule.id) {
                    item = index;
                }
            });
            if (item !== null) {
                if (e.action_sequence_schedule.states.is_overdue === false) {
                    this.dashboard.action_sequence_schedules.overdue.splice(item, 1);
                } else {
                    this.dashboard.action_sequence_schedules.overdue.splice(item, 1, e.action_sequence_schedule);
                    item = null;
                }
                found = true;
            }

            /*
             * Check in running array
             */
            item = null;
            this.dashboard.action_sequence_schedules.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule.id) {
                    item = index;
                }
            });

            if (item !== null) {
                if (e.action_sequence_schedule.states.running === false) {
                    this.dashboard.action_sequence_schedules.running.splice(item, 1);
                } else {
                    this.dashboard.action_sequence_schedules.running.splice(item, 1, e.action_sequence_schedule);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.action_sequence_schedule.states.is_overdue === false && e.action_sequence_schedule.states.will_run_today === true) {
                    this.dashboard.action_sequence_schedules.due.push(e.action_sequence_schedule);
                } else if (e.action_sequence_schedule.states.is_overdue === true) {
                    this.dashboard.action_sequence_schedules.overdue.push(e.action_sequence_schedule);
                } else if (e.action_sequence_schedule.states.running === true) {
                    this.dashboard.action_sequence_schedules.running.push(e.action_sequence_schedule);
                }
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteActionSequenceSchedule: function deleteActionSequenceSchedule(e) {
            var that = this;

            /*
             * check in due array
             */
            this.dashboard.action_sequence_schedules.due.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule_id) {
                    that.dashboard.action_sequence_schedules.due.splice(index, 1);
                }
            });

            /*
             * check in overdue array
             */
            this.dashboard.action_sequence_schedules.overdue.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule_id) {
                    that.dashboard.action_sequence_schedules.overdue.splice(index, 1);
                }
            });

            /*
             * check in running array
             */
            this.dashboard.action_sequence_schedules.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_schedule_id) {
                    that.dashboard.action_sequence_schedules.running.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        /*
         * ActionSequenceTrigger events
         */
        updateActionSequenceTrigger: function updateActionSequenceTrigger(e) {
            var item = null;
            var found = false;

            /*
             * Check in running array
             */
            item = null;
            this.dashboard.action_sequence_triggers.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_trigger.id) {
                    item = index;
                }
            });

            if (item !== null) {
                if (e.action_sequence_trigger.states.running === false) {
                    this.dashboard.action_sequence_triggers.running.splice(item, 1);
                } else {
                    this.dashboard.action_sequence_triggers.running.splice(item, 1, e.action_sequence_trigger);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.action_sequence_trigger.states.running === true) {
                    this.dashboard.action_sequence_triggers.running.push(e.action_sequence_trigger);
                }
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteActionSequenceTrigger: function deleteActionSequenceTrigger(e) {
            var that = this;

            /*
             * check in running array
             */
            this.dashboard.action_sequence_triggers.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_trigger_id) {
                    that.dashboard.action_sequence_triggers.running.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        /*
         * ActionSequenceIntention events
         */
        updateActionSequenceIntention: function updateActionSequenceIntention(e) {
            var item = null;
            var found = false;

            /*
             * Check in running array
             */
            item = null;
            this.dashboard.action_sequence_intentions.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_intention.id) {
                    item = index;
                }
            });

            if (item !== null) {
                if (e.action_sequence_intention.states.running === false) {
                    this.dashboard.action_sequence_intentions.running.splice(item, 1);
                } else {
                    this.dashboard.action_sequence_intentions.running.splice(item, 1, e.action_sequence_intention);
                    found = true;
                }
            }

            /*
             * If found is not true, the item was either not found
             * or was removed from an array.
             * In this case properties will be checked again and
             * item will be pushed to an array if they match certain criteria
             */
            if (found !== true) {
                if (e.action_sequence_intention.states.running === true) {
                    this.dashboard.action_sequence_intentions.running.push(e.action_sequence_intention);
                }
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteActionSequenceIntention: function deleteActionSequenceIntention(e) {
            var that = this;

            /*
             * check in running array
             */
            this.dashboard.action_sequence_intentions.running.forEach(function (data, index) {
                if (data.id === e.action_sequence_intention_id) {
                    that.dashboard.action_sequence_intentions.running.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        deleteSuggestion: function deleteSuggestion(e) {
            var that = this;

            this.dashboard.suggestions.forEach(function (data, index) {
                if (data.id === e.target_id) {
                    that.dashboard.suggestions.splice(index, 1);
                }
            });

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('.dropdown-button').dropdown({
                constrain_width: false
            });
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
            $('.tooltipped').tooltip({ delay: 50 });
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        link_post: function link_post(e) {
            e.preventDefault();
            var old = e;

            var parentElement = e.target.href ? e.target : e.target.parentElement;
            var oldContent = parentElement.innerHTML;
            $(parentElement).html('<div class="preloader-wrapper tiny active">' + '<div class="spinner-layer spinner-green-only">' + '<div class="circle-clipper left">' + '<div class="circle"></div>' + '</div><div class="gap-patch">' + '<div class="circle"></div>' + '</div><div class="circle-clipper right">' + '<div class="circle"></div>' + '</div>' + '</div>' + '</div>');

            $.post(parentElement.href, null, function (e) {
                $(parentElement).html(oldContent);
            });
        },

        load_data: function load_data(initial) {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/dashboard',
                method: 'GET',
                success: function success(data) {
                    that.dashboard = data.data;

                    that.$nextTick(function () {
                        if (initial) {
                            var container = $('#' + that.containerId);
                            container.masonry({
                                columnWidth: '.col',
                                itemSelector: '.col'
                            });
                        }

                        that.refresh_grid();
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    window.notification('An error occured :(', 'red darken-1 text-white');
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('TerrariumUpdated', function (e) {
            _this.updateTerrarium(e);
        }).listen('TerrariumDeleted', function (e) {
            _this.deleteTerrarium(e);
        }).listen('AnimalFeedingScheduleUpdated', function (e) {
            _this.updateAnimalFeedingSchedule(e);
        }).listen('AnimalFeedingScheduleDeleted', function (e) {
            _this.deleteAnimalFeedingSchedule(e);
        }).listen('AnimalWeighingScheduleUpdated', function (e) {
            _this.updateAnimalWeighingSchedule(e);
        }).listen('AnimalWeighingScheduleDeleted', function (e) {
            _this.deleteAnimalWeighingSchedule(e);
        }).listen('ActionSequenceScheduleUpdated', function (e) {
            _this.updateActionSequenceSchedule(e);
        }).listen('ActionSequenceScheduleDeleted', function (e) {
            _this.deleteActionSequenceSchedule(e);
        }).listen('ActionSequenceTriggerUpdated', function (e) {
            _this.updateActionSequenceTrigger(e);
        }).listen('ActionSequenceTriggerDeleted', function (e) {
            _this.deleteActionSequenceTrigger(e);
        }).listen('ActionSequenceIntentionUpdated', function (e) {
            _this.updateActionSequenceIntention(e);
        }).listen('ActionSequenceIntentionDeleted', function (e) {
            _this.deleteActionSequenceIntention(e);
        }).listen('ReadFlagSet', function (e) {
            _this.deleteSuggestion(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data(true);
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({

    props: {
        id: {
            type: Number,
            required: false,
            default: Math.floor(Math.random() * 1000000)
        },
        source: {
            type: String,
            required: true
        },
        FilterColumn: {
            type: String,
            default: 'created_at',
            required: false
        },
        ShowFilterForm: {
            type: Boolean,
            default: false,
            required: false
        },
        FilterFromDate: {
            type: String,
            default: new Date(new Date().setDate(new Date().getDate() - 2)).toYmd(),
            required: false
        },
        FilterToDate: {
            type: String,
            default: new Date().toYmd(),
            required: false
        },
        ColumnIdField: {
            type: String,
            required: true
        },
        ColumnNameField: {
            type: String,
            required: true
        },
        LabelsDivId: {
            type: String,
            default: null,
            required: false
        },
        TimeAxisLabel: {
            type: String,
            default: 'created_at',
            required: false
        }
    },

    data: function data() {
        return {
            chart: null,
            options: {},
            data: [],
            columns: [],
            colors: [],
            graph: null,
            debug: null
        };
    },


    components: {
        'loading-indicator': __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default.a
    },

    methods: {
        set_rollperiod: function set_rollperiod(e) {
            this.graph.adjustRoll(parseInt($('#dygraph_' + this.id + '_rollperiodselector').val()));
        },
        get_filter_from_date: function get_filter_from_date() {
            if ($('#filter_from_' + this.id).val() == undefined) {
                return this.FilterFromDate;
            }

            return $('#filter_from_' + this.id).val();
        },
        get_filter_to_date: function get_filter_to_date() {
            if ($('#filter_to_' + this.id).val() == undefined) {
                return this.FilterToDate + " 23:59:59";
            }

            return $('#filter_to_' + this.id).val() + " 23:59:59";
        },

        init: function init() {
            this.build();
        },
        build: function build() {
            $('#dygraph_' + this.id + '_loading').show();
            var that = this;
            var url = this.source + '?filter[' + this.FilterColumn + ']=ge:' + this.get_filter_from_date() + ':and:le:' + this.get_filter_to_date() + '&filter[is_anomaly]=0';

            $.ajax({
                url: url,
                method: 'GET',
                success: function success(data) {
                    var groupBy = function groupBy(xs, key) {
                        return xs.reduce(function (rv, x) {
                            (rv[x[key]] = rv[x[key]] || []).push(x);
                            return rv;
                        }, {});
                    };
                    var _columns = Object.values(groupBy(data.data, that.ColumnIdField));

                    var color_repo = {
                        'temperature_celsius': ['#f44336', '#c62828', '#b71c1c'],
                        'humidity_percent': ['#2196f3', '#1565c0', '#0d47a1'],
                        'default': ['#ff9800', '#009688', '#03a9f4', '#e91e63', '#9c27b0']
                    };
                    var color_repo_used = {
                        'temperature_celsius': 0,
                        'humidity_percent': 0,
                        'default': 0
                    };

                    that.columns = ['created_at'];
                    that.colors = [];
                    _columns.forEach(function (c) {
                        var repo_name = '';
                        if (color_repo[c[0]['value_type']] !== undefined) {
                            repo_name = c[0]['value_type'];
                        } else {
                            repo_name = 'default';
                        }
                        var color = '';
                        var color_num = color_repo_used[repo_name];
                        if (color_repo[repo_name].length <= color_num) {
                            color_num = color_repo_used.default;
                            console.log('Out of colors for ' + repo_name);
                            repo_name = 'default';
                            if (color_repo.default.length <= color_repo_used.default) {
                                console.log('Default color is used up. Falling back to black');
                                color = '#000000';
                            } else {
                                color = color_repo.default[color_num];
                            }
                        } else {
                            color = color_repo[repo_name][color_num];
                        }
                        that.colors.push(color);
                        color_repo_used[repo_name] += 1;

                        that.columns.push(c[0][that.ColumnNameField]);
                    });

                    var rows = [];
                    var i = 0;
                    _columns.forEach(function (c) {
                        c.forEach(function (d) {
                            var series = [];
                            series.push(new Date(d.created_at));
                            for (var j = 0; j < _columns.length; j++) {
                                if (i === j) {
                                    series.push(d.value);
                                } else {
                                    series.push(null);
                                }
                            }
                            rows.push(series);
                        });

                        i += 1;
                    });

                    rows.sort(function (a, b) {
                        if (a[0] > b[0]) {
                            return 1;
                        }

                        if (a[0] < b[0]) {
                            return -1;
                        }

                        return 0;
                    });

                    rows.map(function (r, i) {
                        r.map(function (c, j) {
                            if (c === null) {
                                if (i > 0) {
                                    return rows[i - 1][j];
                                }
                            }
                            return c;
                        });
                    });

                    that.data = rows;

                    that.draw();
                },
                error: function error(_error) {
                    $('#dygraph_' + that.id + '_loading').hide();
                    console.log(JSON.stringify(_error));
                }
            });
        },
        draw: function draw() {
            if (this.data === null || this.data.length < 1) {
                $('#dygraph_' + this.id + '_loading').hide();
                return;
            }

            this.options = {
                connectSeparatedPoints: true,
                strokeWidth: 1.5,
                rollPeriod: 4,
                showRoller: false,
                showRangeSelector: true,
                rangeSelectorPlotFillGradientColor: '#ffcc80',
                rangeSelectorPlotFillColor: '#ffcc80',
                rangeSelectorPlotLineWidth: 1,
                rangeSelectorPlotStrokeColor: '#ff6d00',
                rangeSelectorBackgroundStrokeColor: '#757575',
                rangeSelectorBackgroundStrokeWidth: 1,
                legend: 'always',
                colors: this.colors,
                axisLineColor: '#D4D4D4',
                labels: this.columns,
                legendFormatter: function legendFormatter(data) {
                    if (data.x == null) {
                        // This happens when there's no selection and {legend: 'always'} is set.
                        return '<br>' + data.series.map(function (series) {
                            return series.dashHTML + ' ' + series.labelHTML;
                        }).join('<br>');
                    }

                    //var html = this.getLabels()[0] + ': ' + data.xHTML;
                    var html = that.TimeAxisLabel + ': ' + data.xHTML;
                    data.series.forEach(function (series) {
                        if (!series.isVisible) {
                            return;
                        }
                        var yData = series.yHTML === undefined ? '' : series.yHTML;
                        var labeledData = series.labelHTML + ': ' + yData;
                        if (series.isHighlighted) {
                            labeledData = '<b>' + labeledData + '</b>';
                        }
                        html += '<br>' + series.dashHTML + ' ' + labeledData;
                    });
                    return html;
                },
                axes: {
                    x: {
                        axisLabelFormatter: function axisLabelFormatter(d) {
                            return d.toLocaleDateString();
                        },
                        valueFormatter: function valueFormatter(ms) {
                            return new Date(ms).toLocaleString();
                        }
                    }
                }
            };

            if (this.LabelsDivId !== null) {
                this.options.labelsDiv = this.LabelsDivId;
                this.options.labelsSeparateLines = true;
            }

            var that = this;

            try {
                this.graph = new Dygraph(document.getElementById('dygraph_' + this.id), this.data, this.options);

                this.graph.ready(function () {
                    $('#dygraph_' + that.id + '_loading').hide();
                });
            } catch (ex) {
                $('#dygraph_' + that.id + '_loading').hide();
                console.log(ex);
            }
        }
    },

    created: function created() {
        window.eventHubVue.processStarted();

        window.eventHubVue.$on('ForceRerender', this.draw);

        var that = this;
        this.$nextTick(function () {
            $('.datepicker').pickadate({
                format: 'yyyy-mm-dd'
            });

            that.build();
        });

        window.eventHubVue.processEnded();
    }
});

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            files: [],
            meta: [],
            filter: {
                name: '',
                model: '',
                'file.name': '',
                'terrarium.display_name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: 'filter[usage]=notlike:thumb:or:null',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        },
        showOptionSelect: {
            type: Boolean,
            default: false,
            required: false
        }
    },

    methods: {
        update: function update(f) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === f.file.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.files.splice(item, 1, f.file);
            }
        },

        delete: function _delete(f) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === f.file.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.files.splice(item, 1);
            }
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter(e) {
            if (e) {
                e.preventDefault();
            }
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/files?with[]=properties&page=' + that.page + that.filter_string + that.order_string,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.files = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('FileUpdated', function (e) {
            _this.update(e);
        }).listen('FileDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        this.set_filter();

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            files: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        fileId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_type: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_id: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === a.file.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.files.push(a.animal);
            } else if (item !== null) {
                this.files.splice(item, 1, a.animal);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === a.file_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.files.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/files/?with[]=properties&' + that.fileId + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.fileId !== '') {
                        that.files = [data.data];
                    } else {
                        that.files = data.data;
                    }

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('FileUpdated', function (e) {
            _this.update(e);
        }).listen('FileDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            files: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        fileId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_type: {
            type: String,
            default: '',
            required: false
        },
        belongsTo_id: {
            type: String,
            default: '',
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(a) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === a.file.id) {
                    item = index;
                }
            });
            if (item === null) {
                this.files.push(a.animal);
            } else if (item !== null) {
                this.files.splice(item, 1, a.animal);
            }
        },

        delete: function _delete(a) {
            var item = null;
            this.files.forEach(function (data, index) {
                if (data.id === a.file_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.files.splice(item, 1);
            }
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/files/' + that.fileId + '?with[]=properties&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.fileId !== '') {
                        that.files = [data.data];
                    } else {
                        that.files = data.data;
                    }

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('FileUpdated', function (e) {
            _this.update(e);
        }).listen('FileDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            component_properties: [],
            component_states: [],
            component_intentions: [],
            generic_component_type: {
                name_singular: '',
                name_plural: '',
                icon: '3d_rotation'
            }
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        genericComponentType: {
            type: String,
            default: null,
            required: false
        },
        properties: {
            type: Array,
            default: null,
            required: false
        },
        states: {
            type: Array,
            default: null,
            required: false
        },
        intentions: {
            type: Array,
            default: null,
            required: false
        },
        defaultRunningState: {
            type: String,
            default: null,
            required: false
        },
        sensorreadingTypes: {
            type: Array,
            default: [],
            required: false
        }
    },

    methods: {

        add_property: function add_property() {
            this.component_properties.push({ name: '' });
        },

        add_state: function add_state() {
            this.component_states.push({ name: '' });
        },

        add_intention: function add_intention() {
            this.component_intentions.push({ default_intention_intention: '', default_intention_type: '' });
            this.$nextTick(function () {
                $('select').material_select();
            });
        }

    },

    created: function created() {
        var that = this;
        this.$nextTick(function () {
            if (that.genericComponentType !== null && that.genericComponentType.length < 1) {
                that.generic_component_type = that.genericComponentType;
                $('#' + that.generic_component_type.id).attr('data-method', 'PUT');

                that.default_running_state = that.defaultRunningState;

                if (that.properties !== null) {
                    that.properties.forEach(function (el) {
                        that.component_properties.push({ name: el });
                    });
                }
                if (that.states !== null) {
                    that.states.forEach(function (el) {
                        that.component_states.push({ name: el });
                    });
                }
                if (that.intentions !== null) {
                    that.intentions.forEach(function (el) {
                        that.component_intentions.push({ intention: el.name, type: el.value });
                    });
                }
            }
        });
    }
});

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            generic_components: [],
            meta: [],
            filter: {
                name: '',
                'type.name_singular': this.defaultTypeFilter,
                'controlunit.name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        defaultTypeFilter: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        }
    },

    methods: {
        update: function update(ps) {
            var item = null;
            this.generic_components.forEach(function (data, index) {
                if (data.id === ps.generic_component.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.generic_components.splice(item, 1, ps.generic_component);
            }
        },

        delete: function _delete(ps) {
            var item = null;
            this.generic_components.forEach(function (data, index) {
                if (data.id === ps.generic_component.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.generic_components.splice(item, 1);
            }
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/generic_components?with[]=properties&with[]=states&with[]=type&with[]=controlunit&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.generic_components = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('GenericComponentUpdated', function (e) {
            _this.update(e);
        }).listen('GenericComponentDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        this.set_filter();

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            generic_components: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        genericComponentId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'generic_components-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(gc) {
            var item = null;
            this.generic_components.forEach(function (data, index) {
                if (data.id === gc.generic_component.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.generic_components.push(gc.generic_component);
            } else if (item !== null) {
                this.generic_components.splice(item, 1, gc.generic_component);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(gc) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.generic_components.forEach(function (data, index) {
                if (data.id === gc.generic_component_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.generic_components.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/generic_components/' + that.genericComponentId + '?with[]=properties&with[]=states&' + 'with[]=type&with[]=controlunit&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.genericComponentId !== '') {
                        that.generic_components = [data.data];
                    } else {
                        that.generic_components = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('GenericComponentUpdated', function (e) {
            _this.update(e);
        }).listen('GenericComponentDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ __webpack_exports__["default"] = ({

    props: {
        id: {
            type: Number,
            required: false,
            default: Math.floor(Math.random() * 1000000)
        },
        type: {
            type: String,
            default: 'line',
            required: false
        },
        eventType: {
            type: String,
            default: null,
            required: false
        },
        source: {
            type: String,
            required: true
        },
        HorizontalAxisTitle: {
            type: String,
            default: '',
            required: false
        },
        VerticalAxisTitle: {
            type: String,
            default: '',
            required: false
        },
        VerticalAxisGridlinesCount: {
            type: Number,
            default: 5,
            required: false
        },
        Height: {
            type: Number,
            default: 300,
            required: false
        },
        BackgroundColor: {
            type: String,
            default: '',
            required: false
        },
        FilterColumn: {
            type: String,
            default: null,
            required: true
        },
        ShowFilterForm: {
            type: Boolean,
            default: false,
            required: false
        },
        FilterFromDate: {
            type: String,
            default: new Date(new Date().setMonth(new Date().getMonth() - 3)).toYmd(),
            required: false
        },
        FilterToDate: {
            type: String,
            default: new Date().toYmd(),
            required: false
        }
    },
    data: function data() {
        return {
            chart: null,
            options: {},
            data: []
        };
    },


    methods: {
        get_filter_from_date: function get_filter_from_date() {
            if ($('#filter_from_' + this.id).val() == undefined) {
                return this.FilterFromDate;
            }

            return $('#filter_from_' + this.id).val();
        },
        get_filter_to_date: function get_filter_to_date() {
            if ($('#filter_to_' + this.id).val() == undefined) {
                return this.FilterToDate + " 23:59:59";
            }

            return $('#filter_to_' + this.id).val() + " 23:59:59";
        },
        init: function init() {
            this.data = new google.visualization.DataTable();
            this.build();
        },
        build: function build() {
            $('#dygraph_' + this.id + '_loading').show();
            var that = this;
            var url = this.source + '&filter[' + this.FilterColumn + ']=ge:' + this.get_filter_from_date() + ':and:le:' + this.get_filter_to_date();

            $.ajax({
                url: url,
                method: 'GET',
                success: function success(data) {

                    that.data.removeRows(0, that.data.getNumberOfRows());
                    that.data.removeColumns(0, that.data.getNumberOfColumns());

                    $.each(data.data.columns, function (item, col) {
                        that.data.addColumn(col.type, col.name);
                        if (col.type == 'date') {
                            //parse dates
                            $.each(data.data.rows, function (ritem, r) {
                                data.data.rows[ritem][item] = new Date(r[item]);
                            });
                        }
                    });

                    that.data.addRows(data.data.rows);

                    that.chart = new google.visualization.LineChart(document.getElementById('google_chart_' + that.id));
                    that.draw();
                },
                error: function error(_error) {
                    $('#dygraph_' + this.id + '_loading').hide();
                    console.log(JSON.stringify(_error));
                }
            });
        },
        draw: function draw() {
            this.options = {
                hAxis: {
                    title: this.HorizontalAxisTitle,
                    titleTextStyle: 'chartTextColor',
                    gridlines: {
                        count: this.VerticalAxisGridlinesCount,
                        color: '#666'
                    }
                },
                vAxis: {
                    title: this.VerticalAxisTitle,
                    titleTextStyle: 'chartTextColor',
                    gridlines: {
                        color: '#666'
                    }
                },
                annotations: {
                    textStyle: 'chartTextColor'
                },
                height: this.Height,
                width: '100%',
                backgroundColor: 'transparent',
                curveType: 'function',
                pointSize: 4
            };

            this.chart.draw(this.data, this.options);

            $('#dygraph_' + this.id + '_loading').hide();
        }
    },

    created: function created() {
        var _this = this;

        window.eventHubVue.processStarted();

        google.charts.load('current', { packages: ['corechart', this.type] });
        google.charts.setOnLoadCallback(this.init);

        window.eventHubVue.$on('ForceRerender', this.draw);
        if (this.eventType !== null) {
            window.echo.private('dashboard-updates').listen(this.eventType, function (e) {
                _this.build();
            });
        }

        this.$nextTick(function () {
            $('.datepicker').pickadate({
                format: 'yyyy-mm-dd'
            });
        });

        window.eventHubVue.processEnded();
    }
});

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_peity__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_peity___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_peity__);
//
//
//
//
//
//




/* harmony default export */ __webpack_exports__["default"] = ({

    components: {
        Peity: __WEBPACK_IMPORTED_MODULE_0_vue_peity___default.a
    },

    props: ['source', 'type', 'options', 'parentid', 'graphtype', 'dataPrefill'],

    computed: {
        graphData: function graphData() {
            if (this.data === undefined) return '';

            return this.data.toString();
        }
    },

    data: function data() {
        return {
            data: []
        };
    },


    methods: {
        createSensorrreading: function createSensorrreading(value) {
            this.data.push(value);
        },
        updateTerrariumGraph: function updateTerrariumGraph(t) {
            if (t.id === this.parentid) {
                if (this.graphtype === 'humidity_percent') this.data = t.humidity_history;else if (this.graphtype === 'temperature_celsius') this.data = t.temperature_history;
            }
        },
        rerender: function rerender() {
            var tmp = this.data;
            this.data = [0];

            this.$nextTick(function () {
                this.data = tmp;
            });
        }
    },

    created: function created() {
        if (this.dataPrefill != null) {
            this.data = this.dataPrefill;
        } else {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: that.source,
                method: 'GET',
                success: function success(data) {
                    that.data = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }

        window.eventHubVue.$on('ForceRerender', this.rerender);
        window.eventHubVue.$on('SensorreadingCreated', this.createSensorrreading);
        window.eventHubVue.$on('TerrariumGraphUpdated', this.updateTerrariumGraph);
    }
});

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {};
    },


    props: {
        size: {
            type: Number,
            default: 100,
            required: false
        }
    },

    methods: {},

    created: function created() {}
});

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            logical_sensors: [],
            meta: [],
            filter: {
                name: '',
                type: '',
                'physical_sensor.terrarium.display_name': '',
                'physical_sensor.name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        get_accuracy_adjustment: function get_accuracy_adjustment(ls) {
            if (ls.properties === undefined) {
                return null;
            }

            var adjustment = ls.properties.filter(function (el) {
                return el.type == 'LogicalSensorAccuracy' && el.name == 'adjust_rawvalue' && el.value.length > 0;
            });
            if (adjustment.length > 0) {
                return adjustment[0].value;
            }
            return null;
        },
        update: function update(ls) {
            var item = null;
            this.logical_sensors.forEach(function (data, index) {
                if (data.id === ls.logical_sensor.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.logical_sensors.splice(item, 1, ls.logical_sensor);
            }
        },

        delete: function _delete(ls) {
            var item = null;
            this.logical_sensors.forEach(function (data, index) {
                if (data.id === ls.logical_sensor.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.logical_sensors.splice(item, 1);
            }
        },
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/logical_sensors?with[]=physical_sensor&with[]=thresholds&page=' + that.page + that.filter_string + that.order_string,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.logical_sensors = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('LogicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('LogicalSensorDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);
    }
});

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            logical_sensors: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        logical_sensorId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'logical_sensors-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.logical_sensors.forEach(function (data, index) {
                if (data.id === cu.logical_sensor.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.logical_sensors.push(cu.logical_sensor);
            } else if (item !== null) {
                this.logical_sensors.splice(item, 1, cu.logical_sensor);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(cu) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.logical_sensors.forEach(function (data, index) {
                if (data.id === cu.logical_sensor_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.logical_sensors.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/logical_sensors/' + that.logical_sensorId + '?with[]=physical_sensor&with[]=thresholds&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.logical_sensorId !== '') {
                        that.logical_sensors = [data.data];
                    } else {
                        that.logical_sensors = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('LogicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('LogicalSensorDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            logs: [],
            meta: [],
            filter: {},
            filter_string: '',
            order: {
                field: 'created_at',
                direction: 'desc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/logs?page=' + this.page + this.filter_string + this.order_string,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.logs = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);
    }
});

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            physical_sensors: [],
            meta: [],
            filter: {
                name: '',
                model: '',
                'controlunit.name': '',
                'terrarium.display_name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        refreshTimeoutSeconds: {
            type: Number,
            default: 60,
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(ps) {
            var item = null;
            this.physical_sensors.forEach(function (data, index) {
                if (data.id === ps.physical_sensor.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.physical_sensors.splice(item, 1, ps.physical_sensor);
            }
        },

        delete: function _delete(ps) {
            var item = null;
            this.physical_sensors.forEach(function (data, index) {
                if (data.id === ps.physical_sensor.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.physical_sensors.splice(item, 1);
            }
        },

        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/physical_sensors?with[]=controlunit&with[]=logical_sensors&with[]=terrarium&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.physical_sensors = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('PhysicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('PhysicalensorDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        this.set_filter();

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            physical_sensors: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        physical_sensorId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'physical_sensors-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.physical_sensors.forEach(function (data, index) {
                if (data.id === cu.physical_sensor.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.physical_sensors.push(cu.physical_sensor);
            } else if (item !== null) {
                this.physical_sensors.splice(item, 1, cu.physical_sensor);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(cu) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.physical_sensors.forEach(function (data, index) {
                if (data.id === cu.physical_sensor_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.physical_sensors.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/physical_sensors/' + that.physical_sensorId + '?with[]=controlunit&with[]=logical_sensors' + '&with[]=terrarium&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.physical_sensorId !== '') {
                        that.physical_sensors = [data.data];
                    } else {
                        that.physical_sensors = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('PhysicalSensorUpdated', function (e) {
            _this.update(e);
        }).listen('PhysicalSensorDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            pumps: [],
            meta: [],
            filter: {
                name: '',
                'controlunit.name': '',
                'terrarium.display_name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(p) {
            var item = null;
            this.pumps.forEach(function (data, index) {
                if (data.id === p.pump.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.pumps.splice(item, 1, p.pump);
            }
        },

        delete: function _delete(p) {
            var item = null;
            this.pumps.forEach(function (data, index) {
                if (data.id === p.pump.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.pumps.splice(item, 1);
            }
        },
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/pumps?with[]=valves&with[]=controlunit&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.pumps = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('PumpUpdated', function (e) {
            _this.update(e);
        }).listen('PumpDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);
    }
});

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            pumps: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        pumpId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'valves-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.pumps.forEach(function (data, index) {
                if (data.id === cu.pump.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.pumps.push(cu.pump);
            } else if (item !== null) {
                this.pumps.splice(item, 1, cu.pump);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(cu) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.pumps.forEach(function (data, index) {
                if (data.id === cu.pump_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.pumps.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/pumps/' + that.pumpId + '?with[]=valves&with[]=controlunit&with&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.pumpId !== '') {
                        that.pumps = [data.data];
                    } else {
                        that.pumps = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('PumpUpdated', function (e) {
            _this.update(e);
        }).listen('PumpDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            echo: window.echo,
            ready: false,
            system: {
                emergency_stop: false
            }
        };
    },
    created: function created() {
        var _this = this;

        var that = this;

        $.ajax({
            url: '/api/v1/dashboard/system_status?raw=true',
            method: 'GET',
            success: function success(data) {
                that.system = data.data;
            },
            error: function error(_error) {
                console.log(JSON.stringify(_error));
            }
        });

        window.echo.private('dashboard-updates').listen('SystemStatusUpdated', function (e) {
            _this.system = e.system_status;
        });

        setTimeout(function () {
            that.ready = true;
        }, 2000);
    }
});

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            terraria: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(t) {
            var item = null;
            this.terraria.forEach(function (data, index) {
                if (data.id === t.terrarium.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.terraria.push(t.terrarium);
            } else if (item !== null) {
                this.terraria.splice(item, 1, t.terrarium);
            }
            window.eventHubVue.$emit('TerrariumGraphUpdated', t);
        },

        delete: function _delete(t) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.terraria.forEach(function (data, index) {
                if (data.id === t.terrarium_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.terraria.splice(item, 1);
            }
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/terraria/?raw=true&history_minutes=0',
                method: 'GET',
                success: function success(data) {
                    that.terraria = data.data;

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('TerrariumUpdated', function (e) {
            _this.update(e);
        }).listen('TerrariumDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__inline_graph_vue__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__inline_graph_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__inline_graph_vue__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            terraria: [],
            initial: true,
            meta: [],
            filter: {},
            filter_string: '',
            order: {
                field: 'display_name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        terrariumId: {
            type: String,
            default: null,
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'terraria-masonry-grid',
            required: false
        },
        showFilters: {
            type: Boolean,
            default: false,
            required: false
        }
    },

    components: {
        'inline-graph': __WEBPACK_IMPORTED_MODULE_1__inline_graph_vue___default.a,
        'loading-indicator': __WEBPACK_IMPORTED_MODULE_0__loading_indicator_vue___default.a
    },

    methods: {
        toggle_filters: function toggle_filters() {
            this.showFilters = !this.showFilters;
        },
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        action_sequence_modal: function action_sequence_modal(terrarium_id, action) {
            $('#' + terrarium_id + '_' + action).modal('open');
        },
        update: function update(t) {
            var item = null;
            this.terraria.forEach(function (data, index) {
                if (data.id === t.terrarium_id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                var that = this;
                $.ajax({
                    url: '/api/v1/terraria/' + t.terrarium_id + '?default_history_minutes=true',
                    method: 'GET',
                    success: function success(data) {
                        that.terraria.push(data.data);
                        window.eventHubVue.$emit('TerrariumGraphUpdated', data.data);

                        that.$nextTick(function () {
                            that.refresh_grid();
                        });
                    },
                    error: function error(_error) {
                        console.log(JSON.stringify(_error));
                    }
                });
            } else if (item !== null) {
                this.$set(this.terraria[item], 'loading_data', true);
                var that = this;
                $.ajax({
                    url: '/api/v1/terraria/' + t.terrarium_id + '?default_history_minutes=true',
                    method: 'GET',
                    success: function success(data) {
                        that.terraria.splice(item, 1, data.data);
                        window.eventHubVue.$emit('TerrariumGraphUpdated', data.data);

                        that.$nextTick(function () {
                            that.refresh_grid();
                        });
                    },
                    error: function error(_error2) {
                        console.log(JSON.stringify(_error2));
                        this.$set(this.terraria[item], 'loading_data', false);
                    }
                });
            }
        },
        delete: function _delete(t) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.terraria.forEach(function (data, index) {
                if (data.id === t.terrarium_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.terraria.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        submit: function submit(e) {
            window.submit_form(e);
        },

        load_data: function load_data() {
            var that = this;
            var source_url = '';
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            if (this.terrariumId !== null) {
                source_url = '/api/v1/terraria/' + this.terrariumId + '?with[]=action_sequences&with[]=animals&' + 'with[]=files&with[]=physical_sensors&with[]=valves';
            } else {
                source_url = '/api/v1/terraria/?with[]=action_sequences&with[]=animals&with[]=files&' + 'with[]=physical_sensors&with[]=valves&pagination[per_page]=6&page=' + this.page + this.filter_string + this.order_string;
            }

            window.eventHubVue.processStarted();
            $.ajax({
                url: source_url,
                method: 'GET',
                success: function success(data) {
                    if (that.terrariumId !== null) {
                        that.terraria = [data.data];
                    } else {
                        that.meta = data.meta;
                        that.terraria = data.data;
                    }

                    that.$nextTick(function () {
                        if (that.initial) {
                            var element = '#' + this.containerId;
                            $(element).masonry({
                                columnWidth: '.col',
                                itemSelector: '.col'
                            });
                            that.initial = false;
                        }
                        that.refresh_grid();
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error3) {
                    console.log(JSON.stringify(_error3));
                    window.eventHubVue.processEnded();
                }
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
            $('.modal').modal();
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('TerrariumUpdated', function (e) {
            _this.update(e);
        }).listen('TerrariumDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }

});

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            users: [],
            meta: [],
            filter: {
                id: null,
                name: null,
                email: null
            },
            filter_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        set_filter: function set_filter() {
            this.filter_string = '';
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/users?with[]=settings&page=' + this.page + '&' + this.filter_string,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.users = data.data;
                    that.$nextTick(function () {
                        $('.dropdown-button').dropdown();
                    });
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);
    }
});

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            valves: [],
            meta: [],
            filter: {
                name: '',
                'pump.name': '',
                'controlunit.name': '',
                'terrarium.display_name': ''
            },
            filter_string: '',
            order: {
                field: 'name',
                direction: 'asc'
            },
            order_string: '',
            page: 1
        };
    },


    props: {
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        }
    },

    methods: {
        update: function update(v) {
            var item = null;
            this.valves.forEach(function (data, index) {
                if (data.id === v.valve.id) {
                    item = index;
                }
            });
            if (item !== null) {
                this.valves.splice(item, 1, v.valve);
            }
        },

        delete: function _delete(v) {
            var item = null;
            this.valves.forEach(function (data, index) {
                if (data.id === v.valve.id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.valves.splice(item, 1);
            }
        },
        set_order: function set_order(field) {
            if (this.order.field == field || field === null) {
                if (this.order.direction == 'asc') {
                    this.order.direction = 'desc';
                } else {
                    this.order.direction = 'asc';
                }
            } else {
                this.order.field = field;
            }

            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            this.load_data();
        },
        set_filter: function set_filter() {
            this.filter_string = '&';
            if (this.sourceFilter !== '') {
                this.filter_string += this.sourceFilter + '&';
            }
            for (var prop in this.filter) {
                if (this.filter.hasOwnProperty(prop)) {
                    if (this.filter[prop] !== null && this.filter[prop] !== '') {

                        this.filter_string += 'filter[' + prop + ']=like:*' + this.filter[prop] + '*&';
                    }
                }
            }
            this.load_data();
        },
        set_page: function set_page(page) {
            this.page = page;
            this.load_data();
        },
        load_data: function load_data() {
            window.eventHubVue.processStarted();
            this.order_string = 'order[' + this.order.field + ']=' + this.order.direction;
            var that = this;
            $.ajax({
                url: '/api/v1/valves?with[]=pump&with[]=terrarium&with[]=controlunit&page=' + that.page + that.filter_string + that.order_string + '&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    that.meta = data.meta;
                    that.valves = data.data;
                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ValveUpdated', function (e) {
            _this.update(e);
        }).listen('ValveDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.set_filter();
        }, 100);
    }
});

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    data: function data() {
        return {
            valves: []
        };
    },


    props: {
        refreshTimeoutSeconds: {
            type: Number,
            default: null,
            required: false
        },
        valveId: {
            type: String,
            default: '',
            required: false
        },
        sourceFilter: {
            type: String,
            default: '',
            required: false
        },
        subscribeAdd: {
            type: Boolean,
            default: true,
            required: false
        },
        subscribeDelete: {
            type: Boolean,
            default: true,
            required: false
        },
        wrapperClasses: {
            type: String,
            default: '',
            required: false
        },
        containerClasses: {
            type: String,
            default: '',
            required: false
        },
        containerId: {
            type: String,
            default: 'valves-masonry-grid',
            required: false
        }
    },

    methods: {
        update: function update(cu) {
            var item = null;
            this.valves.forEach(function (data, index) {
                if (data.id === cu.valve.id) {
                    item = index;
                }
            });
            if (item === null && this.subscribeAdd === true) {
                this.valves.push(cu.valve);
            } else if (item !== null) {
                this.valves.splice(item, 1, cu.valve);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        delete: function _delete(cu) {
            if (this.subscribeDelete !== true) {
                return;
            }
            var item = null;
            this.valves.forEach(function (data, index) {
                if (data.id === cu.valve_id) {
                    item = index;
                }
            });

            if (item !== null) {
                this.valves.splice(item, 1);
            }

            this.$nextTick(function () {
                this.refresh_grid();
            });
        },

        refresh_grid: function refresh_grid() {
            $('#' + this.containerId).masonry('reloadItems');
            $('#' + this.containerId).masonry('layout');
        },

        load_data: function load_data() {
            window.eventHubVue.processStarted();
            var that = this;
            $.ajax({
                url: '/api/v1/valves/' + that.valveId + '?with[]=pump&with[]=terrarium&with[]=controlunit&' + that.sourceFilter,
                method: 'GET',
                success: function success(data) {
                    if (that.valveId !== '') {
                        that.valves = [data.data];
                    } else {
                        that.valves = data.data;
                    }

                    that.$nextTick(function () {
                        $('#' + that.containerId).masonry({
                            columnWidth: '.col',
                            itemSelector: '.col'
                        });
                    });

                    window.eventHubVue.processEnded();
                },
                error: function error(_error) {
                    console.log(JSON.stringify(_error));
                    window.eventHubVue.processEnded();
                }
            });
        }
    },

    created: function created() {
        var _this = this;

        window.echo.private('dashboard-updates').listen('ValveUpdated', function (e) {
            _this.update(e);
        }).listen('ValveDeleted', function (e) {
            _this.delete(e);
        });

        var that = this;
        setTimeout(function () {
            that.load_data();
        }, 100);

        if (this.refreshTimeoutSeconds !== null) {
            setInterval(function () {
                that.load_data();
            }, this.refreshTimeoutSeconds * 1000);
        }
    }
});

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = { "de": { "buttons": { "next": "Weiter", "save": "Speichern", "delete": "L\xF6schen", "delete_type": "{type} L\xF6schen", "delete_all_type": "Alle {type} l\xF6schen", "loadgraph": "Graph laden", "upload": "Hochladen", "start_setup": "Setup starten", "add": "Hinzuf\xFCgen", "add_intention": "Neue Intention", "add_property": "Neue Eigenschaft", "add_state": "Neuer Zustand", "create": "Hinzuf\xFCgen", "edit": "Bearbeiten", "details": "Details", "download": "Herunterladen", "emergency_stop": "Notaus", "emergency_resume": "Notus aufheben", "revoke": "Widerrufen", "irrigate": "Bew\xE4ssern", "ventilate": "L\xFCften", "heat_up": "Heizen", "cool_down": "K\xFChlen", "start": "Starten", "close": "Schlie\xDFen", "select_all_read": "Alles lesen", "select_all_list": "Alles auflisten", "select_all_write": "Alles schreiben" }, "components": { "User": "Benutzer|Benutzer", "user": "Benutzer|Benutzer", "users": "Benutzer|Benutzer", "Terrarium": "Terrarium|Terraria", "terrarium": "Terrarium|Terraria", "terraria": "Terrarium|Terrarien", "Animal": "Tier|Tiere", "animal": "Tier|Tiere", "animals": "Tier|Tiere", "Controlunit": "Steuereinheit|Steuereinheiten", "controlunit": "Steuereinheit|Steuereinheiten", "controlunits": "Steuereinheit|Steuereinheiten", "Pump": "Pumpe|Pumpen", "pump": "Pumpe|Pumpen", "pumps": "Pumpe|Pumpen", "Valve": "Ventil|Ventile", "valve": "Ventil|Ventile", "valves": "Ventil|Ventile", "PhysicalSensor": "Physischer Sensor|Physische Sensoren", "physical_sensor": "Physischer Sensor|Physische Sensoren", "physical_sensors": "Physischer Sensor|Physische Sensoren", "LogicalSensor": "Logischer Sensor|Logische Sensoren", "logical_sensor": "Logischer Sensor|Logische Sensoren", "logical_sensors": "Logischer Sensor|Logische Sensoren", "LogicalSensorThreshold": "Logischer Sensor Grenzwert|Logische Sensor Grenzwerte", "logical_sensor_threshold": "Logischer Sensor Grenzwert|Logische Sensor Grenzwerte", "logical_sensor_thresholds": "Logischer Sensor Grenzwert|Logische Sensor Grenzwerte", "File": "Datei|Dateien", "file": "Datei|Dateien", "files": "Datei|Dateien", "Log": "Systemlog|Systemlogs", "log": "Systemlog|Systemlogs", "logs": "Systemlog|Systemlogs", "Action": "Aktion|Aktionen", "action": "Aktion|Aktionen", "actions": "Aktion|Aktionen", "ActionSequence": "Aktionssequenz|Aktionssequenzen", "action_sequence": "Aktionssequenz|Aktionssequenzen", "action_sequences": "Aktionssequenz|Aktionssequenzen", "ActionSequenceSchedule": "Aktionssequenz Zeitplan|Aktionssequenz Zeitpl\xE4ne", "action_sequence_schedule": "Aktionssequenz Zeitplan|Aktionssequenz Zeitpl\xE4ne", "action_sequence_schedules": "Aktionssequenz Zeitplan|Aktionssequenz Zeitpl\xE4ne", "ActionSequenceTrigger": "Aktionssequenz Ausl\xF6ser|Aktionssequenz Ausl\xF6ser", "action_sequence_trigger": "Aktionssequenz Ausl\xF6ser|Aktionssequenz Ausl\xF6ser", "action_sequence_triggers": "Aktionssequenz Ausl\xF6ser|Aktionssequenz Ausl\xF6ser", "ActionSequenceIntention": "Aktionssequenz Intention|Aktionssequenz Intentionen", "action_sequence_intention": "Aktionssequenz Intention|Aktionssequenz Intentionen", "action_sequence_intentions": "Aktionssequenz Intention|Aktionssequenz Intentionen", "Trigger": "Ausl\xF6ser|Ausl\xF6ser", "trigger": "Ausl\xF6ser|Ausl\xF6ser", "triggers": "Ausl\xF6ser|Ausl\xF6ser", "admin_panel": "Admin Panel", "admin_panels": "Admin Panel", "AnimalFeedings": "F\xFCtterung|F\xFCtterungen", "animal_feeding": "F\xFCtterung|F\xFCtterungen", "animal_feedings": "F\xFCtterung|F\xFCtterungen", "AnimalFeedingSchedule": "F\xFCtterungsplan|F\xFCtterungspl\xE4ne", "animal_feeding_schedule": "F\xFCtterungsplan|F\xFCtterungspl\xE4ne", "animal_feeding_schedules": "F\xFCtterungsplan|F\xFCtterungspl\xE4ne", "AnimalWeighings": "Wiegung|Wiegungen", "animal_weighing": "Wiegung|Wiegungen", "animal_weighings": "Wiegung|Wiegungen", "AnimalWeighingSchedule": "Wiegeplan|Wiegepl\xE4ne", "animal_weighing_schedule": "Wiegeplan|Wiegepl\xE4ne", "animal_weighing_schedules": "Wiegeplan|Wiegepl\xE4ne", "BiographyEntryEvent": "Biografieeintrag|Biografieeintr\xE4ge", "biography_entry": "Biografieeintrag|Biografieeintr\xE4ge", "biography_entries": "Biografieeintrag|Biografieeintr\xE4ge", "CaresheetEvent": "Begleitblatt|Begleitbl\xE4tter", "caresheet": "Begleitblatt|Begleitbl\xE4tter", "caresheets": "Begleitblatt|Begleitbl\xE4tter", "GenericComponents": "Generische Komponente|Generische Komponenten", "generic_components": "Generische Komponente|Generische Komponenten", "GenericComponentTypes": "Generischer Komponententyp|Generische Komponententypen", "generic_component_type": "Generischer Komponententyp|Generische Komponententypen", "generic_component_types": "Generischer Komponententyp|Generische Komponententypen", "SuggestionEvent": "Vorschlag|Vorschl\xE4ge", "suggestion": "Vorschlag|Vorschl\xE4ge", "suggestions": "Vorschlag|Vorschl\xE4ge" }, "errors": { "retrievegraphdata": "Could not retrieve graph data.", "auth": { "failed": "Authentication failed." } }, "labels": { "connecting": "Verbinde", "title": "Titel", "text": "Text", "tags": "Tags", "status": "Status", "health": "Gesundheit", "birth": "Geburt", "gender": "Geschlecht", "gender_male": "M\xE4nnlich", "gender_female": "Weiblich", "date": "Datum", "date_birth": "Geburtstag", "date_death": "Todestag", "model": "Modell", "type": "Typ", "email": "E-Mail", "name": "Name", "name_singular": "Name (Singular)", "name_plural": "Name (Plural)", "display_name": "Anzeigename", "common_name": "Gemeiner Name", "latin_name": "Lateinischer Name", "temperature": "Temperatur", "temperature_celsius": "Temperatur", "humidity": "Feuchtigkeit", "humidity_percent": "Feuchtigkeit", "heartbeat": "Puls", "last_heartbeat": "Letzter Puls", "noanimals": "Keine Tiere", "create": "Erstelle", "settings": "Einstellung|Einstellungen", "notifications": "Benachrichtigung|Benachrichtigungen", "notification_type": "Nachrichten Kanal", "details": "Details", "rawlimitlo": "Rohwert - unteres Limit", "rawlimithi": "Rohwert - oberes Limit", "file": "Datei", "files": "Dateien", "size": "Gr\xF6\xDFe", "current_value": "Aktueller Wert", "created_at": "Erstellt", "updated_at": "Letztes Update", "download": "Herunterladen", "properties": "Eigenschaften", "preview": "Vorschau", "source": "Quelle", "target": "Ziel", "associated_with": "Assoziiert mit", "log": "Log", "starts_at": "Beginnt um", "ends_at": "Endet um", "starts_after": "Startet nach", "thresholds": "Grenzwerte", "abilities": "F\xE4higkeit|F\xE4higkeiten", "bugtracker": "Bugtracker", "wiki": "Wiki", "auto_nightmode": "Auto Nachtmodus", "permanent_nightmode": "Permanenter Nachtmodus", "language": "Sprache", "belongsTo_type": "Geh\xF6rt zu (Typ)", "belongsTo_id": "Geh\xF6rt zu (ID)", "belongsTo": "Geh\xF6rt zu", "doku": "Dokumentation", "step": "Schritt", "phone_number": "Telefonnummer", "template": "Vorlage", "timezone": "Zeitzone", "critical": "Kritisch", "ok": "OK", "running": "Laufend", "runs_since": "L\xE4uft seit", "queued": "Wartend", "criticalstates": "Kritische Zust\xE4nde", "since": "Seit", "state": "Zustand", "actions": "Aktionen", "irrigate": "Bew\xE4ssern", "duration": "Dauer", "on": "An", "off": "Aus", "just_fed": "F\xFCtterung hinzuf\xFCgen", "add_weight": "Gewicht hinzuf\xFCgen", "active": "Aktiv", "copy_thresholds": "Grenzwerte kopieren", "daily": "T\xE4glich", "last_feeding": "Letzte F\xFCtterung", "crickets": "Heimchen", "mixed_fruits": "Fruchtbrei", "beetle_jelly": "BeetleJelly", "due": "F\xE4llig", "overdue": "\xDCberf\xE4llig", "meal_type": "Nahrungsart", "interval_days": "Intervall in Tagen", "interval": "Intervall", "password": "Passwort", "action": "Aktion", "weight": "Gewicht", "no_data": "Keine Daten", "overview": "\xDCbersicht", "environment": "Umgebung", "now": "Jetzt", "scheduled": "Geplant", "sequence": "Sequenz", "weighprogression": "Gewichtsverlauf", "from": "Von", "tO": "Bis", "feedings": "F\xFCtterungen", "temp_and_hum_history": "Temperatur- und Feuchtigkeitsverlauf", "biography": "Biografie", "bio_categories": "Biografiekategorien", "icon": "Symbol", "average": "Durchschnitt", "min": "Minimum", "max": "Maximum", "during_day": "Tags", "during_night": "Nachts", "total": "Total", "infrastructure": "Infrastruktur", "timeframe_start": "Zeitrahmen ab", "timeframe_end": "Zeitrahmen bis", "reference_value": "Vergleichswert", "reference_value_duration_threshold_minutes": "Vergleichswert unter/\xFCberschritten seit (Minuten)", "for": "f\xFCr", "minimum_timeout_minutes": "Timeout (Minuten)", "emergency_stop": "Notaus", "increases": "Erh\xF6ht", "increase": "Erh\xF6ht", "decreases": "Senkt", "decrease": "Senkt", "personal_access_tokens": "Zugriffstoken", "expires": "L\xE4uft ab", "security": "Sicherheit", "general": "Allgemein", "component": "Komponente", "to": "Bis", "daily_reminders": "T\xE4gliche Erinnerungen", "yesterday": "Gestern", "tomorrow": "Morgen", "today": "Heute", "runonce": "Nur einmal ausf\xFChren", "intention": "Intention", "deceased": "Verstorben", "software_version": "Software Version", "use_as_background": "Als Hintergrund verwenden", "relation_map": "Beziehungskarte", "start_action_sequence": "Aktionssequenz starten", "suggestions": "Vorschl\xE4ge", "suggestions_unit": "Mind. Vorkommnisse", "suggestion_timeframe_unit": "Zeitrahmen (Einheit)", "suggestions_timeframe": "Zeitrahmen", "bus": "Bus", "i2c_address": "I2C Adresse", "i2c_multiplexer_address": "I2C Multiplexer Adresse", "i2c_multiplexer_port": "I2C Multiplexer Port", "gpio_pin": "GPIO Pin", "gpio_default_high": "GPIO Standard High", "configuration": "Konfiguration", "yes": "Ja", "no": "Nein", "rawvalue": "Rohwert", "adjust_rawvalue": "Rohwertkorrektur", "filter": "Filter", "logout": "Ausloggen", "login": "Einloggen", "ask_me_something": "Frag mich etwas", "ventilate": "L\xFCften", "heat_up": "Heizen", "cool_down": "K\xFChlen", "between": "zwischen", "and": "und", "association": "Verkn\xFCpfung", "choose_logfile": "Log-Datei ausw\xE4hlen", "no_image": "Kein Bild", "features": "Features", "rollperiod": "Rollperiode", "add_preset": "Voreinstellung hinzuf\xFCgen" }, "languages": { "german": "Deutsch", "english": "Englisch" }, "menu": { "welcome": "Willkommen", "dashboard": "\xDCbersicht", "general": "Allgemein", "administration": "Administration", "create": "Erstellen", "edit": "Editieren", "delete": "L\xF6schen", "infrastructure": "Infrastruktur", "help": "Hilfe", "logout": "Abmelden", "animals": "Tiere", "terraria": "Terrarien", "users": "Benutzer", "animal_feeding_types": "Nahrungsarten", "logs": "Protokoll", "categories": "Kategorien", "monitoring": "\xDCberwachung", "automation": "Automatisierung", "ciliatus_logs": "Ciliatus Logs", "system_logs": "System Logs", "system_status": "System Status" }, "messages": { "logical_sensor_thresholds": { "copy_warning": "Alle preexistenten Grenzwerte des Zielsensors werden entfernt." }, "users": { "setup_telegram_ok": "Telegram ist eingerichtet.", "setup_telegram_err": "Telegram ist noch nicht eingerichtet.", "setup_telegram_description": "Bitte \xF6ffnen Sie Telegram in Ihrem <a href=\"https://web.telegram.org/#/im?p=@\">Browser</a> oder auf ihrem Smartphone und kontaktieren Sie <b>@</b> mit untenstehendem Aktivierungscode." }, "critical_state_generic": "Kritisch: {critical}_state", "critical_state_notification_logical_sensor": { "humidity_percent": "Kritisch: Der Sensor {logical}_sensor meldet eine Feuchtigkeit von {humidity}_percent%.", "temperature_celsius": "Kritisch: Der Sensor {terrarium} meldet eine Temperatur von {temperature}_celsius\xB0C." }, "critical_state_recovery_notification_logical_sensor": { "humidity_percent": "OK: Der Sensor {logical}_sensor meldet eine Feuchtigkeit von {humidity}_percent%.", "temperature_celsius": "OK: Der Sensor {terrarium} meldet eine Temperatur von {temperature}_celsius\xB0C." }, "critical_state_notification_controlunit": "Kritisch: Die Steuereinheit {controlunit} sendet keine Daten.", "critical_state_recovery_notification_controlunit": "OK: Die Steuereinheit {controlunit} sendet wieder Daten.", "daily": { "intro": "T\xE4gliche Erinnerungen", "feedings_due": "F\xE4llige F\xFCtterungen:", "weighings_due": "F\xE4llige Wiegungen:" }, "own_token_expires": "Token '{name}' l\xE4uft in {days} Tagen ab.", "suggestions": { "humidity_percent": "T\xE4gliche Aktionssequenz zum Bew\xE4ssern um {hour} Uhr" } }, "product": { "name": "ciliatus" }, "setup": { "welcome": "Willkommen zu Ciliatus", "create_user": "Erstelle Deinen Benutzer", "done": "Geschafft!", "what_now": "Was nun?", "login": "Einloggen", "tooltip_login": "Logge Dich mit Deinem soeben erstellten Nutzer bei Ciliatus an.", "add_terrarium": "Terrarium anlegen", "tooltip_add_terrarium": "Erstelle Dein erstes Terrarium in Ciliatus.", "add_animal": "Tier anlegen", "tooltip_add_animal": "Erstelle Dein erstes Tier und ordne es einem Terrarium zu.", "setup_telegram": "Telegram einrichten", "tooltip_setup_telegram": "Lerne, wie Du Telegram mit Ciliatus konfigurieren kannst.", "setup_controlunit": "Kontrolleinheit erstellen", "tooltip_setup_controlunit": "Lerne eine Kontrolleinheit und zugeordnete Sensoren anzulegen um damit zu beginnen Sensordaten zu Deinen Terrarien zu \xFCbermitteln.", "err_completed": "Das Setup wurde bereits durchgef\xFChrt." }, "tooltips": { "ctrltoselect": "Strg+Klick zum selektieren", "active": "Aktiv", "showondefaultdashboard": "Auf Default Dashboard anzeigen", "autoirrigation": "Automatische Bew\xE4sserung", "sendnotificationsfor": "Benachrichtigungen versenden f\xFCr", "loadandrendergraph": "Daten werden ermittelt und Graph wird gerendert", "disables_option": "Deaktiviert \"{option}\"", "phone_number": "Mobilnummer", "contact_bot": "Den Bot kontaktieren", "wait_confirmation": "Auf Best\xE4tigung warten", "set_state_to": "Zustand von <b>{target}</b> auf <b>{state}</b> \xE4ndern f\xFCr <b>{minutes} Minuten</b>", "start_after_started": "Startet wenn Schritt <b>{id}<\/b> gestartet wurde", "start_after_finished": "Startet wenn Schritt <b>{id}<\/b> beendet wurde", "sendnotifications": "Benachrichtigungen versenden", "no_schedules": "Keine Zeitpl\xE4ne", "runonce": "Einmalig", "heartbeat_critical": "Heartbeat ist kritisch!", "copy_thresholds_warning": "Alle existierenden Grenzwerte des Zielsensors werden entfernt.", "animal_feeding_schedule_matrix": "Diese Matrix enth\xE4lt alle definierten F\xFCtterungspl\xE4ne. Die Zahl in einer Spalte stellt das Intervall dar.", "animal_weighing_schedule_matrix": "Diese Matrix enth\xE4lt alle definierten Wiegepl\xE4ne. Die Zahl in einer Spalte stellt das Intervall gefolgt vom n\xE4chsten F\xE4lligkeitsdatum dar.", "done": "Erledigt", "skip": "\xDCberspringen", "material_icons_list": "Die komplette Symbolliste ist unter <a href=\"https:\/\/material.io\/icons\/\">material.io<\/a> einsehbar.", "no_data": "Keine Daten.", "connecting_to_server": "Verbindung zum Ciliatus Server wird hergestellt. Sollte dies l\xE4nger als einige Sekunden dauern, \xFCberpr\xFCfen Sie bitte Ihre Internetverbindung.", "generic_components": { "about": "Generische Komponenten sind Komponenten eines benutzerdefinierten Typs.", "type_about": "Generische Komponententypen definieren Name, Eigenschaften und m\xF6gliche Zust\xE4nde f\xFCr generische Komponenten. Sie dienen als Vorlage beim Erstellen einer neuen generischen Komponente.", "property_templates": "Definiert die Eigenschaften eines generischen Komponententyps. Beim Erstellen einer neuen Komponente diesen Typs wird man aufgefordert, diese Eigenschaften auszuf\xFCllen.", "state_templates": "Definiert m\xF6gliche Zust\xE4nde die eine Komponente diesen Typs haben kann. Beim Erstellen einer Aktionssequenz kann man aus den hier definierten Zust\xE4nden den gew\xFCnschten Zustand ausw\xE4hlen.<br /><br />Die Checkbox links definiert den standardm\xE4\xDFigen 'laufend'-Zustand.", "type_delete_warning": "Beim L\xF6schen eines Komponententyps werden <strong>alle Komponenten dieses Typs</strong> gel\xF6scht.", "intentions": "Intentionen von generischen Komponenten erm\xF6glichen deren automatisches Einbinden in Aktionssequenzen." }, "minimum_timeout_minutes": "Definiert die Dauer der minimalen Pause, bevor die Aktionssequenz durch diesen Ausl\xF6ser nach einem Durchlauf erneut gestartet werden kann.", "reference_value": "Der Wert, mit dem der Sensorwert verglichen werden soll.", "reference_value_duration_threshold_minutes": "Dauer in Minuten, die der Sensorwert den Grenzwert unter/\xFCberschritten haben muss, bevor die Aktionssequenz ausgel\xF6st wird.", "emergency_stop": "H\xE4lt sofort alle Aktionssequenzen an und verhindert das Starten neuer Aktionssequenzen bis der Notaus aufgehoben wird.", "emergency_resume": "Hebt den Notaus auf und erlaubt den Start von Aktionssequenzen.", "leave_empty_for_auto": "Frei lassen f\xFCr automatisch", "intention_increase_decrease": "Definiert ob die Intention dieser Aktionssequenz das Erh\xF6hen oder Senken des Sensorwerts ist.", "suggestions_unit": "Mindestanzahl von Kritischen Zust\xE4nden innerhalb des Zeitrahmens, bevor ein Vorschlag generiert werden soll.", "suggestion_timeframe_unit": "Zeitrahmen der zur Analyse herangezogen werden soll (Einheit)", "suggestions_timeframe": "Zeitrahmen der zur Analyse herangezogen werden soll (Wert)", "show_suggestions": "Vorschl\xE4ge anzeigen", "bus_type_edit_form": "Erm\xF6glicht Ciliatus das automatische Generieren von Kontroleinheitskonfigurationen.", "gpio_default_high": "GPIO Pin wird im Betrieb auf High gezogen. Zum aktivieren der Komponente auf Low.", "adjust_rawvalue": "Beim Empfangen eines Werts durch diesen Sensor kann der Wert korrigiert werden.", "experimental_feature": "Dieses Feature ist experimentell.", "action_sequence_schedules": { "skip": "Heutigen Durchlauf \xFCberspringen." }, "associate_new": "Verkn\xFCpfe <i class=\"material-icons\">{source}_icon</i> {source}_type \"{source}_name\" mit <i class=\"material-icons\">{target}_icon</i> {target}_type", "floating": { "add": "Neu", "edit": "Bearbeiten", "delete": "L\xF6schen" }, "ciliatus_up_to_date": "Aktuell", "ciliatus_not_up_to_date": "Update verf\xFCgbar: <a href=\"{url}\">GitHub</a>", "no_feeding_types": "Es wurden noch keine Futtertypen definiert." }, "units": { "years": "Jahr|Jahre", "months": "Monat|Monate", "days": "Tag|Tage", "hours": "Stunde|Stunden", "minutes": "Minute|Minuten", "seconds": "Sekunde|Sekunden", "temperature_celsius": "\xB0C", "humidity_percent": "%", "years_ago": "vor {val} Jahren", "months_ago": "vor {val} Monaten", "weeks_ago": "vor {val} Wochen", "days_ago": "vor {val} Tagen", "hours_ago": "vor {val} Stunden", "minutes_ago": "vor {val} Minuten", "years_in": "in {val} Jahren", "months_in": "in {val} Monaten", "weeks_in": "in {val} Wochen", "days_in": "in {val} Tagen", "hours_in": "in {val} Stunden", "minutes_in": "in {val} Minuten", "just_now": "gerade eben", "lesser": "<", "greater": ">", "equals": "=", "no_data": "" } }, "en": { "buttons": { "next": "Next", "save": "Save", "delete": "Delete", "delete_type": "Delete {type}", "delete_all_type": "Delete all {type}", "loadgraph": "Load graph", "upload": "Upload", "start_setup": "Start Setup", "add": "Add", "add_intention": "Add Intention", "add_property": "Add Property", "add_state": "Add State", "create": "Add", "edit": "Edit", "details": "Details", "download": "Download", "emergency_stop": "Emergency stop", "emergency_resume": "Remove emergency stop", "revoke": "Revoke", "irrigate": "Irrigate", "ventilate": "Ventilate", "heat_up": "Heat up", "cool_down": "Cool down", "start": "Start", "close": "Close", "select_all_read": "Read all", "select_all_list": "List all", "select_all_write": "Write all" }, "components": { "User": "User|Users", "user": "User|Users", "users": "User|Users", "Terrarium": "Terrarium|Terraria", "terrarium": "Terrarium|Terraria", "terraria": "Terrarium|Terraria", "Animal": "Animal|Animals", "animal": "Animal|Animals", "animals": "Animal|Animals", "Controlunit": "Control Unit|Control Units", "controlunit": "Control Unit|Control Units", "controlunits": "Control Unit|Control Units", "Pump": "Pump|Pumps", "pump": "Pump|Pumps", "pumps": "Pump|Pumps", "Valve": "Valve|Valves", "valve": "Valve|Valves", "valves": "Valve|Valves", "PhysicalSensor": "Physical Sensor|Physical Sensors", "physical_sensor": "Physical Sensor|Physical Sensors", "physical_sensors": "Physical Sensor|Physical Sensors", "LogicalSensor": "Logical Sensor|Logical Sensors", "logical_sensor": "Logical Sensor|Logical Sensors", "logical_sensors": "Logical Sensor|Logical Sensors", "LogicalSensorThreshold": "Logical Sensor Threshold|Logical Sensor Thresholds", "logical_sensor_threshold": "Logical Sensor Threshold|Logical Sensor Thresholds", "logical_sensor_thresholds": "Logical Sensor Threshold|Logical Sensor Thresholds", "File": "File|Files", "file": "File|Files", "files": "File|Files", "Log": "System log|System logs", "log": "System log|System logs", "logs": "System log|System logs", "Action": "Action|Actions", "action": "Action|Actions", "actions": "Action|Actions", "ActionSequence": "Action sequence|Action sequences", "action_sequence": "Action sequence|Action sequences", "action_sequences": "Action sequence|Action sequences", "ActionSequenceSchedule": "Action sequence schedule|Action sequence schedules", "action_sequence_schedule": "Action sequence schedule|Action sequence schedules", "action_sequence_schedules": "Action sequence schedule|Action sequence schedules", "ActionSequenceTrigger": "Action sequence trigger|Action sequence triggers", "action_sequence_trigger": "Action sequence trigger|Action sequence triggers", "action_sequence_triggers": "Action sequence trigger|Action sequence triggers", "ActionSequenceIntention": "Action sequence intention|Action sequence intentions", "action_sequence_intention": "Action sequence intention|Action sequence intentions", "action_sequence_intentions": "Action sequence intention|Action sequence intentions", "Trigger": "Trigger|Triggers", "trigger": "Trigger|Triggers", "triggers": "Trigger|Triggers", "admin_panel": "Admin panel", "admin_panels": "Admin panel", "AnimalFeeding": "Feeding|Feedings", "animal_feeding": "Feeding|Feedings", "animal_feedings": "Feeding|Feedings", "AnimalFeedingSchedule": "Feeding schedule|Feeding schedules", "animal_feeding_schedule": "Feeding schedule|Feeding schedules", "animal_feeding_schedules": "Feeding schedule|Feeding schedules", "AnimalWeighing": "Weighing|Weighings", "animal_weighing": "Weighing|Weighings", "animal_weighings": "Weighing|Weighings", "AnimalWeighingSchedule": "Weighing schedule|Weighing schedules", "animal_weighing_schedule": "Weighing schedule|Weighing schedules", "animal_weighing_schedules": "Weighing schedule|Weighing schedules", "BiographyEntryEvent": "Biography entry|Biography entries", "biography_entry": "Biography entry|Biography entries", "biography_entries": "Biography entry|Biography entries", "CaresheetEvent": "Care Sheet|Care Sheets", "caresheet": "Care Sheet|Care Sheets", "caresheets": "Care Sheet|Care Sheets", "GenericComponent": "Generic Component|Generic Components", "generic_component": "Generic Component|Generic Components", "generic_components": "Generic Component|Generic Components", "GenericComponentType": "Generic Component Type|Generic Component Types", "generic_component_type": "Generic Component Type|Generic Component Types", "generic_component_types": "Generic Component Type|Generic Component Types", "SuggestionEvent": "Suggestion|Suggestions", "suggestion": "Suggestion|Suggestions", "suggestions": "Suggestion|Suggestions" }, "errors": { "retrievegraphdata": "Graphdaten konnten nicht ermittelt werden.", "auth": { "failed": "Authentifizierung fehlgeschlagen." } }, "labels": { "connecting": "Connecting", "title": "Title", "text": "Text", "tags": "Tags", "status": "Status", "health": "Health", "birth": "Birth", "gender": "Gender", "gender_male": "Male", "gender_female": "Female", "date": "Date", "date_birth": "Day of birth", "date_death": "Day of death", "model": "Model", "type": "Type", "email": "E-Mail", "name": "Name", "name_singular": "Name (Singular)", "name_plural": "Name (Plural)", "display_name": "Display Name", "common_name": "Common Name", "latin_name": "Latin Name", "temperature": "Temperature", "temperature_celsius": "Temperature", "humidity": "Humidity", "humidity_percent": "Humidity", "heartbeat": "Heartbeat", "last_heartbeat": "Last Heartbeat", "noanimals": "No Animals", "create": "Create", "settings": "Setting|Settings", "notifications": "Notification|Notifications", "notification_type": "Notification channel", "details": "Details", "rawlimitlo": "Raw value - lower limit", "rawlimithi": "Raw value - upper limit", "file": "File", "files": "Files", "size": "Size", "current_value": "Current value", "created_at": "Creation", "updated_at": "Last update", "download": "Download", "properties": "Properties", "preview": "Preview", "source": "Source", "target": "Target", "associated_with": "Associated with", "log": "Log", "starts_at": "Starts at", "ends_at": "Ends at", "starts_after": "Starts after", "thresholds": "Thresholds", "abilities": "Ability|Abilities", "bugtracker": "Bugtracker", "wiki": "Wiki", "auto_nightmode": "Auto night mode", "permanent_nightmode": "Permanent night mode", "language": "Language", "belongsTo_type": "Belongs to (type)", "belongsTo_id": "Belongs to (ID)", "belongsTo": "Belongs to", "doku": "Documentation", "step": "Step", "phone_number": "Phone number", "template": "Template", "timezone": "Timezone", "critical": "Critical", "ok": "OK", "running": "Running", "runs_since": "Running since", "queued": "Queued", "criticalstates": "Critical States", "since": "Since", "state": "State", "actions": "Actions", "irrigate": "Irrigate", "duration": "Duration", "on": "On", "off": "Off", "just_fed": "Add feeding", "add_weight": "Add weight", "active": "Aktiv", "copy_thresholds": "Copy thresholds", "daily": "Daily", "last_feeding": "Last feeding", "crickets": "Crickets", "mixed_fruits": "Fruits", "beetle_jelly": "BeetleJelly", "due": "Due", "overdue": "Overdue", "meal_type": "Meal type", "interval_days": "Interval in days", "interval": "Interval", "password": "Password", "action": "Action", "weight": "Weight", "no_data": "No Data", "overview": "Overview", "environment": "Environment", "now": "Now", "scheduled": "Scheduled", "sequence": "Sequence", "weighprogression": "Weight progression", "from": "From", "tO": "To", "feedings": "Feedings", "temp_and_hum_history": "Temperature and Humidity History", "biography": "Biography", "bio_categories": "Biography categories", "icon": "Icon", "average": "Average", "min": "Minimum", "max": "Maximum", "during_day": "Daytime", "during_night": "Nighttime", "total": "Total", "infrastructure": "Infrastructure", "timeframe_start": "Timeframe from", "timeframe_end": "Timeframe to", "reference_value": "Reference value", "reference_value_duration_threshold_minutes": "Reference value undershot\/exceeded for (Minutes)", "for": "for", "minimum_timeout_minutes": "Timeout (minutes)", "emergency_stop": "Emergency stop", "increases": "Increases", "increase": "Increases", "decreases": "Decreases", "decrease": "Decreases", "personal_access_tokens": "Access Tokens", "expires": "Expires", "security": "Security", "general": "General", "component": "Component", "to": "To", "daily_reminders": "Daily Reminders", "yesterday": "Yesterday", "tomorrow": "Tomorrow", "today": "Today", "runonce": "Only run once", "intention": "Intention", "deceased": "Deceased", "software_version": "Software Version", "use_as_background": "Use as background image", "relation_map": "Relation map", "start_action_sequence": "Start Action Sequence", "suggestions": "Suggestions", "suggestions_unit": "Min. Occurences", "suggestion_timeframe_unit": "Timeframe (Unit)", "suggestions_timeframe": "Timeframe", "bus": "Bus", "i2c_address": "I2C address", "i2c_multiplexer_address": "I2C multiplexer address", "i2c_multiplexer_port": "I2C multiplexer port", "gpio_pin": "GPIO pin", "gpio_default_high": "GPIO Default High", "configuration": "Configuration", "yes": "Yes", "no": "No", "rawvalue": "Raw value", "adjust_rawvalue": "Raw value correction", "filter": "Filter", "logout": "Log off", "login": "Log in", "ask_me_something": "Ask me something", "ventilate": "Ventilate", "heat_up": "Heat", "cool_down": "Cool", "between": "between", "and": "and", "association": "Association", "choose_logfile": "Choose a log file", "no_image": "No image", "features": "Features", "rollperiod": "Roll period", "add_preset": "Add preset" }, "languages": { "german": "German", "english": "English" }, "menu": { "welcome": "Welcome", "dashboard": "Dashboard", "general": "General", "administration": "Administration", "create": "Create", "edit": "Edit", "delete": "Delete", "infrastructure": "Infrastructure", "help": "Help", "logout": "Log out", "animals": "Animals", "terraria": "Terraria", "users": "Users", "animal_feeding_types": "Food types", "logs": "Logs", "categories": "Categories", "monitoring": "Monitoring", "automation": "Automation", "ciliatus_logs": "Ciliatus Logs", "system_logs": "System Logs", "system_status": "System Status" }, "messages": { "logical_sensor_thresholds": { "copy_warning": "All existing thresholds associated with the target sensor will be deleted." }, "users": { "setup_telegram_ok": "Telegram is set up.", "setup_telegram_err": "Telegram has not yet been set up.", "setup_telegram_description": "Please point your browser to <a href=\"https:\/\/web.telegram.org\/#\/im?p=@\">Telegram Web<\/a> or use your smartphone to contact <b>@<\/b> with your verification code below." }, "critical_state_generic": "Critical: {critical}_state", "critical_state_notification_logical_sensor": { "humidity_percent": "Critical: The sensor {logical}_sensor reports a humidity of {humidity}_percent%C.", "temperature_celsius": "Critical: The sensor {logical}_sensor reports a temperature of {temperature}_celsius\xB0C." }, "critical_state_recovery_notification_logical_sensor": { "humidity_percent": "OK: The sensor {logical}_sensor reports a humidity of {humidity}_percent%C.", "temperature_celsius": "OK: The sensor {logical}_sensor reports a temperature of {temperature}_celsius\xB0C." }, "critical_state_notification_controlunit": "Critical: The controlunit {controlunit} is not sending data.", "critical_state_recovery_notification_controlunit": "OK: The controlunit {controlunit} ist sending data again.", "daily": { "intro": "Daily reminders", "feedings_due": "Feedings due:", "weighings_due": "Weighings due:" }, "own_token_expires": "Token '{name}' expires in {days} days.", "suggestions": { "humidity_percent": "Daily irrigation action sequence at {hour} o'clock." } }, "product": { "name": "ciliatus" }, "setup": { "welcome": "Welcome to Ciliatus", "create_user": "Create your user", "done": "Done!", "what_now": "What now?", "login": "Log in", "tooltip_login": "Log in to Ciliatus with the user you just created.", "add_terrarium": "Create Terrarium", "tooltip_add_terrarium": "Create your first terrarium in Ciliatus.", "add_animal": "Create animal", "tooltip_add_animal": "Create your first animal and assign it to a terrarium.", "setup_telegram": "Setup Telegram", "tooltip_setup_telegram": "Learn how to configure Telegram with Ciliatus.", "setup_controlunit": "Create Controlunit", "tooltip_setup_controlunit": "Learn how to setup a controlunit to start feeding Ciliatus with sensor readings.", "err_completed": "Setup is already completed." }, "tooltips": { "ctrltoselect": "Ctrl-click to deselect", "active": "Active", "showondefaultdashboard": "Show on default dashboard", "autoirrigation": "Automatic irrigation (if available)", "sendnotificationsfor": "Send notifications for", "loadandrendergraph": "Collection data and rendering graph", "disables_option": "Disables \"{option}\"", "phone_number": "Mobile number", "contact_bot": "Contacting the bot", "wait_confirmation": "Waiting for confirmation", "set_state_to": "Set state of <b>{target}<\/b> to <b>{state}<\/b> for <b>{minutes} minutes<\/b>", "start_after_started": "Starts as soon as step <b>{id}<\/b> was started", "start_after_finished": "Starts as soon as step <b>{id}<\/b> finished", "sendnotifications": "Send notifications", "no_schedules": "No schedules", "runonce": "Run once", "heartbeat_critical": "Heartbeat is critical!", "copy_thresholds_warning": "All existing thresholds on the target sensor will be removed.", "animal_feeding_schedule_matrix": "This matrix contains all defined feeding schedules. A number in a column represents the schedule's interval in days.", "animal_weighing_schedule_matrix": "This matrix contains all defined weighing schedules. A number in a column represents the schedule's interval in days followed by the next due date.", "done": "Done", "skip": "Skip", "material_icons_list": "Visit <a href=\"https:\/\/material.io\/icons\/\">material.io<\/a> for a complete icon overview.", "no_data": "No data.", "connecting_to_server": "Connecting to Ciliatus Server. If this takes longer then a few seconds please check your internet connection.", "generic_components": { "about": "Generic components are components of a user defined type.", "type_about": "Generic component types define name, properties and possible states of a generic component. They are used as a template when creating a new generic component.", "property_templates": "Define properties for this generic component type. Each time you create a new component of this type you will be prompted to fill in these properties.", "state_templates": "Define possible states for a component of this type. When creating an action sequence you can chose a state from this list as a desired state.<br \/><br \/>The radio box on the left defines the default 'running' state.", "type_delete_warning": "When deleting a component type <strong>all components of this type<\/strong> will also be deleted.", "intentions": "Intentionen of generic components allows them to be automatically used within action sequences." }, "minimum_timeout_minutes": "Defines the minimum timeout before the action sequence can be started by this trigger after the last time it was triggered.", "reference_value": "Reference value which will be compared to the sensor values.", "reference_value_duration_threshold_minutes": "Duration in minutes for which the sensor value has to be greater\/lower\/equal to the reference value before triggering the action sequence.", "emergency_stop": "Instantly stops all running action sequences and prohibits action sequences from starting.", "emergency_resume": "Revokes the emergency stop and allows action sequences to start.", "leave_empty_for_auto": "Leave empty for automatic", "intention_increase_decrease": "Defines whether the intention of this action sequence is to increase or decrease the sensor's readings", "suggestions_unit": "Minimum number of critical states within the timeframe before a suggestion should be generated.", "suggestion_timeframe_unit": "Timeframe used for analysis (Unit)", "suggestions_timeframe": "Timeframe used for analysis (Value)", "show_suggestions": "Show suggestions", "bus_type_edit_form": "Allows Ciliatus to automatically generate controlunit configurations.", "gpio_default_high": "GPIO Pin will be pulled to high. When activating a component to low.", "adjust_rawvalue": "When receiving a reading from this sensor you can adjust the raw value.", "experimental_feature": "This is an experimental feature.", "action_sequence_schedules": { "skip": "Skip today's run." }, "associate_new": "Associate <i class=\"material-icons\">{source}_icon<\/i> {source}_type \"{source}_name\" with <i class=\"material-icons\">{target}_icon<\/i> {target}_type", "floating": { "add": "New", "edit": "Edit", "delete": "Delete" }, "ciliatus_up_to_date": "Up to date", "ciliatus_not_up_to_date": "Update available: <a href=\"{url}\">GitHub<\/a>", "no_feeding_types": "There are no food types defined yet." }, "units": { "years": "year|years", "months": "month|months", "days": "day|days", "hours": "hour|hours", "minutes": "minute|minutes", "seconds": "second|seconds", "temperature_celsius": "\xB0C", "humidity_percent": "%", "years_ago": "{val} years ago", "months_ago": "{val} months ago", "weeks_ago": "{val} weeks ago", "days_ago": "{val} days ago", "hours_ago": "{val} hours ago", "minutes_ago": "{val} minutes ago", "years_in": "in {val} years", "months_in": "in {val} months", "weeks_in": "in {val} weeks", "days_in": "in {val} days", "hours_in": "in {val} hours", "minutes_in": "in {val} minutes", "just_now": "just now", "lesser": "<", "greater": ">", "equals": "=", "no_data": "" } } };

/***/ }),
/* 54 */,
/* 55 */,
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*!
 * vue-i18n v7.0.0 
 * (c) 2017 kazuya kawaguchi
 * Released under the MIT License.
 */
/*  */

/**
 * utilites
 */

function warn (msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.warn(err.stack);
    }
  }
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

var toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return toString.call(obj) === OBJECT_STRING
}

function isNull (val) {
  return val === null || val === undefined
}

function parseArgs () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var locale = null;
  var params = null;
  if (args.length === 1) {
    if (isObject(args[0]) || Array.isArray(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */
    if (isObject(args[1]) || Array.isArray(args[1])) {
      params = args[1];
    }
  }

  return { locale: locale, params: params }
}

function getOldChoiceIndexFixed (choice) {
  return choice
    ? choice > 1
      ? 1
      : 0
    : 1
}

function getChoiceIndex (choice, choicesLength) {
  choice = Math.abs(choice);

  if (choicesLength === 2) { return getOldChoiceIndexFixed(choice) }

  return choice ? Math.min(choice, 2) : 0
}

function fetchChoice (message, choice) {
  /* istanbul ignore if */
  if (!message && typeof message !== 'string') { return null }
  var choices = message.split('|');

  choice = getChoiceIndex(choice, choices.length);
  if (!choices[choice]) { return message }
  return choices[choice].trim()
}

function looseClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

var canUseDateTimeFormat =
  typeof Intl !== 'undefined' && typeof Intl.DateTimeFormat !== 'undefined';

var canUseNumberFormat =
  typeof Intl !== 'undefined' && typeof Intl.NumberFormat !== 'undefined';

/*  */

function extend (Vue) {
  Vue.prototype.$t = function (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this ].concat( values ))
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this, choice ].concat( values ))
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale)
  };

  Vue.prototype.$d = function (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    return (ref = this.$i18n).d.apply(ref, [ value ].concat( args ))
    var ref;
  };

  Vue.prototype.$n = function (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    return (ref = this.$i18n).n.apply(ref, [ value ].concat( args ))
    var ref;
  };
}

/*  */

var mixin = {
  beforeCreate: function beforeCreate () {
    var this$1 = this;

    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        this._i18n = options.i18n;
        this._i18nWatcher = this._i18n.watchI18nData(function () { return this$1.$forceUpdate(); });
      } else if (isPlainObject(options.i18n)) {
        // component local i18n
        if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
          options.i18n.root = this.$root.$i18n;
          options.i18n.silentTranslationWarn = this.$root.$i18n.silentTranslationWarn;
        }

        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            options.i18n.messages = JSON.parse(options.__i18n);
          } catch (e) {
            if (true) {
              warn("Cannot parse locale messages via custom blocks.");
            }
          }
        }

        this._i18n = new VueI18n(options.i18n);
        this._i18nWatcher = this._i18n.watchI18nData(function () { return this$1.$forceUpdate(); });

        if (options.i18n.sync === undefined || !!options.i18n.sync) {
          this._localeWatcher = this.$i18n.watchLocale(function () { return this$1.$forceUpdate(); });
        }
      } else {
        if (true) {
          warn("Cannot be interpreted 'i18n' option.");
        }
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      // root i18n
      this._i18n = this.$root.$i18n;
      this._i18nWatcher = this._i18n.watchI18nData(function () { return this$1.$forceUpdate(); });
    }
  },

  beforeDestroy: function beforeDestroy () {
    if (!this._i18n) { return }

    if (this._i18nWatcher) {
      this._i18nWatcher();
      delete this._i18nWatcher;
    }

    if (this._localeWatcher) {
      this._localeWatcher();
      delete this._localeWatcher;
    }

    this._i18n = null;
  }
};

/*  */

var component = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: String,
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    }
  },
  render: function render (h, ref) {
    var props = ref.props;
    var data = ref.data;
    var children = ref.children;
    var parent = ref.parent;

    var i18n = parent.$i18n;
    if (!i18n) {
      if (true) {
        warn('Cannot find VueI18n instance!');
      }
      return children
    }

    var path = props.path;
    var locale = props.locale;

    var params = [];
    locale && params.push(locale);
    children.forEach(function (child) { return params.push(child); });

    return h(props.tag, data, i18n.i.apply(i18n, [ path ].concat( params )))
  }
};

var Vue;

function install (_Vue) {
  Vue = _Vue;

  var version = (Vue.version && Number(Vue.version.split('.')[0])) || -1;
  /* istanbul ignore if */
  if ("development" !== 'production' && install.installed) {
    warn('already installed.');
    return
  }
  install.installed = true;

  /* istanbul ignore if */
  if ("development" !== 'production' && version < 2) {
    warn(("vue-i18n (" + (install.version) + ") need to use Vue 2.0 or later (Vue: " + (Vue.version) + ")."));
    return
  }

  Object.defineProperty(Vue.prototype, '$i18n', {
    get: function get () { return this._i18n }
  });

  extend(Vue);
  Vue.mixin(mixin);
  Vue.component(component.name, component);

  // use object-based merge strategy
  var strats = Vue.config.optionMergeStrategies;
  strats.i18n = strats.methods;
}

/*  */

var BaseFormatter = function BaseFormatter () {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate (message, values) {
  var tokens = this._caches[message];
  if (!tokens) {
    tokens = parse(message);
    this._caches[message] = tokens;
  }
  return compile(tokens, values)
};

var RE_TOKEN_LIST_VALUE = /^(\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(\w)+/;

function parse (format) {
  var tokens = [];
  var position = 0;

  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === '{') {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }

      text = '';
      var sub = '';
      char = format[position++];
      while (char !== '}') {
        sub += char;
        char = format[position++];
      }

      var type = RE_TOKEN_LIST_VALUE.test(sub)
        ? 'list'
        : RE_TOKEN_NAMED_VALUE.test(sub)
          ? 'named'
          : 'unknown';
      tokens.push({ value: sub, type: type });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
    } else {
      text += char;
    }
  }

  text && tokens.push({ type: 'text', value: text });

  return tokens
}

function compile (tokens, values) {
  var compiled = [];
  var index = 0;

  var mode = Array.isArray(values)
    ? 'list'
    : isObject(values)
      ? 'named'
      : 'unknown';
  if (mode === 'unknown') { return compiled }

  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break
      case 'list':
        if (mode === 'list') {
          compiled.push(values[parseInt(token.value, 10)]);
        } else {
          if (true) {
            warn(("Type of token '" + (token.type) + "' and format of value '" + mode + "' don't match!"));
          }
        }
        break
      case 'named':
        if (mode === 'named') {
          compiled.push((values)[token.value]);
        } else {
          if (true) {
            warn(("Type of token '" + (token.type) + "' and format of value '" + mode + "' don't match!"));
          }
        }
        break
      case 'unknown':
        if (true) {
          warn("Detect 'unknown' type of token!");
        }
        break
    }
    index++;
  }

  return compiled
}

/*  */

/**
 *  Path paerser
 *  - Inspired:
 *    Vue.js Path parser
 */

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral (exp) {
  return literalValueRE.test(exp)
}

/**
 * Strip quotes from a string
 */

function stripQuotes (str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27)
    ? str.slice(1, -1)
    : str
}

/**
 * Determine the type of a character in a keypath.
 */

function getPathCharType (ch) {
  if (ch === undefined || ch === null) { return 'eof' }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
    case 0x30: // 0
      return ch

    case 0x5F: // _
    case 0x24: // $
    case 0x2D: // -
      return 'ident'

    case 0x20: // Space
    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0:  // No-break space
    case 0xFEFF:  // Byte Order Mark
    case 0x2028:  // Line Separator
    case 0x2029:  // Paragraph Separator
      return 'ws'
  }

  // a-z, A-Z
  if ((code >= 0x61 && code <= 0x7A) || (code >= 0x41 && code <= 0x5A)) {
    return 'ident'
  }

  // 1-9
  if (code >= 0x31 && code <= 0x39) { return 'number' }

  return 'else'
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */

function formatSubPath (path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) { return false }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed
}

/**
 * Parse a string path into an array of segments
 */

function parse$1 (path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      key = formatSubPath(key);
      if (key === false) {
        return false
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote () {
    var nextChar = path[index + 1];
    if ((mode === IN_SINGLE_QUOTE && nextChar === "'") ||
      (mode === IN_DOUBLE_QUOTE && nextChar === '"')) {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined
        ? c
        : newChar;
      if (action() === false) {
        return
      }
    }

    if (mode === AFTER_PATH) {
      return keys
    }
  }
}





function empty (target) {
  /* istanbul ignore else */
  if (Array.isArray(target)) {
    return target.length === 0
  } else {
    return false
  }
}

var I18nPath = function I18nPath () {
  this._cache = Object.create(null);
};

/**
 * External parse that check for a cache hit first
 */
I18nPath.prototype.parsePath = function parsePath (path) {
  var hit = this._cache[path];
  if (!hit) {
    hit = parse$1(path);
    if (hit) {
      this._cache[path] = hit;
    }
  }
  return hit || []
};

/**
 * Get path value from path string
 */
I18nPath.prototype.getPathValue = function getPathValue (obj, path) {
  if (!isObject(obj)) { return null }

  var paths = this.parsePath(path);
  if (empty(paths)) {
    return null
  } else {
    var length = paths.length;
    var ret = null;
    var last = obj;
    var i = 0;
    while (i < length) {
      var value = last[paths[i]];
      if (value === undefined) {
        last = null;
        break
      }
      last = value;
      i++;
    }

    ret = last;
    return ret
  }
};

/*  */

var VueI18n = function VueI18n (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || {};
  var numberFormats = options.numberFormats || {};

  this._vm = null;
  this._formatter = options.formatter || new BaseFormatter();
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined
    ? true
    : !!options.fallbackRoot;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined
    ? false
    : !!options.silentTranslationWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();

  this._exist = function (message, key) {
    if (!message || !key) { return false }
    return !isNull(this$1._path.getPathValue(message, key))
  };

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var prototypeAccessors = { vm: {},messages: {},dateTimeFormats: {},numberFormats: {},locale: {},fallbackLocale: {},missing: {},formatter: {},silentTranslationWarn: {} };

VueI18n.prototype._initVM = function _initVM (data) {
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  this._vm = new Vue({ data: data });
  Vue.config.silent = silent;
};

VueI18n.prototype.watchI18nData = function watchI18nData (fn) {
  return this._vm.$watch('$data', function () {
    fn && fn();
  }, { deep: true })
};

VueI18n.prototype.watchLocale = function watchLocale (fn) {
  /* istanbul ignore if */
  if (!this._sync || !this._root) { return null }
  var target = this._vm;
  return this._root.vm.$watch('locale', function (val) {
    target.$set(target, 'locale', val);
    fn && fn();
  }, { immediate: true })
};

prototypeAccessors.vm.get = function () { return this._vm };

prototypeAccessors.messages.get = function () { return looseClone(this._getMessages()) };
prototypeAccessors.dateTimeFormats.get = function () { return looseClone(this._getDateTimeFormats()) };
prototypeAccessors.numberFormats.get = function () { return looseClone(this._getNumberFormats()) };

prototypeAccessors.locale.get = function () { return this._vm.locale };
prototypeAccessors.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

prototypeAccessors.fallbackLocale.get = function () { return this._vm.fallbackLocale };
prototypeAccessors.fallbackLocale.set = function (locale) {
  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

prototypeAccessors.missing.get = function () { return this._missing };
prototypeAccessors.missing.set = function (handler) { this._missing = handler; };

prototypeAccessors.formatter.get = function () { return this._formatter };
prototypeAccessors.formatter.set = function (formatter) { this._formatter = formatter; };

prototypeAccessors.silentTranslationWarn.get = function () { return this._silentTranslationWarn };
prototypeAccessors.silentTranslationWarn.set = function (silent) { this._silentTranslationWarn = silent; };

VueI18n.prototype._getMessages = function _getMessages () { return this._vm.messages };
VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats () { return this._vm.dateTimeFormats };
VueI18n.prototype._getNumberFormats = function _getNumberFormats () { return this._vm.numberFormats };

VueI18n.prototype._warnDefault = function _warnDefault (locale, key, result, vm) {
  if (!isNull(result)) { return result }
  if (this.missing) {
    this.missing.apply(null, [locale, key, vm]);
  } else {
    if ("development" !== 'production' && !this._silentTranslationWarn) {
      warn(
        "Cannot translate the value of keypath '" + key + "'. " +
        'Use the value of keypath as default.'
      );
    }
  }
  return key
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot (val) {
  return !val && !isNull(this._root) && this._fallbackRoot
};

VueI18n.prototype._interpolate = function _interpolate (
  message,
  key,
  interpolateMode,
  values
) {
    var this$1 = this;

  if (!message) { return null }

  var pathRet = this._path.getPathValue(message, key);
  if (Array.isArray(pathRet)) { return pathRet }

  var ret;
  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject(message)) {
      ret = message[key];
      if (typeof ret !== 'string') {
        if ("development" !== 'production' && !this._silentTranslationWarn) {
          warn(("Value of key '" + key + "' is not a string!"));
        }
        return null
      }
    } else {
      return null
    }
  } else {
    /* istanbul ignore else */
    if (typeof pathRet === 'string') {
      ret = pathRet;
    } else {
      if ("development" !== 'production' && !this._silentTranslationWarn) {
        warn(("Value of key '" + key + "' is not a string!"));
      }
      return null
    }
  }

  // Check for the existance of links within the translated string
  if (ret.indexOf('@:') >= 0) {
    // Match all the links within the local
    // We are going to replace each of
    // them with its translation
    var matches = ret.match(/(@:[\w|.]+)/g);
    for (var idx in matches) {
      var link = matches[idx];
      // Remove the leading @:
      var linkPlaceholder = link.substr(2);
      // Translate the link
      var translated = this$1._interpolate(message, linkPlaceholder, interpolateMode, values);
      if (interpolateMode === 'raw') {
        return translated
      }
      // Replace the link with the translated
      ret = ret.replace(link, translated);
    }
  }

  return !values ? ret : this._render(ret, interpolateMode, values)
};

VueI18n.prototype._render = function _render (message, interpolateMode, values) {
  var ret = this._formatter.interpolate(message, values);
  // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter
  return interpolateMode === 'string' ? ret.join('') : ret
};

VueI18n.prototype._translate = function _translate (
  messages,
  locale,
  fallback,
  key,
  interpolateMode,
  args
) {
  var res = this._interpolate(messages[locale], key, interpolateMode, args);
  if (!isNull(res)) { return res }

  res = this._interpolate(messages[fallback], key, args);
  if (!isNull(res)) {
    if ("development" !== 'production' && !this._silentTranslationWarn) {
      warn(("Fall back to translate the keypath '" + key + "' with '" + fallback + "' locale."));
    }
    return res
  } else {
    return null
  }
};

VueI18n.prototype._t = function _t (key, _locale, messages, host) {
    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];

  if (!key) { return '' }

  var parsedArgs = parseArgs.apply(void 0, values);
  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(messages, locale, this.fallbackLocale, key, 'string', parsedArgs.params);
  if (this._isFallbackRoot(ret)) {
    if ("development" !== 'production' && !this._silentTranslationWarn) {
      warn(("Fall back to translate the keypath '" + key + "' with root locale."));
    }
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).t.apply(ref, [ key ].concat( values ))
  } else {
    return this._warnDefault(locale, key, ret, host)
  }
    var ref;
};

VueI18n.prototype.t = function t (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

  return (ref = this)._t.apply(ref, [ key, this.locale, this._getMessages(), null ].concat( values ))
    var ref;
};

VueI18n.prototype._i = function _i (key, locale, messages, host) {
    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];

    var ret =
    this._translate(messages, locale, this.fallbackLocale, key, 'raw', values);
  if (this._isFallbackRoot(ret)) {
    if ("development" !== 'production' && !this._silentTranslationWarn) {
      warn(("Fall back to interpolate the keypath '" + key + "' with root locale."));
    }
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).i.apply(ref, [ key ].concat( values ))
  } else {
    return this._warnDefault(locale, key, ret, host)
  }
    var ref;
};

VueI18n.prototype.i = function i (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

  /* istanbul ignore if */
  if (!key) { return '' }

  var locale = this.locale;
  var index = 0;
  if (typeof values[0] === 'string') {
    locale = values[0];
    index = 1;
  }

  var params = [];
  for (var i = index; i < values.length; i++) {
    params.push(values[i]);
  }

  return (ref = this)._i.apply(ref, [ key, locale, this._getMessages(), null ].concat( params ))
    var ref;
};

VueI18n.prototype._tc = function _tc (
  key,
  _locale,
  messages,
  host,
  choice
) {
    var values = [], len = arguments.length - 5;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 5 ];

  if (!key) { return '' }
  if (choice === undefined) {
    choice = 1;
  }
  return fetchChoice((ref = this)._t.apply(ref, [ key, _locale, messages, host ].concat( values )), choice)
    var ref;
};

VueI18n.prototype.tc = function tc (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

  return (ref = this)._tc.apply(ref, [ key, this.locale, this._getMessages(), null, choice ].concat( values ))
    var ref;
};

VueI18n.prototype._te = function _te (key, locale, messages) {
    var args = [], len = arguments.length - 3;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

  var _locale = parseArgs.apply(void 0, args).locale || locale;
  return this._exist(messages[_locale], key)
};

VueI18n.prototype.te = function te (key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale)
  };

  VueI18n.prototype.getLocaleMessage = function getLocaleMessage (locale) {
  return looseClone(this._vm.messages[locale])
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage (locale, message) {
  this._vm.messages[locale] = message;
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage (locale, message) {
  this._vm.messages[locale] = Vue.util.extend(this.getLocaleMessage(locale), message);
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat (locale) {
  return looseClone(this._vm.dateTimeFormats[locale])
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat (locale, format) {
  this._vm.dateTimeFormats[locale] = format;
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat (locale, format) {
  this._vm.dateTimeFormats[locale] = Vue.util.extend(this.getDateTimeFormat(locale), format);
};

VueI18n.prototype._d = function _d (value, _locale, key) {
  /* istanbul ignore if */
  if ("development" !== 'production' && !VueI18n.availabilities.dateTimeFormat) {
    warn('Cannot format a Date value due to not support Intl.DateTimeFormat.');
    return ''
  }

  var ret = '';
  var dateTimeFormats = this._getDateTimeFormats();
  if (key) {
    var locale = _locale;
    if (isNull(dateTimeFormats[_locale][key])) {
      if ("development" !== 'production' && !this._silentTranslationWarn) {
        warn(("Fall back to the dateTimeFormat of key '" + key + "' with '" + (this.fallbackLocale) + "' locale."));
      }
      locale = this.fallbackLocale;
    }
    var id = locale + "__" + key;
    var formatter = this._dateTimeFormatters[id];
    var format = dateTimeFormats[locale][key];
    if (!formatter) {
      formatter = this._dateTimeFormatters[id] = Intl.DateTimeFormat(locale, format);
    }
    ret = formatter.format(value);
  } else {
    ret = Intl.DateTimeFormat(_locale).format(value);
  }

  return ret
};

VueI18n.prototype.d = function d (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (typeof args[0] === 'string') {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      key = args[0];
    }
    if (typeof args[1] === 'string') {
      locale = args[1];
    }
  }

  return this._d(value, locale, key)
};

VueI18n.prototype.getNumberFormat = function getNumberFormat (locale) {
  return looseClone(this._vm.numberFormats[locale])
};

VueI18n.prototype.setNumberFormat = function setNumberFormat (locale, format) {
  this._vm.numberFormats[locale] = format;
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat (locale, format) {
  this._vm.numberFormats[locale] = Vue.util.extend(this.getNumberFormat(locale), format);
};

VueI18n.prototype._n = function _n (value, _locale, key) {
  /* istanbul ignore if */
  if ("development" !== 'production' && !VueI18n.availabilities.numberFormat) {
    warn('Cannot format a Date value due to not support Intl.NumberFormat.');
    return ''
  }

  var ret = '';
  var numberFormats = this._getNumberFormats();
  if (key) {
    var locale = _locale;
    if (isNull(numberFormats[_locale][key])) {
      if ("development" !== 'production' && !this._silentTranslationWarn) {
        warn(("Fall back to the numberFormat of key '" + key + "' with '" + (this.fallbackLocale) + "' locale."));
      }
      locale = this.fallbackLocale;
    }
    var id = locale + "__" + key;
    var formatter = this._numberFormatters[id];
    var format = numberFormats[locale][key];
    if (!formatter) {
      formatter = this._numberFormatters[id] = Intl.NumberFormat(locale, format);
    }
    ret = formatter.format(value);
  } else {
    ret = Intl.NumberFormat(_locale).format(value);
  }

  return ret
};

VueI18n.prototype.n = function n (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (typeof args[0] === 'string') {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
        }
        if (args[0].key) {
        key = args[0].key;
      }
      }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      key = args[0];
    }
    if (typeof args[1] === 'string') {
      locale = args[1];
    }
  }

  return this._n(value, locale, key)
};

Object.defineProperties( VueI18n.prototype, prototypeAccessors );

VueI18n.availabilities = {
  dateTimeFormat: canUseDateTimeFormat,
  numberFormat: canUseNumberFormat
};
VueI18n.install = install;
VueI18n.version = '7.0.0';

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(VueI18n);
}

/* harmony default export */ __webpack_exports__["a"] = (VueI18n);


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(11),
  /* template */
  __webpack_require__(129),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\action_sequence_schedule-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] action_sequence_schedule-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-91b9b8bc", Component.options)
  } else {
    hotAPI.reload("data-v-91b9b8bc", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(12),
  /* template */
  __webpack_require__(124),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\action_sequences-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] action_sequences-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-779a643c", Component.options)
  } else {
    hotAPI.reload("data-v-779a643c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(13),
  /* template */
  __webpack_require__(97),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\action_sequences-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] action_sequences-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-02aa2605", Component.options)
  } else {
    hotAPI.reload("data-v-02aa2605", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(14),
  /* template */
  __webpack_require__(111),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_feeding_schedules-matrix-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_feeding_schedules-matrix-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-4412c114", Component.options)
  } else {
    hotAPI.reload("data-v-4412c114", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(15),
  /* template */
  __webpack_require__(126),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_feeding_schedules-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_feeding_schedules-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-82c4c0a0", Component.options)
  } else {
    hotAPI.reload("data-v-82c4c0a0", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(16),
  /* template */
  __webpack_require__(134),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_feedings-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_feedings-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-cd3f709c", Component.options)
  } else {
    hotAPI.reload("data-v-cd3f709c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(17),
  /* template */
  __webpack_require__(108),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_weighing_schedules-matrix-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_weighing_schedules-matrix-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-391af5f4", Component.options)
  } else {
    hotAPI.reload("data-v-391af5f4", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(18),
  /* template */
  __webpack_require__(117),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_weighing_schedules-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_weighing_schedules-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5fc487fe", Component.options)
  } else {
    hotAPI.reload("data-v-5fc487fe", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(19),
  /* template */
  __webpack_require__(125),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animal_weighings-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animal_weighings-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7a4ba0b8", Component.options)
  } else {
    hotAPI.reload("data-v-7a4ba0b8", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(20),
  /* template */
  __webpack_require__(135),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\animals-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] animals-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-d9003c26", Component.options)
  } else {
    hotAPI.reload("data-v-d9003c26", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(21),
  /* template */
  __webpack_require__(100),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\api-io-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] api-io-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-1a23c295", Component.options)
  } else {
    hotAPI.reload("data-v-1a23c295", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(22),
  /* template */
  __webpack_require__(123),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\biography_entries-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] biography_entries-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7695a880", Component.options)
  } else {
    hotAPI.reload("data-v-7695a880", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(23),
  /* template */
  __webpack_require__(109),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\bus_type_edit-form.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] bus_type_edit-form.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-40caa194", Component.options)
  } else {
    hotAPI.reload("data-v-40caa194", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(24),
  /* template */
  __webpack_require__(98),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\caresheets-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] caresheets-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-05618d09", Component.options)
  } else {
    hotAPI.reload("data-v-05618d09", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(25),
  /* template */
  __webpack_require__(113),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\chartjs-graph.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] chartjs-graph.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-4dca3765", Component.options)
  } else {
    hotAPI.reload("data-v-4dca3765", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(26),
  /* template */
  __webpack_require__(136),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\components-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] components-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-dddd1da2", Component.options)
  } else {
    hotAPI.reload("data-v-dddd1da2", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(27),
  /* template */
  __webpack_require__(114),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\controlunit-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] controlunit-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5035607a", Component.options)
  } else {
    hotAPI.reload("data-v-5035607a", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(28),
  /* template */
  __webpack_require__(102),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\controlunits-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] controlunits-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-218170ea", Component.options)
  } else {
    hotAPI.reload("data-v-218170ea", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(29),
  /* template */
  __webpack_require__(138),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\dashboard-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] dashboard-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-fc69bb20", Component.options)
  } else {
    hotAPI.reload("data-v-fc69bb20", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(30),
  /* template */
  __webpack_require__(120),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\dygraph-graph.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] dygraph-graph.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6e35f5d2", Component.options)
  } else {
    hotAPI.reload("data-v-6e35f5d2", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(31),
  /* template */
  __webpack_require__(131),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\files-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] files-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-a1773e8c", Component.options)
  } else {
    hotAPI.reload("data-v-a1773e8c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(32),
  /* template */
  __webpack_require__(132),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\files-show-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] files-show-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c121560a", Component.options)
  } else {
    hotAPI.reload("data-v-c121560a", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(33),
  /* template */
  __webpack_require__(122),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\files-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] files-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-736e2c2d", Component.options)
  } else {
    hotAPI.reload("data-v-736e2c2d", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(34),
  /* template */
  __webpack_require__(107),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\generic_component_type_create-form.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] generic_component_type_create-form.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-34c7c76d", Component.options)
  } else {
    hotAPI.reload("data-v-34c7c76d", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(35),
  /* template */
  __webpack_require__(130),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\generic_components-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] generic_components-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-9bc6f4d2", Component.options)
  } else {
    hotAPI.reload("data-v-9bc6f4d2", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(36),
  /* template */
  __webpack_require__(105),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\generic_components-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] generic_components-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-28dfb130", Component.options)
  } else {
    hotAPI.reload("data-v-28dfb130", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(37),
  /* template */
  __webpack_require__(99),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\google-graph.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] google-graph.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0c333a8d", Component.options)
  } else {
    hotAPI.reload("data-v-0c333a8d", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(40),
  /* template */
  __webpack_require__(110),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\logical_sensors-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] logical_sensors-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-40cf11c6", Component.options)
  } else {
    hotAPI.reload("data-v-40cf11c6", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(41),
  /* template */
  __webpack_require__(106),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\logical_sensors-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] logical_sensors-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2a37f8be", Component.options)
  } else {
    hotAPI.reload("data-v-2a37f8be", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(42),
  /* template */
  __webpack_require__(137),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\logs-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] logs-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-e6784bc2", Component.options)
  } else {
    hotAPI.reload("data-v-e6784bc2", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(43),
  /* template */
  __webpack_require__(104),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\physical_sensors-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] physical_sensors-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2407172c", Component.options)
  } else {
    hotAPI.reload("data-v-2407172c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(44),
  /* template */
  __webpack_require__(103),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\physical_sensors-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] physical_sensors-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-22848a7d", Component.options)
  } else {
    hotAPI.reload("data-v-22848a7d", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(45),
  /* template */
  __webpack_require__(112),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\pumps-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] pumps-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-48c31d4e", Component.options)
  } else {
    hotAPI.reload("data-v-48c31d4e", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(46),
  /* template */
  __webpack_require__(133),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\pumps-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] pumps-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-ca2e39ce", Component.options)
  } else {
    hotAPI.reload("data-v-ca2e39ce", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(47),
  /* template */
  __webpack_require__(118),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\system-indicator.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] system-indicator.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-61fa9e78", Component.options)
  } else {
    hotAPI.reload("data-v-61fa9e78", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(48),
  /* template */
  __webpack_require__(127),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\terraria-overview-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] terraria-overview-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-830273d0", Component.options)
  } else {
    hotAPI.reload("data-v-830273d0", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(49),
  /* template */
  __webpack_require__(115),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\terraria-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] terraria-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-52858374", Component.options)
  } else {
    hotAPI.reload("data-v-52858374", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(50),
  /* template */
  __webpack_require__(101),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\users-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] users-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-1d2323fc", Component.options)
  } else {
    hotAPI.reload("data-v-1d2323fc", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(51),
  /* template */
  __webpack_require__(121),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\valves-list-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] valves-list-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-72f1ca7c", Component.options)
  } else {
    hotAPI.reload("data-v-72f1ca7c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(0)(
  /* script */
  __webpack_require__(52),
  /* template */
  __webpack_require__(116),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\laragon\\www\\dev-01.ciliatus.io\\resources\\assets\\js\\vue\\valves-widget.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] valves-widget.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5b12312b", Component.options)
  } else {
    hotAPI.reload("data-v-5b12312b", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("playlist_play")]), _vm._v("\n        " + _vm._s(_vm.action_sequences.length) + " " + _vm._s(_vm.$tc("components.action_sequences", 2)) + "\n    ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.action_sequences", 2)))]), _vm._v(" "), _c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("more_vert")])]), _vm._v(" "), _vm._l((_vm.action_sequences), function(as) {
    return _c('div', [_c('p', [_c('a', {
      attrs: {
        "href": '/action_sequences/' + as.id + '/edit'
      }
    }, [_c('strong', [_vm._v(_vm._s(as.name))])])]), _vm._v(" "), _vm._l((as.intentions), function(asi) {
      return _c('p', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("explore")]), _vm._v(" "), (asi.intention === 'increase') ? _c('span', [_vm._v(_vm._s(_vm.$t('labels.increases')))]) : _vm._e(), _vm._v(" "), (asi.intention === 'decrease') ? _c('span', [_vm._v(_vm._s(_vm.$t('labels.decreases')))]) : _vm._e(), _vm._v("\n\n                " + _vm._s(_vm.$t('labels.' + asi.type)) + "\n\n                "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (asi.states.running),
          expression: "asi.states.running"
        }]
      }, [_c('span', {
        staticClass: "new badge",
        attrs: {
          "data-badge-caption": _vm.$t('labels.active')
        }
      })])])
    }), _vm._v(" "), _vm._l((as.triggers), function(ast) {
      return _c('p', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("flare")]), _vm._v(" " + _vm._s(ast.logical_sensor.name) + " " + _vm._s(_vm.$t('units.' + ast.reference_value_comparison_type)) + " " + _vm._s(ast.reference_value) + "\n                "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (ast.states.running),
          expression: "ast.states.running"
        }]
      }, [_c('span', {
        staticClass: "new badge",
        attrs: {
          "data-badge-caption": _vm.$t('labels.active')
        }
      })])])
    }), _vm._v(" "), _vm._l((as.schedules), function(ass) {
      return _c('p', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("schedule")]), _vm._v(" " + _vm._s(ass.timestamps.starts) + " "), _c('i', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (!ass.runonce),
          expression: "!ass.runonce"
        }]
      }, [_vm._v(_vm._s(_vm.$t("labels.daily")))]), _vm._v(" "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (ass.states.running),
          expression: "ass.states.running"
        }]
      }, [_c('span', {
        staticClass: "new badge",
        attrs: {
          "data-badge-caption": _vm.$t('labels.active')
        }
      })])])
    })], 2)
  })], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '/action_sequences/create?preset[terrarium]=' + _vm.terrariumId
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))])]), _vm._v(" "), _vm._m(0)])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-02aa2605", module.exports)
  }
}

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses,
    attrs: {
      "id": _vm.containerId
    }
  }, [_c('div', {
    staticClass: "timeline"
  }, _vm._l((_vm.caresheets), function(caresheet) {
    return _c('div', {
      staticClass: "timeline-event"
    }, [_c('div', {
      staticClass: "timeline-date"
    }, [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (caresheet.timestamps.created_diff.days > 0),
        expression: "caresheet.timestamps.created_diff.days > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": caresheet.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.days_ago', {
      val: caresheet.timestamps.created_diff.days
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (caresheet.timestamps.created_diff.days < 1 &&
          caresheet.timestamps.created_diff.hours > 0),
        expression: "caresheet.timestamps.created_diff.days < 1 &&\n                              caresheet.timestamps.created_diff.hours > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": caresheet.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.hours_ago', {
      val: caresheet.timestamps.created_diff.hours
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (caresheet.timestamps.created_diff.days < 1 &&
          caresheet.timestamps.created_diff.hours < 1 &&
          caresheet.timestamps.created_diff.minutes > 1),
        expression: "caresheet.timestamps.created_diff.days < 1 &&\n                              caresheet.timestamps.created_diff.hours < 1 &&\n                              caresheet.timestamps.created_diff.minutes > 1"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": caresheet.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.minutes_ago', {
      val: caresheet.timestamps.created_diff.minutes
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (caresheet.timestamps.created_diff.days < 1 &&
          caresheet.timestamps.created_diff.hours < 1 &&
          caresheet.timestamps.created_diff.minutes < 2),
        expression: "caresheet.timestamps.created_diff.days < 1 &&\n                              caresheet.timestamps.created_diff.hours < 1 &&\n                              caresheet.timestamps.created_diff.minutes < 2"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": caresheet.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.just_now')) + "\n                ")])]), _vm._v(" "), _c('div', {
      staticClass: "card timeline-content"
    }, [_c('div', {
      staticClass: "card-content"
    }, [_c('h5', [_vm._v(_vm._s(caresheet.title))])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/animals/' + _vm.belongsToId + '/caresheets/' + caresheet.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/animals/' + _vm.belongsToId + '/caresheets/' + caresheet.id + '/delete'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.delete")))])])]), _vm._v(" "), _vm._m(0, true)])
  }))])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "timeline-badge teal darken-2 white-text"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("content_paste")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-05618d09", module.exports)
  }
}

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(_vm.ShowFilterForm === true) ? _c('div', [_c('div', {
    staticClass: "row",
    staticStyle: {
      "margin-bottom": "0"
    }
  }, [_c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.from'),
      "name": "filter_from",
      "id": 'filter_from_' + _vm.id,
      "data-default": _vm.FilterFromDate
    },
    domProps: {
      "value": _vm.FilterFromDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_from_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.from')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.to'),
      "name": "filter_to",
      "id": 'filter_to_' + _vm.id,
      "data-default": _vm.FilterToDate
    },
    domProps: {
      "value": _vm.FilterToDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_to_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.to')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    on: {
      "click": _vm.build
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.loadgraph')))])])])]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "center",
    staticStyle: {
      "display": "none"
    },
    attrs: {
      "id": 'google_chart_' + _vm.id + '_loading'
    }
  }, [_vm._m(0)]), _vm._v(" "), _c('div', {
    attrs: {
      "id": 'google_chart_' + _vm.id
    }
  })])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "preloader-wrapper small active"
  }, [_c('div', {
    staticClass: "spinner-layer spinner-green-only"
  }, [_c('div', {
    staticClass: "circle-clipper left"
  }, [_c('div', {
    staticClass: "circle"
  })]), _c('div', {
    staticClass: "gap-patch"
  }, [_c('div', {
    staticClass: "circle"
  })]), _c('div', {
    staticClass: "circle-clipper right"
  }, [_c('div', {
    staticClass: "circle"
  })])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-0c333a8d", module.exports)
  }
}

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    staticClass: "white-text"
  }, [_c('div', {
    staticClass: "input-field inline",
    staticStyle: {
      "width": "150px"
    }
  }, [_c('form', {
    attrs: {
      "action": "/api/v1/apiai/send_request",
      "data-method": "POST",
      "id": "api-io-widget-form",
      "data-no-confirm": true
    },
    on: {
      "submit": _vm.submit_interceptor
    }
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.transcript),
      expression: "transcript"
    }],
    staticClass: "validate",
    staticStyle: {
      "padding": "0"
    },
    attrs: {
      "name": "speech",
      "id": "ask-me-something",
      "type": "text",
      "readonly": _vm.loading,
      "autocomplete": "off"
    },
    domProps: {
      "value": (_vm.transcript)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.transcript = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    staticClass: "white-text",
    attrs: {
      "for": "ask-me-something",
      "id": "ask-me-something-label"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.ask_me_something')))])])]), _vm._v(" "), _c('a', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.loading),
      expression: "!loading"
    }],
    staticClass: "btn-floating waves-effect waves-light",
    on: {
      "mousedown": _vm.record,
      "mouseup": _vm.stop_recording
    }
  }, [_c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.recording),
      expression: "!recording"
    }],
    staticClass: "material-icons"
  }, [_vm._v("mic_none")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.recording),
      expression: "recording"
    }],
    staticClass: "material-icons"
  }, [_vm._v("mic")])])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-1a23c295", module.exports)
  }
}

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight"
  }, [_c('thead', [_c('tr', [_c('th', {
    staticClass: "hide-on-med-and-down",
    attrs: {
      "data-field": "id"
    }
  }, [_vm._v("\n                    ID\n                    "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.id),
      expression: "filter.id"
    }],
    attrs: {
      "id": "filter_id",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.id)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.id = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_id"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.name')) + "\n                    "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "email"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.email')) + "\n                    "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.email),
      expression: "filter.email"
    }],
    attrs: {
      "id": "filter_email",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.email)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.email = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_email"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "actions"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.actions')) + "\n                ")])])]), _vm._v(" "), _c('tbody', _vm._l((_vm.users), function(user) {
    return _c('tr', [_c('td', {
      staticClass: "hide-on-med-and-down"
    }, [_vm._v(_vm._s(user.id))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(user.name))]), _vm._v(" "), _c('td', [_vm._v(_vm._s(user.email))]), _vm._v(" "), _c('td', [_c('a', {
      staticClass: "dropdown-button btn btn-small",
      attrs: {
        "href": "#!",
        "data-activates": 'dropdown-edit-user_' + user.id
      }
    }, [_vm._v("\n                        " + _vm._s(_vm.$t('labels.actions'))), _c('i', {
      staticClass: "material-icons"
    }, [_vm._v("keyboard_arrow_down")])]), _vm._v(" "), _c('ul', {
      staticClass: "dropdown-content",
      attrs: {
        "id": 'dropdown-edit-user_' + user.id
      }
    }, [_c('li', [_c('a', {
      attrs: {
        "href": '/users/' + user.id + '/edit'
      }
    }, [_vm._v("\n                                " + _vm._s(_vm.$t('buttons.edit')) + "\n                            ")])]), _vm._v(" "), _c('li', [_c('a', {
      attrs: {
        "href": '/users/' + user.id + '/delete'
      }
    }, [_vm._v("\n                                " + _vm._s(_vm.$t('buttons.delete')) + "\n                            ")])])])])])
  }))]), _vm._v(" "), _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-1d2323fc", module.exports)
  }
}

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "software_version"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.software_version')) + "\n                ")]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "timestamps.last_heartbeat"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.last_heartbeat')) + "\n                ")]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.controlunits), function(controlunit) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + controlunit.id
      }
    }, [_vm._v(_vm._s(controlunit.name))])])]), _vm._v(" "), _c('td', [_c('span', [_vm._v("\n                                " + _vm._s(controlunit.software_version) + "\n                            ")])]), _vm._v(" "), _c('td', [_vm._v("\n                            " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(controlunit.timestamps.last_heartbeat_diff).unit, {
        val: _vm.$getMatchingTimeDiff(controlunit.timestamps.last_heartbeat_diff).val
      }
    )) + "\n                        ")]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/controlunits/' + controlunit.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', {
      attrs: {
        "colspan": "3"
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$tc('components.physical_sensors', 2)) + ":\n                            "), _vm._l((controlunit.physical_sensors), function(physical_sensor, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("memory")]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/physical_sensors/' + physical_sensor.id
        }
      }, [_vm._v(_vm._s(physical_sensor.name))]), _vm._v(" "), (index < controlunit.physical_sensors.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    }), _vm._v(" "), _c('br'), _vm._v("\n                            " + _vm._s(_vm.$tc('components.valves', 2)) + ":\n                            "), _vm._l((controlunit.valves), function(valve, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("transform")]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/valves/' + valve.id
        }
      }, [_vm._v(_vm._s(valve.name))]), _vm._v(" "), (index < controlunit.valves.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    }), _vm._v(" "), _c('br'), _vm._v("\n                            " + _vm._s(_vm.$tc('components.pumps', 2)) + ":\n                            "), _vm._l((controlunit.pumps), function(pump, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("rotate_right")]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/pumps/' + pump.id
        }
      }, [_vm._v(_vm._s(pump.name))]), _vm._v(" "), (index < controlunit.pumps.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    }), _vm._v(" "), _c('br'), _vm._v("\n                            " + _vm._s(_vm.$tc('components.generic_components', 2)) + ":\n                            "), _vm._l((controlunit.generic_components), function(generic_component, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v(_vm._s(generic_component.type.icon))]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/generic_components/' + generic_component.id
        }
      }, [_vm._v(_vm._s(generic_component.name))]), _vm._v(" "), (index < controlunit.generic_components.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    }), _vm._v(" "), _c('br')], 2)])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-218170ea", module.exports)
  }
}

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.physical_sensors), function(physical_sensor) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("memory")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.physical_sensors", 2)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(physical_sensor.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p')]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/physical_sensors/' + physical_sensor.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/physical_sensors/' + physical_sensor.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.logical_sensors", 2)) + " "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _vm._l((physical_sensor.logical_sensors), function(logical_sensor) {
      return _c('p', [_c('a', {
        attrs: {
          "href": '/logical_sensors/' + logical_sensor.id
        }
      }, [_vm._v(_vm._s(logical_sensor.name))]), _vm._v(" "), _c('i', [_vm._v(_vm._s(_vm.$t("labels." + logical_sensor.type)))])])
    })], 2)])])])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-22848a7d", module.exports)
  }
}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "model"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('model')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.model')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'model' && _vm.order.direction == 'asc'),
      expression: "order.field == 'model' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'model' && _vm.order.direction == 'desc'),
      expression: "order.field == 'model' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.model),
      expression: "filter.model"
    }],
    attrs: {
      "id": "filter_model",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.model)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.model = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_model"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "controlunit"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('controlunit')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'asc'),
      expression: "order.field == 'controlunit' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'desc'),
      expression: "order.field == 'controlunit' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['controlunit.name']),
      expression: "filter['controlunit.name']"
    }],
    attrs: {
      "id": "filter_controlunit",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['controlunit.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'controlunit.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['controlunit.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_controlunit"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-med-and-down",
    attrs: {
      "data-field": "terrarium"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('terraria.display_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.terraria', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.terrarium.display_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'physical_sensor.terrarium.display_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.terrarium.display_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'physical_sensor.terrarium.display_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['terrarium.display_name']),
      expression: "filter['terrarium.display_name']"
    }],
    attrs: {
      "id": "filter_terrarium",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['terrarium.display_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'terrarium.display_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['terrarium.display_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_terrarium"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.physical_sensors), function(physical_sensor) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("memory")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/physical_sensors/' + physical_sensor.id
      }
    }, [_vm._v(_vm._s(physical_sensor.name))])])]), _vm._v(" "), _c('td', [_c('span', [_vm._v("\n                                " + _vm._s(physical_sensor.model) + "\n                            ")])]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(physical_sensor.controlunit) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + physical_sensor.controlunit.id
      }
    }, [_vm._v(_vm._s(physical_sensor.controlunit.name))])]) : _vm._e()]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-med-and-down"
    }, [(physical_sensor.terrarium) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("video_label")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/terraria/' + physical_sensor.terrarium.id
      }
    }, [_vm._v(_vm._s(physical_sensor.terrarium.display_name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/physical_sensors/' + physical_sensor.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', {
      attrs: {
        "colspan": "4"
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('labels.last_heartbeat')) + ":\n                            " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(physical_sensor.timestamps.last_heartbeat_diff).unit, {
        val: _vm.$getMatchingTimeDiff(physical_sensor.timestamps.last_heartbeat_diff).val
      }
    )) + "\n                            "), _c('br'), _vm._v("\n                            " + _vm._s(_vm.$tc('components.logical_sensors', 2)) + ":\n                            "), _vm._l((physical_sensor.logical_sensors), function(logical_sensor, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("memory")]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/logical_sensors/' + logical_sensor.id
        }
      }, [_vm._v(_vm._s(logical_sensor.name))]), _vm._v(" "), (index < physical_sensor.logical_sensors.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    })], 2), _vm._v(" "), _c('td', {
      staticClass: "hide-on-med-and-down"
    })])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-2407172c", module.exports)
  }
}

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.generic_components), function(generic_component) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(generic_component.type.icon))]), _vm._v("\n                    " + _vm._s(generic_component.type.name_singular) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(generic_component.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p', _vm._l((generic_component.properties), function(value, name) {
      return _c('span', [_vm._v(_vm._s(name) + ": " + _vm._s(value)), _c('br')])
    }))]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/generic_components/' + generic_component.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/generic_components/' + generic_component.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [(generic_component.controlunit !== undefined) ? _c('div', [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc('components.controlunits', 1))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _c('p', [_c('a', {
      attrs: {
        "href": '/controlunits/' + generic_component.controlunit.id
      }
    }, [_vm._v(_vm._s(generic_component.controlunit.name))])]), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(generic_component.belongsTo_type))]), _vm._v(" "), _c('p', [(generic_component.belongsTo) ? _c('a', {
      attrs: {
        "href": generic_component.belongsTo.url
      }
    }, [_vm._v(_vm._s(generic_component.belongsTo.name))]) : _vm._e()])]) : _vm._e()])])])])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-28dfb130", module.exports)
  }
}

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.logical_sensors), function(logical_sensor) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("memory")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.logical_sensors", 2)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(logical_sensor.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p', [_c('span', [_vm._v(_vm._s(_vm.$t("labels.type")) + ": " + _vm._s(_vm.$t("labels." + logical_sensor.type)))])])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/logical_sensors/' + logical_sensor.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/logical_sensors/' + logical_sensor.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.physical_sensors", 1))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _c('p', [(logical_sensor.physical_sensor) ? _c('span', [_vm._v("\n                            " + _vm._s(_vm.$tc("components.physical_sensor", 1)) + ":\n                            "), _c('a', {
      attrs: {
        "href": '/physical_sensors/' + logical_sensor.physical_sensor.id
      }
    }, [_vm._v(_vm._s(logical_sensor.physical_sensor.name))])]) : _vm._e()]), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.logical_sensor_thresholds", 2)))]), _vm._v(" "), _vm._l((logical_sensor.thresholds), function(lst) {
      return _c('p', [_vm._v("\n                        " + _vm._s(_vm.$t("labels.starts_at")) + " " + _vm._s(lst.timestamps.starts) + ":\n                        "), _c('strong', [_c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (lst.rawvalue_lowerlimit && !lst.rawvalue_upperlimit),
          expression: "lst.rawvalue_lowerlimit && !lst.rawvalue_upperlimit"
        }]
      }, [_vm._v("min " + _vm._s(lst.rawvalue_lowerlimit) + _vm._s(_vm.$t("units." + logical_sensor.type)))]), _vm._v(" "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (!lst.rawvalue_lowerlimit && lst.rawvalue_upperlimit),
          expression: "!lst.rawvalue_lowerlimit && lst.rawvalue_upperlimit"
        }]
      }, [_vm._v("max " + _vm._s(lst.rawvalue_upperlimit) + _vm._s(_vm.$t("units." + logical_sensor.type)))]), _vm._v(" "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (lst.rawvalue_lowerlimit && lst.rawvalue_upperlimit),
          expression: "lst.rawvalue_lowerlimit && lst.rawvalue_upperlimit"
        }]
      }, [_vm._v(_vm._s(lst.rawvalue_lowerlimit) + " - " + _vm._s(lst.rawvalue_upperlimit) + _vm._s(_vm.$t("units." + logical_sensor.type)))])]), _vm._v(" "), _c('span', {
        directives: [{
          name: "show",
          rawName: "v-show",
          value: (lst.id == logical_sensor.current_threshold_id),
          expression: "lst.id == logical_sensor.current_threshold_id"
        }]
      }, [_c('span', {
        staticClass: "new badge",
        attrs: {
          "data-badge-caption": _vm.$t('labels.active')
        }
      })])])
    })], 2)])])])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-2a37f8be", module.exports)
  }
}

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses
  }, [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "card"
  }, [_c('form', {
    attrs: {
      "action": '/api/v1/generic_component_types/' + (_vm.generic_component_type.id === undefined ? '' : _vm.generic_component_type.id),
      "data-method": _vm.generic_component_type.id === undefined ? 'POST' : 'PUT',
      "id": _vm.generic_component_type,
      "data-redirect-success": "/categories#tab_generic_components_types"
    }
  }, [_c('div', {
    staticClass: "card-content"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('h5', [_vm._v(_vm._s(_vm.$tc('components.generic_component_types', 1)))])]), _vm._v(" "), _c('div', {
    staticClass: "col s12 m6 l6"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12 m6 l6"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.generic_component_type.name_singular),
      expression: "generic_component_type.name_singular"
    }],
    attrs: {
      "type": "text",
      "placeholder": _vm.$t('labels.name_singular'),
      "name": "name_singular",
      "id": "name_singular"
    },
    domProps: {
      "value": (_vm.generic_component_type.name_singular)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.generic_component_type.name_singular = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "name_singular"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name_singular')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m6 l6"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.generic_component_type.name_plural),
      expression: "generic_component_type.name_plural"
    }],
    attrs: {
      "type": "text",
      "placeholder": _vm.$t('labels.name_plural'),
      "name": "name_plural",
      "id": "name_plural"
    },
    domProps: {
      "value": (_vm.generic_component_type.name_plural)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.generic_component_type.name_plural = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "name_plural"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name_plural')))])])])]), _vm._v(" "), _c('div', {
    staticClass: "col s12 m6 l6"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12"
  }, [_c('select', {
    attrs: {
      "name": "icon",
      "id": "icon"
    },
    domProps: {
      "value": _vm.generic_component_type.icon
    }
  }, [_c('option', {
    attrs: {
      "value": "3d_rotation"
    }
  }, [_vm._v("3d_rotation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "ac_unit"
    }
  }, [_vm._v("ac_unit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "access_alarm"
    }
  }, [_vm._v("access_alarm")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "access_alarms"
    }
  }, [_vm._v("access_alarms")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "access_time"
    }
  }, [_vm._v("access_time")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "accessibility"
    }
  }, [_vm._v("accessibility")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "accessible"
    }
  }, [_vm._v("accessible")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "account_balance"
    }
  }, [_vm._v("account_balance")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "account_balance_wallet"
    }
  }, [_vm._v("account_balance_wallet")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "account_box"
    }
  }, [_vm._v("account_box")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "account_circle"
    }
  }, [_vm._v("account_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "adb"
    }
  }, [_vm._v("adb")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add"
    }
  }, [_vm._v("add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_a_photo"
    }
  }, [_vm._v("add_a_photo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_alarm"
    }
  }, [_vm._v("add_alarm")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_alert"
    }
  }, [_vm._v("add_alert")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_box"
    }
  }, [_vm._v("add_box")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_circle"
    }
  }, [_vm._v("add_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_circle_outline"
    }
  }, [_vm._v("add_circle_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_location"
    }
  }, [_vm._v("add_location")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_shopping_cart"
    }
  }, [_vm._v("add_shopping_cart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_to_photos"
    }
  }, [_vm._v("add_to_photos")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "add_to_queue"
    }
  }, [_vm._v("add_to_queue")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "adjust"
    }
  }, [_vm._v("adjust")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_flat"
    }
  }, [_vm._v("airline_seat_flat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_flat_angled"
    }
  }, [_vm._v("airline_seat_flat_angled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_individual_suite"
    }
  }, [_vm._v("airline_seat_individual_suite")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_legroom_extra"
    }
  }, [_vm._v("airline_seat_legroom_extra")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_legroom_normal"
    }
  }, [_vm._v("airline_seat_legroom_normal")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_legroom_reduced"
    }
  }, [_vm._v("airline_seat_legroom_reduced")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_recline_extra"
    }
  }, [_vm._v("airline_seat_recline_extra")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airline_seat_recline_normal"
    }
  }, [_vm._v("airline_seat_recline_normal")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airplanemode_active"
    }
  }, [_vm._v("airplanemode_active")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airplanemode_inactive"
    }
  }, [_vm._v("airplanemode_inactive")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airplay"
    }
  }, [_vm._v("airplay")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "airport_shuttle"
    }
  }, [_vm._v("airport_shuttle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "alarm"
    }
  }, [_vm._v("alarm")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "alarm_add"
    }
  }, [_vm._v("alarm_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "alarm_off"
    }
  }, [_vm._v("alarm_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "alarm_on"
    }
  }, [_vm._v("alarm_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "album"
    }
  }, [_vm._v("album")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "all_inclusive"
    }
  }, [_vm._v("all_inclusive")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "all_out"
    }
  }, [_vm._v("all_out")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "android"
    }
  }, [_vm._v("android")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "announcement"
    }
  }, [_vm._v("announcement")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "apps"
    }
  }, [_vm._v("apps")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "archive"
    }
  }, [_vm._v("archive")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_back"
    }
  }, [_vm._v("arrow_back")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_downward"
    }
  }, [_vm._v("arrow_downward")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_drop_down"
    }
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_drop_down_circle"
    }
  }, [_vm._v("arrow_drop_down_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_drop_up"
    }
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_forward"
    }
  }, [_vm._v("arrow_forward")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "arrow_upward"
    }
  }, [_vm._v("arrow_upward")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "art_track"
    }
  }, [_vm._v("art_track")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "aspect_ratio"
    }
  }, [_vm._v("aspect_ratio")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assessment"
    }
  }, [_vm._v("assessment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment"
    }
  }, [_vm._v("assignment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment_ind"
    }
  }, [_vm._v("assignment_ind")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment_late"
    }
  }, [_vm._v("assignment_late")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment_return"
    }
  }, [_vm._v("assignment_return")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment_returned"
    }
  }, [_vm._v("assignment_returned")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assignment_turned_in"
    }
  }, [_vm._v("assignment_turned_in")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assistant"
    }
  }, [_vm._v("assistant")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "assistant_photo"
    }
  }, [_vm._v("assistant_photo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "attach_file"
    }
  }, [_vm._v("attach_file")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "attach_money"
    }
  }, [_vm._v("attach_money")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "attachment"
    }
  }, [_vm._v("attachment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "audiotrack"
    }
  }, [_vm._v("audiotrack")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "autorenew"
    }
  }, [_vm._v("autorenew")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "av_timer"
    }
  }, [_vm._v("av_timer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "backspace"
    }
  }, [_vm._v("backspace")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "backup"
    }
  }, [_vm._v("backup")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "battery_alert"
    }
  }, [_vm._v("battery_alert")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "battery_charging_full"
    }
  }, [_vm._v("battery_charging_full")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "battery_full"
    }
  }, [_vm._v("battery_full")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "battery_std"
    }
  }, [_vm._v("battery_std")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "battery_unknown"
    }
  }, [_vm._v("battery_unknown")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "beach_access"
    }
  }, [_vm._v("beach_access")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "beenhere"
    }
  }, [_vm._v("beenhere")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "block"
    }
  }, [_vm._v("block")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bluetooth"
    }
  }, [_vm._v("bluetooth")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bluetooth_audio"
    }
  }, [_vm._v("bluetooth_audio")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bluetooth_connected"
    }
  }, [_vm._v("bluetooth_connected")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bluetooth_disabled"
    }
  }, [_vm._v("bluetooth_disabled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bluetooth_searching"
    }
  }, [_vm._v("bluetooth_searching")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "blur_circular"
    }
  }, [_vm._v("blur_circular")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "blur_linear"
    }
  }, [_vm._v("blur_linear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "blur_off"
    }
  }, [_vm._v("blur_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "blur_on"
    }
  }, [_vm._v("blur_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "book"
    }
  }, [_vm._v("book")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bookmark"
    }
  }, [_vm._v("bookmark")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bookmark_border"
    }
  }, [_vm._v("bookmark_border")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_all"
    }
  }, [_vm._v("border_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_bottom"
    }
  }, [_vm._v("border_bottom")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_clear"
    }
  }, [_vm._v("border_clear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_color"
    }
  }, [_vm._v("border_color")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_horizontal"
    }
  }, [_vm._v("border_horizontal")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_inner"
    }
  }, [_vm._v("border_inner")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_left"
    }
  }, [_vm._v("border_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_outer"
    }
  }, [_vm._v("border_outer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_right"
    }
  }, [_vm._v("border_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_style"
    }
  }, [_vm._v("border_style")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_top"
    }
  }, [_vm._v("border_top")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "border_vertical"
    }
  }, [_vm._v("border_vertical")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "branding_watermark"
    }
  }, [_vm._v("branding_watermark")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_1"
    }
  }, [_vm._v("brightness_1")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_2"
    }
  }, [_vm._v("brightness_2")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_3"
    }
  }, [_vm._v("brightness_3")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_4"
    }
  }, [_vm._v("brightness_4")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_5"
    }
  }, [_vm._v("brightness_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_6"
    }
  }, [_vm._v("brightness_6")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_7"
    }
  }, [_vm._v("brightness_7")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_auto"
    }
  }, [_vm._v("brightness_auto")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_high"
    }
  }, [_vm._v("brightness_high")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_low"
    }
  }, [_vm._v("brightness_low")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brightness_medium"
    }
  }, [_vm._v("brightness_medium")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "broken_image"
    }
  }, [_vm._v("broken_image")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "brush"
    }
  }, [_vm._v("brush")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bubble_chart"
    }
  }, [_vm._v("bubble_chart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "bug_report"
    }
  }, [_vm._v("bug_report")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "build"
    }
  }, [_vm._v("build")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "burst_mode"
    }
  }, [_vm._v("burst_mode")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "business"
    }
  }, [_vm._v("business")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "business_center"
    }
  }, [_vm._v("business_center")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cached"
    }
  }, [_vm._v("cached")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cake"
    }
  }, [_vm._v("cake")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call"
    }
  }, [_vm._v("call")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_end"
    }
  }, [_vm._v("call_end")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_made"
    }
  }, [_vm._v("call_made")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_merge"
    }
  }, [_vm._v("call_merge")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_missed"
    }
  }, [_vm._v("call_missed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_missed_outgoing"
    }
  }, [_vm._v("call_missed_outgoing")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_received"
    }
  }, [_vm._v("call_received")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_split"
    }
  }, [_vm._v("call_split")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "call_to_action"
    }
  }, [_vm._v("call_to_action")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera"
    }
  }, [_vm._v("camera")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera_alt"
    }
  }, [_vm._v("camera_alt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera_enhance"
    }
  }, [_vm._v("camera_enhance")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera_front"
    }
  }, [_vm._v("camera_front")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera_rear"
    }
  }, [_vm._v("camera_rear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "camera_roll"
    }
  }, [_vm._v("camera_roll")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cancel"
    }
  }, [_vm._v("cancel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "card_giftcard"
    }
  }, [_vm._v("card_giftcard")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "card_membership"
    }
  }, [_vm._v("card_membership")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "card_travel"
    }
  }, [_vm._v("card_travel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "casino"
    }
  }, [_vm._v("casino")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cast"
    }
  }, [_vm._v("cast")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cast_connected"
    }
  }, [_vm._v("cast_connected")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "center_focus_strong"
    }
  }, [_vm._v("center_focus_strong")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "center_focus_weak"
    }
  }, [_vm._v("center_focus_weak")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "change_history"
    }
  }, [_vm._v("change_history")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chat"
    }
  }, [_vm._v("chat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chat_bubble"
    }
  }, [_vm._v("chat_bubble")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chat_bubble_outline"
    }
  }, [_vm._v("chat_bubble_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "check"
    }
  }, [_vm._v("check")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "check_box"
    }
  }, [_vm._v("check_box")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "check_box_outline_blank"
    }
  }, [_vm._v("check_box_outline_blank")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "check_circle"
    }
  }, [_vm._v("check_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chevron_left"
    }
  }, [_vm._v("chevron_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chevron_right"
    }
  }, [_vm._v("chevron_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "child_care"
    }
  }, [_vm._v("child_care")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "child_friendly"
    }
  }, [_vm._v("child_friendly")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "chrome_reader_mode"
    }
  }, [_vm._v("chrome_reader_mode")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "class"
    }
  }, [_vm._v("class")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "clear"
    }
  }, [_vm._v("clear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "clear_all"
    }
  }, [_vm._v("clear_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "close"
    }
  }, [_vm._v("close")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "closed_caption"
    }
  }, [_vm._v("closed_caption")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud"
    }
  }, [_vm._v("cloud")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_circle"
    }
  }, [_vm._v("cloud_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_done"
    }
  }, [_vm._v("cloud_done")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_download"
    }
  }, [_vm._v("cloud_download")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_off"
    }
  }, [_vm._v("cloud_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_queue"
    }
  }, [_vm._v("cloud_queue")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "cloud_upload"
    }
  }, [_vm._v("cloud_upload")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "code"
    }
  }, [_vm._v("code")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "collections"
    }
  }, [_vm._v("collections")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "collections_bookmark"
    }
  }, [_vm._v("collections_bookmark")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "color_lens"
    }
  }, [_vm._v("color_lens")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "colorize"
    }
  }, [_vm._v("colorize")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "comment"
    }
  }, [_vm._v("comment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "compare"
    }
  }, [_vm._v("compare")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "compare_arrows"
    }
  }, [_vm._v("compare_arrows")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "computer"
    }
  }, [_vm._v("computer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "confirmation_number"
    }
  }, [_vm._v("confirmation_number")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "contact_mail"
    }
  }, [_vm._v("contact_mail")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "contact_phone"
    }
  }, [_vm._v("contact_phone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "contacts"
    }
  }, [_vm._v("contacts")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "content_copy"
    }
  }, [_vm._v("content_copy")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "content_cut"
    }
  }, [_vm._v("content_cut")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "content_paste"
    }
  }, [_vm._v("content_paste")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "control_point"
    }
  }, [_vm._v("control_point")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "control_point_duplicate"
    }
  }, [_vm._v("control_point_duplicate")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "copyright"
    }
  }, [_vm._v("copyright")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "create"
    }
  }, [_vm._v("create")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "create_new_folder"
    }
  }, [_vm._v("create_new_folder")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "credit_card"
    }
  }, [_vm._v("credit_card")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop"
    }
  }, [_vm._v("crop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_16_9"
    }
  }, [_vm._v("crop_16_9")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_3_2"
    }
  }, [_vm._v("crop_3_2")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_5_4"
    }
  }, [_vm._v("crop_5_4")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_7_5"
    }
  }, [_vm._v("crop_7_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_din"
    }
  }, [_vm._v("crop_din")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_free"
    }
  }, [_vm._v("crop_free")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_landscape"
    }
  }, [_vm._v("crop_landscape")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_original"
    }
  }, [_vm._v("crop_original")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_portrait"
    }
  }, [_vm._v("crop_portrait")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_rotate"
    }
  }, [_vm._v("crop_rotate")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "crop_square"
    }
  }, [_vm._v("crop_square")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dashboard"
    }
  }, [_vm._v("dashboard")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "data_usage"
    }
  }, [_vm._v("data_usage")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "date_range"
    }
  }, [_vm._v("date_range")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dehaze"
    }
  }, [_vm._v("dehaze")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "delete"
    }
  }, [_vm._v("delete")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "delete_forever"
    }
  }, [_vm._v("delete_forever")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "delete_sweep"
    }
  }, [_vm._v("delete_sweep")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "description"
    }
  }, [_vm._v("description")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "desktop_mac"
    }
  }, [_vm._v("desktop_mac")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "desktop_windows"
    }
  }, [_vm._v("desktop_windows")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "details"
    }
  }, [_vm._v("details")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "developer_board"
    }
  }, [_vm._v("developer_board")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "developer_mode"
    }
  }, [_vm._v("developer_mode")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "device_hub"
    }
  }, [_vm._v("device_hub")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "devices"
    }
  }, [_vm._v("devices")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "devices_other"
    }
  }, [_vm._v("devices_other")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dialer_sip"
    }
  }, [_vm._v("dialer_sip")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dialpad"
    }
  }, [_vm._v("dialpad")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions"
    }
  }, [_vm._v("directions")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_bike"
    }
  }, [_vm._v("directions_bike")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_boat"
    }
  }, [_vm._v("directions_boat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_bus"
    }
  }, [_vm._v("directions_bus")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_car"
    }
  }, [_vm._v("directions_car")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_railway"
    }
  }, [_vm._v("directions_railway")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_run"
    }
  }, [_vm._v("directions_run")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_subway"
    }
  }, [_vm._v("directions_subway")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_transit"
    }
  }, [_vm._v("directions_transit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "directions_walk"
    }
  }, [_vm._v("directions_walk")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "disc_full"
    }
  }, [_vm._v("disc_full")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dns"
    }
  }, [_vm._v("dns")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "do_not_disturb"
    }
  }, [_vm._v("do_not_disturb")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "do_not_disturb_alt"
    }
  }, [_vm._v("do_not_disturb_alt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "do_not_disturb_off"
    }
  }, [_vm._v("do_not_disturb_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "do_not_disturb_on"
    }
  }, [_vm._v("do_not_disturb_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dock"
    }
  }, [_vm._v("dock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "domain"
    }
  }, [_vm._v("domain")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "done"
    }
  }, [_vm._v("done")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "done_all"
    }
  }, [_vm._v("done_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "donut_large"
    }
  }, [_vm._v("donut_large")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "donut_small"
    }
  }, [_vm._v("donut_small")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "drafts"
    }
  }, [_vm._v("drafts")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "drag_handle"
    }
  }, [_vm._v("drag_handle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "drive_eta"
    }
  }, [_vm._v("drive_eta")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "dvr"
    }
  }, [_vm._v("dvr")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "edit"
    }
  }, [_vm._v("edit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "edit_location"
    }
  }, [_vm._v("edit_location")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "eject"
    }
  }, [_vm._v("eject")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "email"
    }
  }, [_vm._v("email")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "enhanced_encryption"
    }
  }, [_vm._v("enhanced_encryption")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "equalizer"
    }
  }, [_vm._v("equalizer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "error"
    }
  }, [_vm._v("error")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "error_outline"
    }
  }, [_vm._v("error_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "euro_symbol"
    }
  }, [_vm._v("euro_symbol")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "ev_station"
    }
  }, [_vm._v("ev_station")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "event"
    }
  }, [_vm._v("event")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "event_available"
    }
  }, [_vm._v("event_available")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "event_busy"
    }
  }, [_vm._v("event_busy")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "event_note"
    }
  }, [_vm._v("event_note")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "event_seat"
    }
  }, [_vm._v("event_seat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exit_to_app"
    }
  }, [_vm._v("exit_to_app")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "expand_less"
    }
  }, [_vm._v("expand_less")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "expand_more"
    }
  }, [_vm._v("expand_more")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "explicit"
    }
  }, [_vm._v("explicit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "explore"
    }
  }, [_vm._v("explore")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure"
    }
  }, [_vm._v("exposure")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure_neg_1"
    }
  }, [_vm._v("exposure_neg_1")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure_neg_2"
    }
  }, [_vm._v("exposure_neg_2")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure_plus_1"
    }
  }, [_vm._v("exposure_plus_1")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure_plus_2"
    }
  }, [_vm._v("exposure_plus_2")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "exposure_zero"
    }
  }, [_vm._v("exposure_zero")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "extension"
    }
  }, [_vm._v("extension")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "face"
    }
  }, [_vm._v("face")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fast_forward"
    }
  }, [_vm._v("fast_forward")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fast_rewind"
    }
  }, [_vm._v("fast_rewind")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "favorite"
    }
  }, [_vm._v("favorite")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "favorite_border"
    }
  }, [_vm._v("favorite_border")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "featured_play_list"
    }
  }, [_vm._v("featured_play_list")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "featured_video"
    }
  }, [_vm._v("featured_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "feedback"
    }
  }, [_vm._v("feedback")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fiber_dvr"
    }
  }, [_vm._v("fiber_dvr")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fiber_manual_record"
    }
  }, [_vm._v("fiber_manual_record")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fiber_new"
    }
  }, [_vm._v("fiber_new")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fiber_pin"
    }
  }, [_vm._v("fiber_pin")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fiber_smart_record"
    }
  }, [_vm._v("fiber_smart_record")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "file_download"
    }
  }, [_vm._v("file_download")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "file_upload"
    }
  }, [_vm._v("file_upload")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter"
    }
  }, [_vm._v("filter")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_1"
    }
  }, [_vm._v("filter_1")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_2"
    }
  }, [_vm._v("filter_2")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_3"
    }
  }, [_vm._v("filter_3")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_4"
    }
  }, [_vm._v("filter_4")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_5"
    }
  }, [_vm._v("filter_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_6"
    }
  }, [_vm._v("filter_6")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_7"
    }
  }, [_vm._v("filter_7")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_8"
    }
  }, [_vm._v("filter_8")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_9"
    }
  }, [_vm._v("filter_9")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_9_plus"
    }
  }, [_vm._v("filter_9_plus")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_b_and_w"
    }
  }, [_vm._v("filter_b_and_w")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_center_focus"
    }
  }, [_vm._v("filter_center_focus")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_drama"
    }
  }, [_vm._v("filter_drama")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_frames"
    }
  }, [_vm._v("filter_frames")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_hdr"
    }
  }, [_vm._v("filter_hdr")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_list"
    }
  }, [_vm._v("filter_list")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_none"
    }
  }, [_vm._v("filter_none")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_tilt_shift"
    }
  }, [_vm._v("filter_tilt_shift")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "filter_vintage"
    }
  }, [_vm._v("filter_vintage")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "find_in_page"
    }
  }, [_vm._v("find_in_page")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "find_replace"
    }
  }, [_vm._v("find_replace")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fingerprint"
    }
  }, [_vm._v("fingerprint")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "first_page"
    }
  }, [_vm._v("first_page")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fitness_center"
    }
  }, [_vm._v("fitness_center")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flag"
    }
  }, [_vm._v("flag")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flare"
    }
  }, [_vm._v("flare")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flash_auto"
    }
  }, [_vm._v("flash_auto")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flash_off"
    }
  }, [_vm._v("flash_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flash_on"
    }
  }, [_vm._v("flash_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flight"
    }
  }, [_vm._v("flight")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flight_land"
    }
  }, [_vm._v("flight_land")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flight_takeoff"
    }
  }, [_vm._v("flight_takeoff")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flip"
    }
  }, [_vm._v("flip")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flip_to_back"
    }
  }, [_vm._v("flip_to_back")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "flip_to_front"
    }
  }, [_vm._v("flip_to_front")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "folder"
    }
  }, [_vm._v("folder")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "folder_open"
    }
  }, [_vm._v("folder_open")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "folder_shared"
    }
  }, [_vm._v("folder_shared")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "folder_special"
    }
  }, [_vm._v("folder_special")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "font_download"
    }
  }, [_vm._v("font_download")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_align_center"
    }
  }, [_vm._v("format_align_center")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_align_justify"
    }
  }, [_vm._v("format_align_justify")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_align_left"
    }
  }, [_vm._v("format_align_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_align_right"
    }
  }, [_vm._v("format_align_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_bold"
    }
  }, [_vm._v("format_bold")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_clear"
    }
  }, [_vm._v("format_clear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_color_fill"
    }
  }, [_vm._v("format_color_fill")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_color_reset"
    }
  }, [_vm._v("format_color_reset")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_color_text"
    }
  }, [_vm._v("format_color_text")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_indent_decrease"
    }
  }, [_vm._v("format_indent_decrease")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_indent_increase"
    }
  }, [_vm._v("format_indent_increase")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_italic"
    }
  }, [_vm._v("format_italic")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_line_spacing"
    }
  }, [_vm._v("format_line_spacing")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_list_bulleted"
    }
  }, [_vm._v("format_list_bulleted")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_list_numbered"
    }
  }, [_vm._v("format_list_numbered")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_paint"
    }
  }, [_vm._v("format_paint")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_quote"
    }
  }, [_vm._v("format_quote")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_shapes"
    }
  }, [_vm._v("format_shapes")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_size"
    }
  }, [_vm._v("format_size")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_strikethrough"
    }
  }, [_vm._v("format_strikethrough")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_textdirection_l_to_r"
    }
  }, [_vm._v("format_textdirection_l_to_r")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_textdirection_r_to_l"
    }
  }, [_vm._v("format_textdirection_r_to_l")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "format_underlined"
    }
  }, [_vm._v("format_underlined")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "forum"
    }
  }, [_vm._v("forum")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "forward"
    }
  }, [_vm._v("forward")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "forward_10"
    }
  }, [_vm._v("forward_10")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "forward_30"
    }
  }, [_vm._v("forward_30")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "forward_5"
    }
  }, [_vm._v("forward_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "free_breakfast"
    }
  }, [_vm._v("free_breakfast")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fullscreen"
    }
  }, [_vm._v("fullscreen")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "fullscreen_exit"
    }
  }, [_vm._v("fullscreen_exit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "functions"
    }
  }, [_vm._v("functions")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "g_translate"
    }
  }, [_vm._v("g_translate")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gamepad"
    }
  }, [_vm._v("gamepad")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "games"
    }
  }, [_vm._v("games")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gavel"
    }
  }, [_vm._v("gavel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gesture"
    }
  }, [_vm._v("gesture")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "get_app"
    }
  }, [_vm._v("get_app")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gif"
    }
  }, [_vm._v("gif")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "golf_course"
    }
  }, [_vm._v("golf_course")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gps_fixed"
    }
  }, [_vm._v("gps_fixed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gps_not_fixed"
    }
  }, [_vm._v("gps_not_fixed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gps_off"
    }
  }, [_vm._v("gps_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "grade"
    }
  }, [_vm._v("grade")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gradient"
    }
  }, [_vm._v("gradient")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "grain"
    }
  }, [_vm._v("grain")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "graphic_eq"
    }
  }, [_vm._v("graphic_eq")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "grid_off"
    }
  }, [_vm._v("grid_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "grid_on"
    }
  }, [_vm._v("grid_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "group"
    }
  }, [_vm._v("group")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "group_add"
    }
  }, [_vm._v("group_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "group_work"
    }
  }, [_vm._v("group_work")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hd"
    }
  }, [_vm._v("hd")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hdr_off"
    }
  }, [_vm._v("hdr_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hdr_on"
    }
  }, [_vm._v("hdr_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hdr_strong"
    }
  }, [_vm._v("hdr_strong")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hdr_weak"
    }
  }, [_vm._v("hdr_weak")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "headset"
    }
  }, [_vm._v("headset")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "headset_mic"
    }
  }, [_vm._v("headset_mic")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "healing"
    }
  }, [_vm._v("healing")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hearing"
    }
  }, [_vm._v("hearing")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "help"
    }
  }, [_vm._v("help")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "help_outline"
    }
  }, [_vm._v("help_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "high_quality"
    }
  }, [_vm._v("high_quality")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "highlight"
    }
  }, [_vm._v("highlight")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "highlight_off"
    }
  }, [_vm._v("highlight_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "history"
    }
  }, [_vm._v("history")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "home"
    }
  }, [_vm._v("home")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hot_tub"
    }
  }, [_vm._v("hot_tub")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hotel"
    }
  }, [_vm._v("hotel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hourglass_empty"
    }
  }, [_vm._v("hourglass_empty")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "hourglass_full"
    }
  }, [_vm._v("hourglass_full")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "http"
    }
  }, [_vm._v("http")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "https"
    }
  }, [_vm._v("https")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "image"
    }
  }, [_vm._v("image")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "image_aspect_ratio"
    }
  }, [_vm._v("image_aspect_ratio")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "import_contacts"
    }
  }, [_vm._v("import_contacts")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "import_export"
    }
  }, [_vm._v("import_export")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "important_devices"
    }
  }, [_vm._v("important_devices")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "inbox"
    }
  }, [_vm._v("inbox")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "indeterminate_check_box"
    }
  }, [_vm._v("indeterminate_check_box")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "info"
    }
  }, [_vm._v("info")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "info_outline"
    }
  }, [_vm._v("info_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "input"
    }
  }, [_vm._v("input")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_chart"
    }
  }, [_vm._v("insert_chart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_comment"
    }
  }, [_vm._v("insert_comment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_drive_file"
    }
  }, [_vm._v("insert_drive_file")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_emoticon"
    }
  }, [_vm._v("insert_emoticon")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_invitation"
    }
  }, [_vm._v("insert_invitation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_link"
    }
  }, [_vm._v("insert_link")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "insert_photo"
    }
  }, [_vm._v("insert_photo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "invert_colors"
    }
  }, [_vm._v("invert_colors")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "invert_colors_off"
    }
  }, [_vm._v("invert_colors_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "iso"
    }
  }, [_vm._v("iso")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard"
    }
  }, [_vm._v("keyboard")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_arrow_down"
    }
  }, [_vm._v("keyboard_arrow_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_arrow_left"
    }
  }, [_vm._v("keyboard_arrow_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_arrow_right"
    }
  }, [_vm._v("keyboard_arrow_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_arrow_up"
    }
  }, [_vm._v("keyboard_arrow_up")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_backspace"
    }
  }, [_vm._v("keyboard_backspace")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_capslock"
    }
  }, [_vm._v("keyboard_capslock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_hide"
    }
  }, [_vm._v("keyboard_hide")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_return"
    }
  }, [_vm._v("keyboard_return")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_tab"
    }
  }, [_vm._v("keyboard_tab")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "keyboard_voice"
    }
  }, [_vm._v("keyboard_voice")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "kitchen"
    }
  }, [_vm._v("kitchen")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "label"
    }
  }, [_vm._v("label")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "label_outline"
    }
  }, [_vm._v("label_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "landscape"
    }
  }, [_vm._v("landscape")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "language"
    }
  }, [_vm._v("language")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "laptop"
    }
  }, [_vm._v("laptop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "laptop_chromebook"
    }
  }, [_vm._v("laptop_chromebook")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "laptop_mac"
    }
  }, [_vm._v("laptop_mac")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "laptop_windows"
    }
  }, [_vm._v("laptop_windows")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "last_page"
    }
  }, [_vm._v("last_page")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "launch"
    }
  }, [_vm._v("launch")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "layers"
    }
  }, [_vm._v("layers")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "layers_clear"
    }
  }, [_vm._v("layers_clear")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "leak_add"
    }
  }, [_vm._v("leak_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "leak_remove"
    }
  }, [_vm._v("leak_remove")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "lens"
    }
  }, [_vm._v("lens")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "library_add"
    }
  }, [_vm._v("library_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "library_books"
    }
  }, [_vm._v("library_books")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "library_music"
    }
  }, [_vm._v("library_music")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "lightbulb_outline"
    }
  }, [_vm._v("lightbulb_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "line_style"
    }
  }, [_vm._v("line_style")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "line_weight"
    }
  }, [_vm._v("line_weight")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "linear_scale"
    }
  }, [_vm._v("linear_scale")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "link"
    }
  }, [_vm._v("link")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "linked_camera"
    }
  }, [_vm._v("linked_camera")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "list"
    }
  }, [_vm._v("list")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "live_help"
    }
  }, [_vm._v("live_help")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "live_tv"
    }
  }, [_vm._v("live_tv")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_activity"
    }
  }, [_vm._v("local_activity")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_airport"
    }
  }, [_vm._v("local_airport")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_atm"
    }
  }, [_vm._v("local_atm")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_bar"
    }
  }, [_vm._v("local_bar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_cafe"
    }
  }, [_vm._v("local_cafe")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_car_wash"
    }
  }, [_vm._v("local_car_wash")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_convenience_store"
    }
  }, [_vm._v("local_convenience_store")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_dining"
    }
  }, [_vm._v("local_dining")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_drink"
    }
  }, [_vm._v("local_drink")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_florist"
    }
  }, [_vm._v("local_florist")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_gas_station"
    }
  }, [_vm._v("local_gas_station")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_grocery_store"
    }
  }, [_vm._v("local_grocery_store")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_hospital"
    }
  }, [_vm._v("local_hospital")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_hotel"
    }
  }, [_vm._v("local_hotel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_laundry_service"
    }
  }, [_vm._v("local_laundry_service")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_library"
    }
  }, [_vm._v("local_library")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_mall"
    }
  }, [_vm._v("local_mall")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_movies"
    }
  }, [_vm._v("local_movies")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_offer"
    }
  }, [_vm._v("local_offer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_parking"
    }
  }, [_vm._v("local_parking")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_pharmacy"
    }
  }, [_vm._v("local_pharmacy")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_phone"
    }
  }, [_vm._v("local_phone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_pizza"
    }
  }, [_vm._v("local_pizza")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_play"
    }
  }, [_vm._v("local_play")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_post_office"
    }
  }, [_vm._v("local_post_office")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_printshop"
    }
  }, [_vm._v("local_printshop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_see"
    }
  }, [_vm._v("local_see")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_shipping"
    }
  }, [_vm._v("local_shipping")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "local_taxi"
    }
  }, [_vm._v("local_taxi")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "location_city"
    }
  }, [_vm._v("location_city")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "location_disabled"
    }
  }, [_vm._v("location_disabled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "location_off"
    }
  }, [_vm._v("location_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "location_on"
    }
  }, [_vm._v("location_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "location_searching"
    }
  }, [_vm._v("location_searching")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "lock"
    }
  }, [_vm._v("lock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "lock_open"
    }
  }, [_vm._v("lock_open")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "lock_outline"
    }
  }, [_vm._v("lock_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks"
    }
  }, [_vm._v("looks")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_3"
    }
  }, [_vm._v("looks_3")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_4"
    }
  }, [_vm._v("looks_4")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_5"
    }
  }, [_vm._v("looks_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_6"
    }
  }, [_vm._v("looks_6")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_one"
    }
  }, [_vm._v("looks_one")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "looks_two"
    }
  }, [_vm._v("looks_two")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "loop"
    }
  }, [_vm._v("loop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "loupe"
    }
  }, [_vm._v("loupe")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "low_priority"
    }
  }, [_vm._v("low_priority")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "loyalty"
    }
  }, [_vm._v("loyalty")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mail"
    }
  }, [_vm._v("mail")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mail_outline"
    }
  }, [_vm._v("mail_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "map"
    }
  }, [_vm._v("map")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "markunread"
    }
  }, [_vm._v("markunread")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "markunread_mailbox"
    }
  }, [_vm._v("markunread_mailbox")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "memory"
    }
  }, [_vm._v("memory")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "menu"
    }
  }, [_vm._v("menu")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "merge_type"
    }
  }, [_vm._v("merge_type")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "message"
    }
  }, [_vm._v("message")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mic"
    }
  }, [_vm._v("mic")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mic_none"
    }
  }, [_vm._v("mic_none")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mic_off"
    }
  }, [_vm._v("mic_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mms"
    }
  }, [_vm._v("mms")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mode_comment"
    }
  }, [_vm._v("mode_comment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mode_edit"
    }
  }, [_vm._v("mode_edit")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "monetization_on"
    }
  }, [_vm._v("monetization_on")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "money_off"
    }
  }, [_vm._v("money_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "monochrome_photos"
    }
  }, [_vm._v("monochrome_photos")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mood"
    }
  }, [_vm._v("mood")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mood_bad"
    }
  }, [_vm._v("mood_bad")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "more"
    }
  }, [_vm._v("more")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "more_horiz"
    }
  }, [_vm._v("more_horiz")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "more_vert"
    }
  }, [_vm._v("more_vert")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "motorcycle"
    }
  }, [_vm._v("motorcycle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "mouse"
    }
  }, [_vm._v("mouse")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "move_to_inbox"
    }
  }, [_vm._v("move_to_inbox")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "movie"
    }
  }, [_vm._v("movie")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "movie_creation"
    }
  }, [_vm._v("movie_creation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "movie_filter"
    }
  }, [_vm._v("movie_filter")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "multiline_chart"
    }
  }, [_vm._v("multiline_chart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "music_note"
    }
  }, [_vm._v("music_note")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "music_video"
    }
  }, [_vm._v("music_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "my_location"
    }
  }, [_vm._v("my_location")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "nature"
    }
  }, [_vm._v("nature")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "nature_people"
    }
  }, [_vm._v("nature_people")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "navigate_before"
    }
  }, [_vm._v("navigate_before")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "navigate_next"
    }
  }, [_vm._v("navigate_next")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "navigation"
    }
  }, [_vm._v("navigation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "near_me"
    }
  }, [_vm._v("near_me")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "network_cell"
    }
  }, [_vm._v("network_cell")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "network_check"
    }
  }, [_vm._v("network_check")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "network_locked"
    }
  }, [_vm._v("network_locked")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "network_wifi"
    }
  }, [_vm._v("network_wifi")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "new_releases"
    }
  }, [_vm._v("new_releases")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "next_week"
    }
  }, [_vm._v("next_week")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "nfc"
    }
  }, [_vm._v("nfc")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "no_encryption"
    }
  }, [_vm._v("no_encryption")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "no_sim"
    }
  }, [_vm._v("no_sim")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "not_interested"
    }
  }, [_vm._v("not_interested")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "note"
    }
  }, [_vm._v("note")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "note_add"
    }
  }, [_vm._v("note_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "notifications"
    }
  }, [_vm._v("notifications")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "notifications_active"
    }
  }, [_vm._v("notifications_active")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "notifications_none"
    }
  }, [_vm._v("notifications_none")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "notifications_off"
    }
  }, [_vm._v("notifications_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "notifications_paused"
    }
  }, [_vm._v("notifications_paused")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "offline_pin"
    }
  }, [_vm._v("offline_pin")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "ondemand_video"
    }
  }, [_vm._v("ondemand_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "opacity"
    }
  }, [_vm._v("opacity")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "open_in_browser"
    }
  }, [_vm._v("open_in_browser")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "open_in_new"
    }
  }, [_vm._v("open_in_new")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "open_with"
    }
  }, [_vm._v("open_with")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pages"
    }
  }, [_vm._v("pages")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pageview"
    }
  }, [_vm._v("pageview")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "palette"
    }
  }, [_vm._v("palette")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pan_tool"
    }
  }, [_vm._v("pan_tool")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "panorama"
    }
  }, [_vm._v("panorama")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "panorama_fish_eye"
    }
  }, [_vm._v("panorama_fish_eye")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "panorama_horizontal"
    }
  }, [_vm._v("panorama_horizontal")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "panorama_vertical"
    }
  }, [_vm._v("panorama_vertical")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "panorama_wide_angle"
    }
  }, [_vm._v("panorama_wide_angle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "party_mode"
    }
  }, [_vm._v("party_mode")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pause"
    }
  }, [_vm._v("pause")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pause_circle_filled"
    }
  }, [_vm._v("pause_circle_filled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pause_circle_outline"
    }
  }, [_vm._v("pause_circle_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "payment"
    }
  }, [_vm._v("payment")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "people"
    }
  }, [_vm._v("people")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "people_outline"
    }
  }, [_vm._v("people_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_camera_mic"
    }
  }, [_vm._v("perm_camera_mic")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_contact_calendar"
    }
  }, [_vm._v("perm_contact_calendar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_data_setting"
    }
  }, [_vm._v("perm_data_setting")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_device_information"
    }
  }, [_vm._v("perm_device_information")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_identity"
    }
  }, [_vm._v("perm_identity")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_media"
    }
  }, [_vm._v("perm_media")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_phone_msg"
    }
  }, [_vm._v("perm_phone_msg")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "perm_scan_wifi"
    }
  }, [_vm._v("perm_scan_wifi")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "person"
    }
  }, [_vm._v("person")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "person_add"
    }
  }, [_vm._v("person_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "person_outline"
    }
  }, [_vm._v("person_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "person_pin"
    }
  }, [_vm._v("person_pin")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "person_pin_circle"
    }
  }, [_vm._v("person_pin_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "personal_video"
    }
  }, [_vm._v("personal_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pets"
    }
  }, [_vm._v("pets")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone"
    }
  }, [_vm._v("phone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_android"
    }
  }, [_vm._v("phone_android")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_bluetooth_speaker"
    }
  }, [_vm._v("phone_bluetooth_speaker")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_forwarded"
    }
  }, [_vm._v("phone_forwarded")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_in_talk"
    }
  }, [_vm._v("phone_in_talk")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_iphone"
    }
  }, [_vm._v("phone_iphone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_locked"
    }
  }, [_vm._v("phone_locked")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_missed"
    }
  }, [_vm._v("phone_missed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phone_paused"
    }
  }, [_vm._v("phone_paused")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink"
    }
  }, [_vm._v("phonelink")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink_erase"
    }
  }, [_vm._v("phonelink_erase")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink_lock"
    }
  }, [_vm._v("phonelink_lock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink_off"
    }
  }, [_vm._v("phonelink_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink_ring"
    }
  }, [_vm._v("phonelink_ring")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "phonelink_setup"
    }
  }, [_vm._v("phonelink_setup")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo"
    }
  }, [_vm._v("photo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_album"
    }
  }, [_vm._v("photo_album")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_camera"
    }
  }, [_vm._v("photo_camera")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_filter"
    }
  }, [_vm._v("photo_filter")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_library"
    }
  }, [_vm._v("photo_library")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_size_select_actual"
    }
  }, [_vm._v("photo_size_select_actual")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_size_select_large"
    }
  }, [_vm._v("photo_size_select_large")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "photo_size_select_small"
    }
  }, [_vm._v("photo_size_select_small")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "picture_as_pdf"
    }
  }, [_vm._v("picture_as_pdf")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "picture_in_picture"
    }
  }, [_vm._v("picture_in_picture")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "picture_in_picture_alt"
    }
  }, [_vm._v("picture_in_picture_alt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pie_chart"
    }
  }, [_vm._v("pie_chart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pie_chart_outlined"
    }
  }, [_vm._v("pie_chart_outlined")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pin_drop"
    }
  }, [_vm._v("pin_drop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "place"
    }
  }, [_vm._v("place")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "play_arrow"
    }
  }, [_vm._v("play_arrow")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "play_circle_filled"
    }
  }, [_vm._v("play_circle_filled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "play_circle_outline"
    }
  }, [_vm._v("play_circle_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "play_for_work"
    }
  }, [_vm._v("play_for_work")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "playlist_add"
    }
  }, [_vm._v("playlist_add")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "playlist_add_check"
    }
  }, [_vm._v("playlist_add_check")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "playlist_play"
    }
  }, [_vm._v("playlist_play")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "plus_one"
    }
  }, [_vm._v("plus_one")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "poll"
    }
  }, [_vm._v("poll")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "polymer"
    }
  }, [_vm._v("polymer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pool"
    }
  }, [_vm._v("pool")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "portable_wifi_off"
    }
  }, [_vm._v("portable_wifi_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "portrait"
    }
  }, [_vm._v("portrait")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "power"
    }
  }, [_vm._v("power")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "power_input"
    }
  }, [_vm._v("power_input")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "power_settings_new"
    }
  }, [_vm._v("power_settings_new")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "pregnant_woman"
    }
  }, [_vm._v("pregnant_woman")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "present_to_all"
    }
  }, [_vm._v("present_to_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "print"
    }
  }, [_vm._v("print")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "priority_high"
    }
  }, [_vm._v("priority_high")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "public"
    }
  }, [_vm._v("public")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "publish"
    }
  }, [_vm._v("publish")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "query_builder"
    }
  }, [_vm._v("query_builder")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "question_answer"
    }
  }, [_vm._v("question_answer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "queue"
    }
  }, [_vm._v("queue")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "queue_music"
    }
  }, [_vm._v("queue_music")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "queue_play_next"
    }
  }, [_vm._v("queue_play_next")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "radio"
    }
  }, [_vm._v("radio")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "radio_button_checked"
    }
  }, [_vm._v("radio_button_checked")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "radio_button_unchecked"
    }
  }, [_vm._v("radio_button_unchecked")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rate_review"
    }
  }, [_vm._v("rate_review")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "receipt"
    }
  }, [_vm._v("receipt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "recent_actors"
    }
  }, [_vm._v("recent_actors")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "record_voice_over"
    }
  }, [_vm._v("record_voice_over")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "redeem"
    }
  }, [_vm._v("redeem")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "redo"
    }
  }, [_vm._v("redo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "refresh"
    }
  }, [_vm._v("refresh")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove"
    }
  }, [_vm._v("remove")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove_circle"
    }
  }, [_vm._v("remove_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove_circle_outline"
    }
  }, [_vm._v("remove_circle_outline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove_from_queue"
    }
  }, [_vm._v("remove_from_queue")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove_red_eye"
    }
  }, [_vm._v("remove_red_eye")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "remove_shopping_cart"
    }
  }, [_vm._v("remove_shopping_cart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "reorder"
    }
  }, [_vm._v("reorder")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "repeat"
    }
  }, [_vm._v("repeat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "repeat_one"
    }
  }, [_vm._v("repeat_one")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "replay"
    }
  }, [_vm._v("replay")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "replay_10"
    }
  }, [_vm._v("replay_10")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "replay_30"
    }
  }, [_vm._v("replay_30")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "replay_5"
    }
  }, [_vm._v("replay_5")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "reply"
    }
  }, [_vm._v("reply")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "reply_all"
    }
  }, [_vm._v("reply_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "report"
    }
  }, [_vm._v("report")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "report_problem"
    }
  }, [_vm._v("report_problem")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "restaurant"
    }
  }, [_vm._v("restaurant")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "restaurant_menu"
    }
  }, [_vm._v("restaurant_menu")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "restore"
    }
  }, [_vm._v("restore")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "restore_page"
    }
  }, [_vm._v("restore_page")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "ring_volume"
    }
  }, [_vm._v("ring_volume")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "room"
    }
  }, [_vm._v("room")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "room_service"
    }
  }, [_vm._v("room_service")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rotate_90_degrees_ccw"
    }
  }, [_vm._v("rotate_90_degrees_ccw")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rotate_left"
    }
  }, [_vm._v("rotate_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rotate_right"
    }
  }, [_vm._v("rotate_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rounded_corner"
    }
  }, [_vm._v("rounded_corner")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "router"
    }
  }, [_vm._v("router")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rowing"
    }
  }, [_vm._v("rowing")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rss_feed"
    }
  }, [_vm._v("rss_feed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "rv_hookup"
    }
  }, [_vm._v("rv_hookup")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "satellite"
    }
  }, [_vm._v("satellite")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "save"
    }
  }, [_vm._v("save")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "scanner"
    }
  }, [_vm._v("scanner")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "schedule"
    }
  }, [_vm._v("schedule")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "school"
    }
  }, [_vm._v("school")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "screen_lock_landscape"
    }
  }, [_vm._v("screen_lock_landscape")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "screen_lock_portrait"
    }
  }, [_vm._v("screen_lock_portrait")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "screen_lock_rotation"
    }
  }, [_vm._v("screen_lock_rotation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "screen_rotation"
    }
  }, [_vm._v("screen_rotation")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "screen_share"
    }
  }, [_vm._v("screen_share")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sd_card"
    }
  }, [_vm._v("sd_card")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sd_storage"
    }
  }, [_vm._v("sd_storage")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "search"
    }
  }, [_vm._v("search")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "security"
    }
  }, [_vm._v("security")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "select_all"
    }
  }, [_vm._v("select_all")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "send"
    }
  }, [_vm._v("send")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sentiment_dissatisfied"
    }
  }, [_vm._v("sentiment_dissatisfied")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sentiment_neutral"
    }
  }, [_vm._v("sentiment_neutral")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sentiment_satisfied"
    }
  }, [_vm._v("sentiment_satisfied")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sentiment_very_dissatisfied"
    }
  }, [_vm._v("sentiment_very_dissatisfied")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sentiment_very_satisfied"
    }
  }, [_vm._v("sentiment_very_satisfied")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings"
    }
  }, [_vm._v("settings")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_applications"
    }
  }, [_vm._v("settings_applications")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_backup_restore"
    }
  }, [_vm._v("settings_backup_restore")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_bluetooth"
    }
  }, [_vm._v("settings_bluetooth")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_brightness"
    }
  }, [_vm._v("settings_brightness")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_cell"
    }
  }, [_vm._v("settings_cell")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_ethernet"
    }
  }, [_vm._v("settings_ethernet")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_input_antenna"
    }
  }, [_vm._v("settings_input_antenna")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_input_component"
    }
  }, [_vm._v("settings_input_component")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_input_composite"
    }
  }, [_vm._v("settings_input_composite")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_input_hdmi"
    }
  }, [_vm._v("settings_input_hdmi")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_input_svideo"
    }
  }, [_vm._v("settings_input_svideo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_overscan"
    }
  }, [_vm._v("settings_overscan")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_phone"
    }
  }, [_vm._v("settings_phone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_power"
    }
  }, [_vm._v("settings_power")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_remote"
    }
  }, [_vm._v("settings_remote")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_system_daydream"
    }
  }, [_vm._v("settings_system_daydream")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "settings_voice"
    }
  }, [_vm._v("settings_voice")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "share"
    }
  }, [_vm._v("share")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shop"
    }
  }, [_vm._v("shop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shop_two"
    }
  }, [_vm._v("shop_two")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shopping_basket"
    }
  }, [_vm._v("shopping_basket")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shopping_cart"
    }
  }, [_vm._v("shopping_cart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "short_text"
    }
  }, [_vm._v("short_text")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "show_chart"
    }
  }, [_vm._v("show_chart")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "shuffle"
    }
  }, [_vm._v("shuffle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_cellular_4_bar"
    }
  }, [_vm._v("signal_cellular_4_bar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_cellular_connected_no_internet_4_bar"
    }
  }, [_vm._v("signal_cellular_connected_no_internet_4_bar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_cellular_no_sim"
    }
  }, [_vm._v("signal_cellular_no_sim")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_cellular_null"
    }
  }, [_vm._v("signal_cellular_null")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_cellular_off"
    }
  }, [_vm._v("signal_cellular_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_wifi_4_bar"
    }
  }, [_vm._v("signal_wifi_4_bar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_wifi_4_bar_lock"
    }
  }, [_vm._v("signal_wifi_4_bar_lock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "signal_wifi_off"
    }
  }, [_vm._v("signal_wifi_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sim_card"
    }
  }, [_vm._v("sim_card")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sim_card_alert"
    }
  }, [_vm._v("sim_card_alert")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "skip_next"
    }
  }, [_vm._v("skip_next")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "skip_previous"
    }
  }, [_vm._v("skip_previous")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "slideshow"
    }
  }, [_vm._v("slideshow")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "slow_motion_video"
    }
  }, [_vm._v("slow_motion_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "smartphone"
    }
  }, [_vm._v("smartphone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "smoke_free"
    }
  }, [_vm._v("smoke_free")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "smoking_rooms"
    }
  }, [_vm._v("smoking_rooms")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sms"
    }
  }, [_vm._v("sms")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sms_failed"
    }
  }, [_vm._v("sms_failed")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "snooze"
    }
  }, [_vm._v("snooze")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sort"
    }
  }, [_vm._v("sort")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sort_by_alpha"
    }
  }, [_vm._v("sort_by_alpha")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "spa"
    }
  }, [_vm._v("spa")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "space_bar"
    }
  }, [_vm._v("space_bar")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "speaker"
    }
  }, [_vm._v("speaker")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "speaker_group"
    }
  }, [_vm._v("speaker_group")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "speaker_notes"
    }
  }, [_vm._v("speaker_notes")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "speaker_notes_off"
    }
  }, [_vm._v("speaker_notes_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "speaker_phone"
    }
  }, [_vm._v("speaker_phone")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "spellcheck"
    }
  }, [_vm._v("spellcheck")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "star"
    }
  }, [_vm._v("star")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "star_border"
    }
  }, [_vm._v("star_border")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "star_half"
    }
  }, [_vm._v("star_half")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stars"
    }
  }, [_vm._v("stars")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stay_current_landscape"
    }
  }, [_vm._v("stay_current_landscape")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stay_current_portrait"
    }
  }, [_vm._v("stay_current_portrait")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stay_primary_landscape"
    }
  }, [_vm._v("stay_primary_landscape")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stay_primary_portrait"
    }
  }, [_vm._v("stay_primary_portrait")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stop"
    }
  }, [_vm._v("stop")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "stop_screen_share"
    }
  }, [_vm._v("stop_screen_share")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "storage"
    }
  }, [_vm._v("storage")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "store"
    }
  }, [_vm._v("store")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "store_mall_directory"
    }
  }, [_vm._v("store_mall_directory")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "straighten"
    }
  }, [_vm._v("straighten")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "streetview"
    }
  }, [_vm._v("streetview")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "strikethrough_s"
    }
  }, [_vm._v("strikethrough_s")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "style"
    }
  }, [_vm._v("style")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subdirectory_arrow_left"
    }
  }, [_vm._v("subdirectory_arrow_left")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subdirectory_arrow_right"
    }
  }, [_vm._v("subdirectory_arrow_right")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subject"
    }
  }, [_vm._v("subject")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subscriptions"
    }
  }, [_vm._v("subscriptions")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subtitles"
    }
  }, [_vm._v("subtitles")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "subway"
    }
  }, [_vm._v("subway")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "supervisor_account"
    }
  }, [_vm._v("supervisor_account")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "surround_sound"
    }
  }, [_vm._v("surround_sound")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "swap_calls"
    }
  }, [_vm._v("swap_calls")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "swap_horiz"
    }
  }, [_vm._v("swap_horiz")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "swap_vert"
    }
  }, [_vm._v("swap_vert")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "swap_vertical_circle"
    }
  }, [_vm._v("swap_vertical_circle")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "switch_camera"
    }
  }, [_vm._v("switch_camera")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "switch_video"
    }
  }, [_vm._v("switch_video")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sync"
    }
  }, [_vm._v("sync")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sync_disabled"
    }
  }, [_vm._v("sync_disabled")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "sync_problem"
    }
  }, [_vm._v("sync_problem")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "system_update"
    }
  }, [_vm._v("system_update")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "system_update_alt"
    }
  }, [_vm._v("system_update_alt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tab"
    }
  }, [_vm._v("tab")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tab_unselected"
    }
  }, [_vm._v("tab_unselected")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tablet"
    }
  }, [_vm._v("tablet")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tablet_android"
    }
  }, [_vm._v("tablet_android")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tablet_mac"
    }
  }, [_vm._v("tablet_mac")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tag_faces"
    }
  }, [_vm._v("tag_faces")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tap_and_play"
    }
  }, [_vm._v("tap_and_play")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "terrain"
    }
  }, [_vm._v("terrain")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "text_fields"
    }
  }, [_vm._v("text_fields")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "text_format"
    }
  }, [_vm._v("text_format")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "textsms"
    }
  }, [_vm._v("textsms")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "texture"
    }
  }, [_vm._v("texture")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "theaters"
    }
  }, [_vm._v("theaters")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "thumb_down"
    }
  }, [_vm._v("thumb_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "thumb_up"
    }
  }, [_vm._v("thumb_up")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "thumbs_up_down"
    }
  }, [_vm._v("thumbs_up_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "time_to_leave"
    }
  }, [_vm._v("time_to_leave")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timelapse"
    }
  }, [_vm._v("timelapse")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timeline"
    }
  }, [_vm._v("timeline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timer"
    }
  }, [_vm._v("timer")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timer_10"
    }
  }, [_vm._v("timer_10")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timer_3"
    }
  }, [_vm._v("timer_3")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "timer_off"
    }
  }, [_vm._v("timer_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "title"
    }
  }, [_vm._v("title")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "toc"
    }
  }, [_vm._v("toc")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "today"
    }
  }, [_vm._v("today")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "toll"
    }
  }, [_vm._v("toll")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tonality"
    }
  }, [_vm._v("tonality")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "touch_app"
    }
  }, [_vm._v("touch_app")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "toys"
    }
  }, [_vm._v("toys")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "track_changes"
    }
  }, [_vm._v("track_changes")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "traffic"
    }
  }, [_vm._v("traffic")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "train"
    }
  }, [_vm._v("train")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tram"
    }
  }, [_vm._v("tram")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "transfer_within_a_station"
    }
  }, [_vm._v("transfer_within_a_station")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "transform"
    }
  }, [_vm._v("transform")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "translate"
    }
  }, [_vm._v("translate")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "trending_down"
    }
  }, [_vm._v("trending_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "trending_flat"
    }
  }, [_vm._v("trending_flat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "trending_up"
    }
  }, [_vm._v("trending_up")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tune"
    }
  }, [_vm._v("tune")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "turned_in"
    }
  }, [_vm._v("turned_in")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "turned_in_not"
    }
  }, [_vm._v("turned_in_not")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "tv"
    }
  }, [_vm._v("tv")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "unarchive"
    }
  }, [_vm._v("unarchive")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "undo"
    }
  }, [_vm._v("undo")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "unfold_less"
    }
  }, [_vm._v("unfold_less")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "unfold_more"
    }
  }, [_vm._v("unfold_more")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "update"
    }
  }, [_vm._v("update")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "usb"
    }
  }, [_vm._v("usb")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "verified_user"
    }
  }, [_vm._v("verified_user")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vertical_align_bottom"
    }
  }, [_vm._v("vertical_align_bottom")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vertical_align_center"
    }
  }, [_vm._v("vertical_align_center")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vertical_align_top"
    }
  }, [_vm._v("vertical_align_top")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vibration"
    }
  }, [_vm._v("vibration")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "video_call"
    }
  }, [_vm._v("video_call")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "video_label"
    }
  }, [_vm._v("video_label")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "video_library"
    }
  }, [_vm._v("video_library")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "videocam"
    }
  }, [_vm._v("videocam")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "videocam_off"
    }
  }, [_vm._v("videocam_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "videogame_asset"
    }
  }, [_vm._v("videogame_asset")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_agenda"
    }
  }, [_vm._v("view_agenda")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_array"
    }
  }, [_vm._v("view_array")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_carousel"
    }
  }, [_vm._v("view_carousel")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_column"
    }
  }, [_vm._v("view_column")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_comfy"
    }
  }, [_vm._v("view_comfy")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_compact"
    }
  }, [_vm._v("view_compact")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_day"
    }
  }, [_vm._v("view_day")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_headline"
    }
  }, [_vm._v("view_headline")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_list"
    }
  }, [_vm._v("view_list")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_module"
    }
  }, [_vm._v("view_module")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_quilt"
    }
  }, [_vm._v("view_quilt")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_stream"
    }
  }, [_vm._v("view_stream")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "view_week"
    }
  }, [_vm._v("view_week")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vignette"
    }
  }, [_vm._v("vignette")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "visibility"
    }
  }, [_vm._v("visibility")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "visibility_off"
    }
  }, [_vm._v("visibility_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "voice_chat"
    }
  }, [_vm._v("voice_chat")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "voicemail"
    }
  }, [_vm._v("voicemail")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "volume_down"
    }
  }, [_vm._v("volume_down")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "volume_mute"
    }
  }, [_vm._v("volume_mute")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "volume_off"
    }
  }, [_vm._v("volume_off")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "volume_up"
    }
  }, [_vm._v("volume_up")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vpn_key"
    }
  }, [_vm._v("vpn_key")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "vpn_lock"
    }
  }, [_vm._v("vpn_lock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wallpaper"
    }
  }, [_vm._v("wallpaper")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "warning"
    }
  }, [_vm._v("warning")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "watch"
    }
  }, [_vm._v("watch")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "watch_later"
    }
  }, [_vm._v("watch_later")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wb_auto"
    }
  }, [_vm._v("wb_auto")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wb_cloudy"
    }
  }, [_vm._v("wb_cloudy")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wb_incandescent"
    }
  }, [_vm._v("wb_incandescent")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wb_iridescent"
    }
  }, [_vm._v("wb_iridescent")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wb_sunny"
    }
  }, [_vm._v("wb_sunny")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wc"
    }
  }, [_vm._v("wc")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "web"
    }
  }, [_vm._v("web")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "web_asset"
    }
  }, [_vm._v("web_asset")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "weekend"
    }
  }, [_vm._v("weekend")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "whatshot"
    }
  }, [_vm._v("whatshot")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "widgets"
    }
  }, [_vm._v("widgets")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wifi"
    }
  }, [_vm._v("wifi")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wifi_lock"
    }
  }, [_vm._v("wifi_lock")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wifi_tethering"
    }
  }, [_vm._v("wifi_tethering")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "work"
    }
  }, [_vm._v("work")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "wrap_text"
    }
  }, [_vm._v("wrap_text")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "youtube_searched_for"
    }
  }, [_vm._v("youtube_searched_for")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "zoom_in"
    }
  }, [_vm._v("zoom_in")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "zoom_out"
    }
  }, [_vm._v("zoom_out")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "zoom_out_map"
    }
  }, [_vm._v("zoom_out_map")])]), _vm._v(" "), _c('label', {
    attrs: {
      "for": "icon"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.icon')))]), _vm._v(" "), _c('p', {
    domProps: {
      "innerHTML": _vm._s('<i>' + _vm.$t('tooltips.material_icons_list') + '</i>')
    }
  })])])])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('h5', [_vm._v(_vm._s(_vm.$t('labels.intention')))]), _vm._v(" "), _c('p', [_vm._v(_vm._s(_vm.$t('tooltips.generic_components.intentions')))])])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    attrs: {
      "type": "button"
    },
    on: {
      "click": _vm.add_intention
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.add_intention'))), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("add")])])])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_vm._l((_vm.component_intentions), function(intention, index) {
    return [_c('div', {
      staticClass: "input-field col s12 m5 l5"
    }, [_c('select', {
      attrs: {
        "name": "default_intention_intention[]",
        "id": "default_intention_intention"
      }
    }, [_c('option', {
      attrs: {
        "value": "increase"
      },
      domProps: {
        "selected": intention.intention == 'increase'
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.increases')) + "\n                                        ")]), _vm._v(" "), _c('option', {
      attrs: {
        "value": "decrease"
      },
      domProps: {
        "selected": intention.intention == 'decrease'
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.decreases')) + "\n                                        ")])]), _vm._v(" "), _c('label', {
      attrs: {
        "for": "default_intention_intention"
      }
    }, [_vm._v("\n                                        " + _vm._s(_vm.$t('labels.intention')) + "\n                                    ")])]), _vm._v(" "), _c('div', {
      staticClass: "input-field col s12 m5 l5"
    }, [_c('select', {
      attrs: {
        "name": "default_intention_type[]",
        "id": "default_intention_type"
      }
    }, _vm._l((_vm.sensorreadingTypes), function(srt, index) {
      return _c('option', {
        domProps: {
          "value": srt,
          "selected": intention.type == srt
        }
      }, [_vm._v(_vm._s(_vm.$t('labels.' + srt)) + "\n                                        ")])
    })), _vm._v(" "), _c('label', {
      attrs: {
        "for": "default_intention_type"
      }
    }, [_vm._v(_vm._s(_vm.$tc('components.logical_sensors', 1)))])]), _vm._v(" "), _c('div', {
      staticClass: "input-field col s2 m2 l2"
    }, [_c('a', {
      staticClass: "red-text",
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.component_intentions.splice(index, 1)
        }
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("delete")])])])]
  })], 2)])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12 m6 l6"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('h5', [_vm._v(_vm._s(_vm.$t('labels.properties')))]), _vm._v(" "), _c('p', [_vm._v(_vm._s(_vm.$t('tooltips.generic_components.property_templates')))])])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    attrs: {
      "type": "button"
    },
    on: {
      "click": _vm.add_property
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.add_property')) + "\n                                        "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("add")])])]), _vm._v(" "), _c('div', {
    staticClass: "col s12",
    attrs: {
      "id": "generic_component_type_create_props"
    }
  }, _vm._l((_vm.component_properties), function(item, index) {
    return _c('div', {
      staticClass: "row"
    }, [_c('div', {
      staticClass: "input-field col s10 m10 l10"
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (item.name),
        expression: "item.name"
      }],
      attrs: {
        "type": "text",
        "name": "property_name[]"
      },
      domProps: {
        "value": (item.name)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          item.name = $event.target.value
        }
      }
    })]), _vm._v(" "), _c('div', {
      staticClass: "input-field col s2 m2 l2"
    }, [_c('a', {
      staticClass: "red-text",
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.component_properties.splice(index, 1)
        }
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("delete")])])])])
  }))])]), _vm._v(" "), _c('div', {
    staticClass: "col s12 m6 l6"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('h5', [_vm._v(_vm._s(_vm.$t('labels.state')))]), _vm._v(" "), _c('p', {
    domProps: {
      "innerHTML": _vm._s(_vm.$t('tooltips.generic_components.state_templates'))
    }
  })])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    attrs: {
      "type": "button"
    },
    on: {
      "click": _vm.add_state
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.add_state')) + "\n                                        "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("add")])])]), _vm._v(" "), _c('div', {
    staticClass: "col s12",
    attrs: {
      "id": "generic_component_state_create_props"
    }
  }, _vm._l((_vm.component_states), function(item, index) {
    return _c('div', {
      staticClass: "row"
    }, [_c('div', {
      staticClass: "input-field col s2 m2 l2"
    }, [_c('input', {
      attrs: {
        "name": "default_running_state",
        "id": 'default_running_state_' + item.name,
        "type": "radio"
      },
      domProps: {
        "value": item.name,
        "checked": _vm.default_running_state == item.name
      },
      on: {
        "click": function($event) {
          _vm.default_running_state = item.name
        }
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": 'default_running_state_' + item.name,
        "data-delay": "50",
        "data-html": "true",
        "data-tooltip": '<div style=\'max-width: 300px\'>' + _vm.$t('tooltips.generic_components.type_default_running_state') + '</div>'
      }
    })]), _vm._v(" "), _c('div', {
      staticClass: "input-field col s8 m8 l8"
    }, [_c('input', {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: (item.name),
        expression: "item.name"
      }],
      attrs: {
        "type": "text",
        "name": "state[]"
      },
      domProps: {
        "value": (item.name)
      },
      on: {
        "input": function($event) {
          if ($event.target.composing) { return; }
          item.name = $event.target.value
        }
      }
    })]), _vm._v(" "), _c('div', {
      staticClass: "input-field col s2 m2 l2"
    }, [_c('a', {
      staticClass: "red-text",
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.component_states.splice(index, 1)
        }
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("delete")])])])])
  }))])])])]), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    attrs: {
      "type": "submit"
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.next')) + "\n                                "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("send")])])])])])])])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-34c7c76d", module.exports)
  }
}

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight"
  }, [_c('thead', [_c('tr', [_c('th', [_vm._v("\n                    " + _vm._s(_vm.$tc('components.animals', 1)) + "\n                ")]), _vm._v(" "), _c('th', [_vm._v("\n                    " + _vm._s(_vm.$t('labels.scheduled')) + "\n                ")])])]), _vm._v(" "), _c('tbody', _vm._l((_vm.animals), function(animal) {
    return _c('tr', [_c('td', [_c('a', {
      attrs: {
        "href": '/animals/' + animal.id
      }
    }, [_vm._v(_vm._s(animal.display_name))])]), _vm._v(" "), _c('td', _vm._l((_vm.get_animal_weighing_schedules(animal.id)), function(schedule) {
      return _c('span', [_c('a', {
        attrs: {
          "href": '/animals/' + animal.id + '/weighing_schedules/' + schedule.id + '/edit'
        }
      }, [_vm._v("\n                            " + _vm._s(schedule.interval_days) + ":\n                        ")]), _vm._v(" "), _c('i', [_vm._v(_vm._s(schedule.timestamps.next) + " (" + _vm._s(schedule.due_days) + " " + _vm._s(_vm.$tc('units.days', schedule.due_days)) + ")")])])
    }))])
  }))])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-391af5f4", module.exports)
  }
}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses
  }, [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "card"
  }, [_c('form', {
    attrs: {
      "action": _vm.formUri,
      "data-method": "PUT"
    }
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('span', {
    staticClass: "activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$t('labels.properties')))])])]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('strong', [_vm._v(_vm._s(_vm.$t('labels.bus')) + "\n                        "), _c('a', {
    staticClass: "material-icons black-text tooltipped",
    attrs: {
      "href": "#",
      "data-position": "top",
      "data-delay": "50",
      "data-html": "true",
      "data-tooltip": '<div style=\'max-width: 300px\'>' +
        _vm.$t('tooltips.bus_type_edit_form') + '</div>'
    }
  }, [_vm._v("\n                            info_outline\n                        ")])]), _vm._v(" "), _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12"
  }, [_c('select', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.bus_type),
      expression: "bus_type"
    }],
    staticClass: "browser-default",
    attrs: {
      "name": "ControlunitConnectivity::bus_type",
      "id": "bus_type"
    },
    on: {
      "change": function($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {
          return o.selected
        }).map(function(o) {
          var val = "_value" in o ? o._value : o.value;
          return val
        });
        _vm.bus_type = $event.target.multiple ? $$selectedVal : $$selectedVal[0]
      }
    }
  }, [_c('option'), _vm._v(" "), _c('option', {
    attrs: {
      "value": "gpio"
    }
  }, [_vm._v("GPIO")]), _vm._v(" "), _c('option', {
    attrs: {
      "value": "i2c"
    }
  }, [_vm._v("I2C")])])])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.bus_type == 'i2c'),
      expression: "bus_type == 'i2c'"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12 m6 l4"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.i2c_address),
      expression: "i2c_address"
    }],
    attrs: {
      "type": "text",
      "id": "i2c_address",
      "placeholder": _vm.$t('labels.i2c_address'),
      "name": "ControlunitConnectivity::i2c_address"
    },
    domProps: {
      "value": (_vm.i2c_address)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.i2c_address = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "i2c_address"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.i2c_address')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m6 l4"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.i2c_multiplexer_address),
      expression: "i2c_multiplexer_address"
    }],
    attrs: {
      "type": "text",
      "id": "i2c_multiplexer_address",
      "placeholder": _vm.$t('labels.i2c_multiplexer_address'),
      "name": "ControlunitConnectivity::i2c_multiplexer_address"
    },
    domProps: {
      "value": (_vm.i2c_multiplexer_address)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.i2c_multiplexer_address = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "i2c_multiplexer_address"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.i2c_multiplexer_address')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m6 l4"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.i2c_multiplexer_port),
      expression: "i2c_multiplexer_port"
    }],
    attrs: {
      "type": "text",
      "id": "i2c_multiplexer_port",
      "placeholder": _vm.$t('labels.i2c_multiplexer_port'),
      "name": "ControlunitConnectivity::i2c_multiplexer_port"
    },
    domProps: {
      "value": (_vm.i2c_multiplexer_port)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.i2c_multiplexer_port = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "i2c_multiplexer_port"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.i2c_multiplexer_port')))])])]), _vm._v(" "), _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.bus_type == 'gpio'),
      expression: "bus_type == 'gpio'"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12 m6 l6"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.gpio_pin),
      expression: "gpio_pin"
    }],
    attrs: {
      "type": "text",
      "id": "gpio_pin",
      "placeholder": _vm.$t('labels.gpio_pin'),
      "name": "ControlunitConnectivity::gpio_pin"
    },
    domProps: {
      "value": (_vm.gpio_pin)
    },
    on: {
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.gpio_pin = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "gpio_pin"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.gpio_pin')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m6 l6"
  }, [_c('select', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.gpio_default_high),
      expression: "gpio_default_high"
    }],
    attrs: {
      "id": "gpio_default_high",
      "name": "ControlunitConnectivity::gpio_default_high"
    },
    on: {
      "change": function($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function(o) {
          return o.selected
        }).map(function(o) {
          var val = "_value" in o ? o._value : o.value;
          return val
        });
        _vm.gpio_default_high = $event.target.multiple ? $$selectedVal : $$selectedVal[0]
      }
    }
  }, [_c('option', {
    domProps: {
      "value": false
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.no')))]), _vm._v(" "), _c('option', {
    domProps: {
      "value": true
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.yes')))])]), _vm._v(" "), _c('label', {
    attrs: {
      "for": "gpio_default_high"
    }
  }, [_vm._v("\n                                " + _vm._s(_vm.$t('labels.gpio_default_high')) + "\n                                "), _c('a', {
    staticClass: "material-icons black-text tooltipped",
    attrs: {
      "href": "#",
      "data-position": "top",
      "data-delay": "50",
      "data-html": "true",
      "data-tooltip": '<div style=\'max-width: 300px\'>' +
        _vm.$t('tooltips.gpio_default_high') + '</div>'
    }
  }, [_vm._v("\n                                    info_outline\n                                ")])])])])]), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "input-field col s12"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    attrs: {
      "type": "submit"
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.save')) + "\n                                "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("save")])])])])])])])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-40caa194", module.exports)
  }
}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "physical_sensor"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('physical_sensors.name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.physical_sensors', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'physical_sensor.name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'physical_sensor.name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['physical_sensor.name']),
      expression: "filter['physical_sensor.name']"
    }],
    attrs: {
      "id": "filter_physical_sensor",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['physical_sensor.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'physical_sensor.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['physical_sensor.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_physical_sensor"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-med-and-down",
    attrs: {
      "data-field": "terrarium"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('terraria.display_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.terraria', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.terrarium.display_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'physical_sensor.terrarium.display_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'physical_sensor.terrarium.display_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'physical_sensor.terrarium.display_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['physical_sensor.terrarium.display_name']),
      expression: "filter['physical_sensor.terrarium.display_name']"
    }],
    attrs: {
      "id": "filter_terrarium",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['physical_sensor.terrarium.display_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'physical_sensor.terrarium.display_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['physical_sensor.terrarium.display_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_terrarium"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "type"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('type')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.type')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'type' && _vm.order.direction == 'asc'),
      expression: "order.field == 'type' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'type' && _vm.order.direction == 'desc'),
      expression: "order.field == 'type' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.type),
      expression: "filter.type"
    }],
    attrs: {
      "id": "filter_type",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.type)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.type = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_type"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "rawvalue"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('rawvalue')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.rawvalue', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'rawvalue' && _vm.order.direction == 'asc'),
      expression: "order.field == 'rawvalue' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'rawvalue' && _vm.order.direction == 'desc'),
      expression: "order.field == 'rawvalue' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.logical_sensors), function(logical_sensor) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("memory")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/logical_sensors/' + logical_sensor.id
      }
    }, [_vm._v(_vm._s(logical_sensor.name))])])]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(logical_sensor.physical_sensor) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("memory")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/physical_sensors/' + logical_sensor.physical_sensor.id
      }
    }, [_vm._v(_vm._s(logical_sensor.physical_sensor.name))])]) : _vm._e()]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-med-and-down"
    }, [(logical_sensor.physical_sensor && logical_sensor.physical_sensor.terrarium) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("video_label")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/terraria/' + logical_sensor.physical_sensor.terrarium.id
      }
    }, [_vm._v(_vm._s(logical_sensor.physical_sensor.terrarium.display_name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_vm._v("\n                            " + _vm._s(logical_sensor.type) + "\n                        ")]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [_c('span', [_vm._v(_vm._s(Math.round(logical_sensor.rawvalue, 2)))]), _vm._v(" "), (_vm.get_accuracy_adjustment(logical_sensor) !== null) ? _c('span', [(_vm.get_accuracy_adjustment(logical_sensor) > 0) ? _c('span', [_c('span', {
      staticClass: "green-text darken-2"
    }, [_vm._v("(+" + _vm._s(_vm.get_accuracy_adjustment(logical_sensor)) + ")")])]) : _c('span', [_c('span', {
      staticClass: "red darken-2"
    }, [_vm._v("(" + _vm._s(_vm.get_accuracy_adjustment(logical_sensor)) + ")")])])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/logical_sensors/' + logical_sensor.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', [_vm._v("\n                            " + _vm._s(_vm.$t('labels.rawlimitlo')) + ": " + _vm._s(logical_sensor.rawvalue_lowerlimit)), _c('br'), _vm._v("\n                            " + _vm._s(_vm.$t('labels.rawlimithi')) + ": " + _vm._s(logical_sensor.rawvalue_upperlimit) + "\n                        ")]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(logical_sensor.physical_sensor.controlunit) ? _c('span', [_vm._v("\n                                " + _vm._s(_vm.$tc('components.controlunits', 1)) + ":\n                                "), _c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + logical_sensor.physical_sensor.controlunit.id
      }
    }, [_vm._v(_vm._s(logical_sensor.physical_sensor.controlunit.name))])]) : _vm._e(), _vm._v(" "), _c('br'), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.model')) + ": " + _vm._s(logical_sensor.physical_sensor.model))])]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-med-and-down"
    }, [(logical_sensor.physical_sensor.terrarium) ? _c('span', [_vm._v("\n                                " + _vm._s(_vm.$tc('components.terraria', 1)) + " " + _vm._s(_vm.$t('labels.temperature_celsius')) + ": " + _vm._s(logical_sensor.physical_sensor.terrarium.cooked_temperature_celsius) + "°C"), _c('br'), _vm._v("\n                                " + _vm._s(_vm.$tc('components.terraria', 1)) + " " + _vm._s(_vm.$t('labels.humidity_percent')) + ": " + _vm._s(logical_sensor.physical_sensor.terrarium.cooked_humidity_percent) + "%\n                            ")]) : _vm._e()]), _vm._v(" "), _c('td'), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }), _vm._v(" "), _c('td')])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-40cf11c6", module.exports)
  }
}

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight"
  }, [_c('thead', [_c('tr', [_c('th', {
    staticClass: "hide-on-med-and-down",
    attrs: {
      "data-field": "id"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$tc('components.animals', 1)) + "\n                ")]), _vm._v(" "), _vm._l((_vm.feeding_types), function(type) {
    return _c('th', [_vm._v("\n                    " + _vm._s(type.name) + "\n                ")])
  })], 2)]), _vm._v(" "), _c('tbody', _vm._l((_vm.animals), function(animal) {
    return _c('tr', [_c('td', [_c('a', {
      attrs: {
        "href": '/animals/' + animal.id
      }
    }, [_vm._v(_vm._s(animal.display_name))])]), _vm._v(" "), _vm._l((_vm.feeding_types), function(type) {
      return _c('td', _vm._l((_vm.get_animal_feeding_schedules_of_type(animal.id, type.name)), function(schedule) {
        return _c('span', [_c('a', {
          attrs: {
            "href": '/animals/' + animal.id + '/feeding_schedules/' + schedule.id + '/edit'
          }
        }, [_vm._v(_vm._s(schedule.interval_days))]), _vm._v(" "), _c('i', [_vm._v("(" + _vm._s(schedule.due_days) + " " + _vm._s(_vm.$tc('units.days', schedule.due_days)) + ")")])])
      }))
    })], 2)
  }))])])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-4412c114", module.exports)
  }
}

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "controlunit"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('controlunit')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'asc'),
      expression: "order.field == 'controlunit' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'desc'),
      expression: "order.field == 'controlunit' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['controlunit.name']),
      expression: "filter['controlunit.name']"
    }],
    attrs: {
      "id": "filter_controlunit",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['controlunit.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'controlunit.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['controlunit.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_controlunit"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.pumps), function(pump) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("rotate_right")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/pumps/' + pump.id
      }
    }, [_vm._v(_vm._s(pump.name))])])]), _vm._v(" "), _c('td', [(pump.controlunit) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + pump.controlunit.id
      }
    }, [_vm._v(_vm._s(pump.controlunit.name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/pumps/' + pump.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', {
      attrs: {
        "colspan": "3"
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$tc('components.valves', 2)) + ":\n                            "), _vm._l((pump.valves), function(valve, index) {
      return _c('span', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("transform")]), _vm._v(" "), _c('a', {
        attrs: {
          "href": '/valves/' + valve.id
        }
      }, [_vm._v(_vm._s(valve.name))]), _vm._v(" "), (index < pump.valves.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    })], 2)])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-48c31d4e", module.exports)
  }
}

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(_vm.ShowFilterForm === true) ? _c('div', [_c('div', {
    staticClass: "row",
    staticStyle: {
      "margin-bottom": "0"
    }
  }, [_c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.from'),
      "name": "filter_from",
      "id": 'filter_from_' + _vm.id,
      "data-default": _vm.FilterFromDate
    },
    domProps: {
      "value": _vm.FilterFromDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_from_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.from')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.to'),
      "name": "filter_to",
      "id": 'filter_to_' + _vm.id,
      "data-default": _vm.FilterToDate
    },
    domProps: {
      "value": _vm.FilterToDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_to_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.to')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m4 l4"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    on: {
      "click": _vm.build
    }
  }, [_vm._v(_vm._s(_vm.$t('buttons.loadgraph')))])])])]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "center",
    staticStyle: {
      "display": "none"
    },
    attrs: {
      "id": 'chartjs_' + _vm.id + '_loading'
    }
  }, [_c('loading-indicator', {
    attrs: {
      "size": 100
    }
  })], 1), _vm._v(" "), _c('canvas', {
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "id": 'chartjs_' + _vm.id
    }
  })])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-4dca3765", module.exports)
  }
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.controlunits), function(controlunit) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.controlunits", 2)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(controlunit.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p', [_vm._v("\n                        " + _vm._s(_vm.$t('labels.last_heartbeat')) + ":\n                        "), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (controlunit.timestamps.last_heartbeat_diff.days > 0),
        expression: "controlunit.timestamps.last_heartbeat_diff.days > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": controlunit.timestamps.last_heartbeat
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.days_ago', {
      val: controlunit.timestamps.last_heartbeat_diff.days
    })) + "\n                        ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (controlunit.timestamps.last_heartbeat_diff.days < 1 &&
          controlunit.timestamps.last_heartbeat_diff.hours > 0),
        expression: "controlunit.timestamps.last_heartbeat_diff.days < 1 &&\n                                      controlunit.timestamps.last_heartbeat_diff.hours > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": controlunit.timestamps.last_heartbeat
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.hours_ago', {
      val: controlunit.timestamps.last_heartbeat_diff.hours
    })) + "\n                        ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (controlunit.timestamps.last_heartbeat_diff.days < 1 &&
          controlunit.timestamps.last_heartbeat_diff.hours < 1 &&
          controlunit.timestamps.last_heartbeat_diff.minutes > 1),
        expression: "controlunit.timestamps.last_heartbeat_diff.days < 1 &&\n                                      controlunit.timestamps.last_heartbeat_diff.hours < 1 &&\n                                      controlunit.timestamps.last_heartbeat_diff.minutes > 1"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": controlunit.timestamps.last_heartbeat
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.minutes_ago', {
      val: controlunit.timestamps.last_heartbeat_diff.minutes
    })) + "\n                        ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (controlunit.timestamps.last_heartbeat_diff.days < 1 &&
          controlunit.timestamps.last_heartbeat_diff.hours < 1 &&
          controlunit.timestamps.last_heartbeat_diff.minutes < 2),
        expression: "controlunit.timestamps.last_heartbeat_diff.days < 1 &&\n                                      controlunit.timestamps.last_heartbeat_diff.hours < 1 &&\n                                      controlunit.timestamps.last_heartbeat_diff.minutes < 2"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": controlunit.timestamps.last_heartbeat
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.just_now')) + "\n                        ")]), _vm._v(" "), _c('br')])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/controlunits/' + controlunit.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + controlunit.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.physical_sensors", 2))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _vm._l((controlunit.physical_sensors), function(physical_sensor) {
      return _c('p', [_c('a', {
        attrs: {
          "href": '/physical_sensors/' + physical_sensor.id
        }
      }, [_vm._v(_vm._s(physical_sensor.name))])])
    })], 2)])])])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5035607a", module.exports)
  }
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(!_vm.terrariumId) ? _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.showFilters),
      expression: "showFilters"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s10 m8 l8"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.display_name),
      expression: "filter.display_name"
    }],
    attrs: {
      "id": "filter_display_name",
      "type": "text",
      "placeholder": _vm.$t('labels.display_name')
    },
    domProps: {
      "value": (_vm.filter.display_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.display_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_display_name"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.display_name')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['animals.display_name']),
      expression: "filter['animals.display_name']"
    }],
    attrs: {
      "id": "filter_animal_display_name",
      "type": "text",
      "placeholder": _vm.$tc('components.animal', 1) + ' ' + _vm.$t('labels.display_name')
    },
    domProps: {
      "value": (_vm.filter['animals.display_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'animals.display_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['animals.display_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_animal_display_name"
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.animal', 1)) + " " + _vm._s(_vm.$t('labels.display_name')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['animals.lat_name']),
      expression: "filter['animals.lat_name']"
    }],
    attrs: {
      "id": "filter_animal_latin_name",
      "type": "text",
      "placeholder": _vm.$tc('components.animal', 1) + ' ' + _vm.$t('labels.latin_name')
    },
    domProps: {
      "value": (_vm.filter['animals.lat_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'animals.lat_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['animals.lat_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_animal_latin_name"
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.animal', 1)) + " " + _vm._s(_vm.$t('labels.latin_name')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['animals.common_name']),
      expression: "filter['animals.common_name']"
    }],
    attrs: {
      "id": "filter_animal_common_name",
      "type": "text",
      "placeholder": _vm.$tc('components.animal', 1) + ' ' + _vm.$t('labels.common_name')
    },
    domProps: {
      "value": (_vm.filter['animals.common_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'animals.common_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['animals.common_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_animal_common_name"
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.animal', 1)) + " " + _vm._s(_vm.$t('labels.common_name')))])])]), _vm._v(" "), _c('div', {
    staticClass: "col s2 m4 l4 right-align"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_c('i', {
    staticClass: "material-icons",
    on: {
      "click": _vm.toggle_filters
    }
  }, [_vm._v("filter_list")])])])])]) : _vm._e(), _vm._v(" "), (!_vm.terrariumId) ? _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.showFilters),
      expression: "!showFilters"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12 right-align"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_vm._v("\n                " + _vm._s(_vm.$t('labels.filter')) + "\n                "), _c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_c('i', {
    staticClass: "material-icons",
    on: {
      "click": _vm.toggle_filters
    }
  }, [_vm._v("filter_list")])])])])]) : _vm._e(), _vm._v(" "), _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.terraria), function(terrarium) {
    return _c('div', {
      class: _vm.wrapperClasses
    }, [(terrarium.capabilities.irrigate) ? _c('div', {
      staticClass: "modal",
      attrs: {
        "id": terrarium.id + '_irrigate'
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/terraria/' + terrarium.id + '/action_sequence',
        "data-method": "POST",
        "id": 'form_irrigate_' + terrarium.id
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t('labels.irrigate')))]), _vm._v(" "), _c('p', [_c('input', {
      attrs: {
        "type": "hidden",
        "name": "template",
        "value": "irrigate"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "runonce",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "schedule_now",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "id": 'duration_minutes_irrigate_' + terrarium.id,
        "type": "text",
        "placeholder": _vm.$tc('units.minutes', 2),
        "name": "duration_minutes",
        "value": "1"
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": 'duration_minutes_irrigate_' + terrarium.id
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.duration')) + " " + _vm._s((_vm.$tc('units.minutes', 2))))])])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [_c('button', {
      staticClass: "modal-action modal-close btn waves-effect waves-green",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.start')))])])])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.ventilate) ? _c('div', {
      staticClass: "modal",
      attrs: {
        "id": terrarium.id + '_ventilate'
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/terraria/' + terrarium.id + '/action_sequence',
        "data-method": "POST",
        "id": 'form_ventilate_' + terrarium.id
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t('labels.ventilate')))]), _vm._v(" "), _c('p', [_c('input', {
      attrs: {
        "type": "hidden",
        "name": "template",
        "value": "ventilation"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "runonce",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "schedule_now",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "id": 'duration_minutes_ventilate_' + terrarium.id,
        "type": "text",
        "placeholder": _vm.$tc('units.minutes', 2),
        "name": "duration_minutes",
        "value": "3"
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": 'duration_minutes_ventilate_' + terrarium.id
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.duration')) + " " + _vm._s((_vm.$tc('units.minutes', 2))))])])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [_c('button', {
      staticClass: "modal-action modal-close btn waves-effect waves-green",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.start')))])])])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.heat_up) ? _c('div', {
      staticClass: "modal",
      attrs: {
        "id": terrarium.id + '_heat_up'
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/terraria/' + terrarium.id + '/action_sequence',
        "data-method": "POST",
        "id": 'form_heat_up_' + terrarium.id
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t('labels.heat_up')))]), _vm._v(" "), _c('p', [_c('input', {
      attrs: {
        "type": "hidden",
        "name": "template",
        "value": "heat_up"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "runonce",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "schedule_now",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "id": 'duration_minutes_heat_up_' + terrarium.id,
        "type": "text",
        "placeholder": _vm.$tc('units.minutes', 2),
        "name": "duration_minutes",
        "value": "3"
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": 'duration_minutes_heat_up_' + terrarium.id
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.duration')) + " " + _vm._s((_vm.$tc('units.minutes', 2))))])])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [_c('button', {
      staticClass: "modal-action modal-close btn waves-effect waves-green",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.start')))])])])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.cool_down) ? _c('div', {
      staticClass: "modal",
      attrs: {
        "id": terrarium.id + '_cool_down'
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/terraria/' + terrarium.id + '/action_sequence',
        "data-method": "POST",
        "id": 'form_cool_down_' + terrarium.id
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t('labels.cool_down')))]), _vm._v(" "), _c('p', [_c('input', {
      attrs: {
        "type": "hidden",
        "name": "template",
        "value": "cool_down"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "runonce",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "type": "hidden",
        "name": "schedule_now",
        "value": "On"
      }
    }), _vm._v(" "), _c('input', {
      attrs: {
        "id": 'duration_minutes_cool_down_' + terrarium.id,
        "type": "text",
        "placeholder": _vm.$tc('units.minutes', 2),
        "name": "duration_minutes",
        "value": "3"
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": 'duration_minutes_cool_down_' + terrarium.id
      }
    }, [_vm._v(_vm._s(_vm.$t('labels.duration')) + " " + _vm._s((_vm.$tc('units.minutes', 2))))])])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [_c('button', {
      staticClass: "modal-action modal-close btn waves-effect waves-green",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.start')))])])])]) : _vm._e(), _vm._v(" "), _c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-image terrarium-card-image",
      style: (terrarium.default_background_filepath ? 'background-image: url(\'' + terrarium.default_background_filepath + '\');' : 'background-image: url(\'/svg/Ciliatus_Logo.svg\'); background-position: top center;')
    }, [_c('div', [_c('inline-graph', {
      attrs: {
        "parentid": terrarium.id,
        "graphtype": "humidity_percent",
        "type": "line",
        "options": {
          'fill': null,
          'strokeWidth': '2',
          'stroke': '#2196f3',
          width: '100%',
          height: '140px',
          min: 1,
          max: 99
        },
        "source": '/api/v1/terraria/' + terrarium.id + '/sensorreadingsByType/humidity_percent',
        "data-prefill": terrarium.humidity_history
      }
    })], 1), _vm._v(" "), _c('div', {
      staticStyle: {
        "position": "relative",
        "top": "-145px"
      }
    }, [_c('inline-graph', {
      attrs: {
        "parentid": terrarium.id,
        "graphtype": "temperature_celsius",
        "type": "line",
        "options": {
          'fill': null,
          'strokeWidth': '2',
          'stroke': '#b71c1c',
          width: '100%',
          height: '140px',
          min: 1,
          max: 99
        },
        "source": '/api/v1/terraria/' + terrarium.id + '/sensorreadingsByType/temperature_celsius',
        "data-prefill": terrarium.temperature_history
      }
    })], 1), _vm._v(" "), _c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.loading_data),
        expression: "terrarium.loading_data"
      }],
      staticClass: "tiny right",
      staticStyle: {
        "position": "relative",
        "top": "-173px"
      }
    }, [_c('loading-indicator', {
      attrs: {
        "size": 20
      }
    })], 1)]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_c('a', {
      attrs: {
        "href": '/terraria/' + terrarium.id
      }
    }, [_vm._v(_vm._s(terrarium.display_name))])]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p', [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.cooked_temperature_celsius !== null),
        expression: "terrarium.cooked_temperature_celsius !== null"
      }],
      class: {
        'red-text': terrarium.temperature_critical, 'darken-3': terrarium.temperature_critical
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t("labels.temperature")) + ": " + _vm._s(terrarium.cooked_temperature_celsius) + "°C\n                            "), _c('br')]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.cooked_humidity_percent !== null),
        expression: "terrarium.cooked_humidity_percent !== null"
      }],
      class: {
        'red-text': terrarium.humidity_critical, 'darken-3': terrarium.humidity_critical
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t("labels.humidity")) + ": " + _vm._s(terrarium.cooked_humidity_percent) + "%\n                        ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.heartbeat_critical),
        expression: "terrarium.heartbeat_critical"
      }],
      staticClass: "red-text darken-3"
    }, [_c('br'), _vm._v("\n                            " + _vm._s(_vm.$t("tooltips.heartbeat_critical")) + "\n                        ")])])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.animals", 2))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _vm._l((terrarium.animals), function(animal) {
      return _c('p', [_c('a', {
        attrs: {
          "href": '/animals/' + animal.id
        }
      }, [_vm._v(_vm._s(animal.display_name))]), _vm._v(" "), _c('i', [_vm._v(_vm._s(animal.common_name))])])
    }), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$t("labels.start_action_sequence")))]), _vm._v(" "), (terrarium.capabilities.irrigate) ? _c('p', [_c('a', {
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.action_sequence_modal(terrarium.id, 'irrigate')
        }
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.irrigate')))])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.ventilate) ? _c('p', [_c('a', {
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.action_sequence_modal(terrarium.id, 'ventilate')
        }
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.ventilate')))])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.heat_up) ? _c('p', [_c('a', {
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.action_sequence_modal(terrarium.id, 'heat_up')
        }
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.heat_up')))])]) : _vm._e(), _vm._v(" "), (terrarium.capabilities.cool_down) ? _c('p', [_c('a', {
      attrs: {
        "href": "#"
      },
      on: {
        "click": function($event) {
          _vm.action_sequence_modal(terrarium.id, 'cool_down')
        }
      }
    }, [_vm._v(_vm._s(_vm.$t('buttons.cool_down')))])]) : _vm._e()], 2)])])
  })), _vm._v(" "), (!_vm.terrariumId) ? _c('div', {
    staticClass: "row"
  }, [(_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()]) : _vm._e()])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-52858374", module.exports)
  }
}

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.valves), function(valve) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("transform")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.valves", 2)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(valve.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/valves/' + valve.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/valves/' + valve.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.pumps", 1))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), (valve.pump) ? _c('p', [_c('a', {
      attrs: {
        "href": '/pumps/' + valve.pump.id
      }
    }, [_vm._v(_vm._s(valve.pump.name))])]) : _vm._e(), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.terraria", 1)))]), _vm._v(" "), (valve.terrarium) ? _c('p', [_c('a', {
      attrs: {
        "href": '/terraria/' + valve.terrarium.id
      }
    }, [_vm._v(_vm._s(valve.terrarium.name))])]) : _vm._e(), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.controlunits", 1)))]), _vm._v(" "), (valve.controlunit) ? _c('p', [_c('a', {
      attrs: {
        "href": '/controlunits/' + valve.controlunit.id
      }
    }, [_vm._v(_vm._s(valve.controlunit.name))])]) : _vm._e()])])])])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5b12312b", module.exports)
  }
}

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("schedule")]), _vm._v("\n                " + _vm._s(_vm.$tc("components.animal_weighing_schedules", 2)) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.animal_weighing_schedules", 2)))])]), _vm._v(" "), _vm._l((_vm.animal_weighing_schedules), function(aws) {
    return _c('div', [_c('p', [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (aws.timestamps.next != null),
        expression: "aws.timestamps.next != null"
      }]
    }, [_vm._v(_vm._s(aws.timestamps.next))]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (aws.timestamps.next == null),
        expression: "aws.timestamps.next == null"
      }]
    }, [_vm._v(_vm._s(_vm.$t("labels.now")))]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (aws.due_days == 0),
        expression: "aws.due_days == 0"
      }]
    }, [_c('span', {
      staticClass: "new badge",
      attrs: {
        "data-badge-caption": _vm.$t('labels.due')
      }
    })]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (aws.due_days < 0),
        expression: "aws.due_days < 0"
      }]
    }, [_c('span', {
      staticClass: "new badge red",
      attrs: {
        "data-badge-caption": _vm.$t('labels.overdue')
      }
    })])])])
  }), _vm._v(" "), (_vm.animal_weighing_schedules.length < 1) ? _c('div', [_c('p', [_vm._v(_vm._s(_vm.$t('labels.no_data')))])]) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '/animals/' + _vm.animalId + '/weighing_schedules/create'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))]), _vm._v(" "), _c('a', {
    attrs: {
      "href": '/animals/' + _vm.animalId + '/edit'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _vm._m(0)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5fc487fe", module.exports)
  }
}

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('transition', {
    attrs: {
      "name": "fade"
    }
  }, [_c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.echo.connector.pusher.connection.state !== 'connected' &&
        _vm.echo.connector.pusher.connection.state !== 'initialized' &&
        _vm.ready),
      expression: "echo.connector.pusher.connection.state !== 'connected'\n                  && echo.connector.pusher.connection.state !== 'initialized'\n                  && ready"
    }],
    staticClass: "side-menu-info"
  }, [_c('div', {
    staticClass: "side-menu-info-title"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("signal_wifi_off")]), _vm._v(" " + _vm._s(_vm.$t('labels.connecting')) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "side-menu-info-content"
  }, [_c('span', [_vm._v(_vm._s(_vm.$t('tooltips.connecting_to_server')))])])])]), _vm._v(" "), _c('transition', {
    attrs: {
      "name": "fade"
    }
  }, [_c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.system.emergency_stop === true),
      expression: "system.emergency_stop === true"
    }],
    staticClass: "side-menu-info"
  }, [_c('div', {
    staticClass: "side-menu-info-title"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("power_settings_new")]), _vm._v(" " + _vm._s(_vm.$t('labels.emergency_stop')) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "side-menu-info-content"
  }, [_c('span', [_vm._v(_vm._s(_vm.$t('tooltips.emergency_stop')))])])])])], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-61fa9e78", module.exports)
  }
}

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "overlay-loader center"
  }, [_c('img', {
    staticClass: "loader-icon spinning-logo",
    style: ('width: ' + _vm.size + 'px; width: ' + _vm.size + 'px;'),
    attrs: {
      "src": "https://dev-43256.ciliatus.io/svg/Ciliatus_Logo.svg"
    }
  })])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6d20a6fb", module.exports)
  }
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(_vm.ShowFilterForm === true) ? _c('div', [_c('div', {
    staticClass: "row",
    staticStyle: {
      "margin-bottom": "0"
    }
  }, [_c('div', {
    staticClass: "input-field col s12 m6 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.from'),
      "name": "filter_from",
      "id": 'filter_from_' + _vm.id,
      "data-default": _vm.FilterFromDate
    },
    domProps: {
      "value": _vm.FilterFromDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_from_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.from')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s12 m6 l4"
  }, [_c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.to'),
      "name": "filter_to",
      "id": 'filter_to_' + _vm.id,
      "data-default": _vm.FilterToDate
    },
    domProps: {
      "value": _vm.FilterToDate
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": 'filter_to_' + _vm.id
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.to')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s8 m8 l2"
  }, [_c('button', {
    staticClass: "btn waves-effect waves-light",
    on: {
      "click": _vm.build
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("refresh")])])]), _vm._v(" "), _c('div', {
    staticClass: "input-field col s4 m4 l2"
  }, [_c('input', {
    attrs: {
      "type": "text",
      "id": 'dygraph_' + _vm.id + '_rollperiodselector',
      "placeholder": _vm.$t('labels.rollperiod')
    },
    domProps: {
      "value": 4
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_rollperiod($event)
      }
    }
  }), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t('labels.rollperiod')))])])])]) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "center",
    staticStyle: {
      "display": "none"
    },
    attrs: {
      "id": 'dygraph_' + _vm.id + '_loading'
    }
  }, [_c('loading-indicator', {
    attrs: {
      "size": 100
    }
  })], 1), _vm._v(" "), _c('div', {
    staticStyle: {
      "width": "100%"
    },
    attrs: {
      "id": 'dygraph_' + _vm.id
    }
  })])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6e35f5d2", module.exports)
  }
}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "pump"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('pump')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.pump', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'pump' && _vm.order.direction == 'asc'),
      expression: "order.field == 'pump' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'pump' && _vm.order.direction == 'desc'),
      expression: "order.field == 'pump' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['pump.name']),
      expression: "filter['pump.name']"
    }],
    attrs: {
      "id": "filter_pump",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['pump.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'pump.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['pump.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_pump"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "controlunit"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('controlunit')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'asc'),
      expression: "order.field == 'controlunit' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'desc'),
      expression: "order.field == 'controlunit' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['controlunit.name']),
      expression: "filter['controlunit.name']"
    }],
    attrs: {
      "id": "filter_controlunit",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['controlunit.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'controlunit.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['controlunit.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_controlunit"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-med-and-down",
    attrs: {
      "data-field": "terrarium"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('terraria.display_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.terraria', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'valve.terrarium.display_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'valve.terrarium.display_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'valve.terrarium.display_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'valve.terrarium.display_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['terrarium.display_name']),
      expression: "filter['terrarium.display_name']"
    }],
    attrs: {
      "id": "filter_terrarium",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['terrarium.display_name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'terrarium.display_name';
        if (!Array.isArray($$exp)) {
          _vm.filter['terrarium.display_name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_terrarium"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.valves), function(valve) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("transform")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/valves/' + valve.id
      }
    }, [_vm._v(_vm._s(valve.name))])])]), _vm._v(" "), _c('td', [(valve.pump) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("rotate_right")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/pumps/' + valve.pump.id
      }
    }, [_vm._v(_vm._s(valve.pump.name))])]) : _vm._e()]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(valve.controlunit) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + valve.controlunit.id
      }
    }, [_vm._v(_vm._s(valve.controlunit.name))])]) : _vm._e()]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-med-and-down"
    }, [(valve.terrarium) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("video_label")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/terraria/' + valve.terrarium.id
      }
    }, [_vm._v(_vm._s(valve.terrarium.display_name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/valves/' + valve.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _vm._m(0, true)])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('tr', {
    staticClass: "collapsible-body"
  }, [_c('td', {
    attrs: {
      "colspan": "3"
    }
  }), _vm._v(" "), _c('td', {
    staticClass: "hide-on-small-only"
  }), _vm._v(" "), _c('td', {
    staticClass: "hide-on-med-and-down"
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-72f1ca7c", module.exports)
  }
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses
  }, [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("attach_file")]), _vm._v("\n                " + _vm._s(_vm.files.length) + " " + _vm._s(_vm.$tc("components.files", 2)) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.files", 2)))]), _vm._v(" "), _c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p'), _vm._l((_vm.files), function(file) {
    return _c('div', {
      staticClass: "chip"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("insert_drive_file")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/files/' + file.id
      }
    }, [_vm._v(_vm._s(file.display_name))]), _vm._v(" "), _c('i', [_vm._v(_vm._s((file.size / 1024 / 1024).toFixed(2)) + " MB")])])
  }), _vm._v(" "), _c('p')], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '/files/create?preset[belongsTo_type]=' + _vm.belongsTo_type + '&preset[belongsTo_id]=' + _vm.belongsTo_id
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))]), _vm._v(" "), _c('a', {
    attrs: {
      "href": '/files/?filter[belongsTo_type]=' + _vm.belongsTo_type + '&filter[belongsTo_id]=' + _vm.belongsTo_id
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.details")))])]), _vm._v(" "), _vm._m(0)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-736e2c2d", module.exports)
  }
}

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses,
    attrs: {
      "id": _vm.containerId
    }
  }, [_c('div', {
    staticClass: "timeline"
  }, _vm._l((_vm.entries), function(entry) {
    return _c('div', {
      staticClass: "timeline-event"
    }, [_c('div', {
      staticClass: "timeline-date"
    }, [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (entry.timestamps.created_diff.days > 0),
        expression: "entry.timestamps.created_diff.days > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": entry.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.days_ago', {
      val: entry.timestamps.created_diff.days
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (entry.timestamps.created_diff.days < 1 &&
          entry.timestamps.created_diff.hours > 0),
        expression: "entry.timestamps.created_diff.days < 1 &&\n                              entry.timestamps.created_diff.hours > 0"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": entry.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.hours_ago', {
      val: entry.timestamps.created_diff.hours
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (entry.timestamps.created_diff.days < 1 &&
          entry.timestamps.created_diff.hours < 1 &&
          entry.timestamps.created_diff.minutes > 1),
        expression: "entry.timestamps.created_diff.days < 1 &&\n                              entry.timestamps.created_diff.hours < 1 &&\n                              entry.timestamps.created_diff.minutes > 1"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": entry.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.minutes_ago', {
      val: entry.timestamps.created_diff.minutes
    })) + "\n                ")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (entry.timestamps.created_diff.days < 1 &&
          entry.timestamps.created_diff.hours < 1 &&
          entry.timestamps.created_diff.minutes < 2),
        expression: "entry.timestamps.created_diff.days < 1 &&\n                              entry.timestamps.created_diff.hours < 1 &&\n                              entry.timestamps.created_diff.minutes < 2"
      }],
      staticClass: "tooltipped",
      attrs: {
        "data-position": "bottom",
        "data-delay": "50",
        "data-tooltip": entry.timestamps.created
      }
    }, [_vm._v("\n                            " + _vm._s(_vm.$t('units.just_now')) + "\n                ")])]), _vm._v(" "), _c('div', {
      staticClass: "card timeline-content"
    }, [_c('div', {
      staticClass: "card-content"
    }, [_c('h5', [_vm._v(_vm._s(entry.title))]), _vm._v(" "), _c('p', {
      domProps: {
        "innerHTML": _vm._s(entry.text)
      }
    }), _vm._v(" "), _c('p', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (entry.files.length > 0),
        expression: "entry.files.length > 0"
      }],
      staticStyle: {
        "margin-top": "15px"
      }
    }, _vm._l((entry.files), function(file) {
      return _c('span', {
        staticStyle: {
          "margin-right": "15px"
        }
      }, [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v(_vm._s(file.icon))]), _vm._v(" "), _c('a', {
        attrs: {
          "href": file.url
        }
      }, [_vm._v(_vm._s(file.display_name))])])
    }))]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/biography_entries/' + entry.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])])]), _vm._v(" "), _c('div', {
      staticClass: "timeline-badge teal darken-2 white-text"
    }, [(entry.category) ? _c('i', {
      staticClass: "material-icons tooltipped",
      attrs: {
        "data-position": "top",
        "data-delay": "50",
        "data-tooltip": entry.category.name
      }
    }, [_vm._v("\n                    " + _vm._s(entry.category.icon) + "\n                ")]) : _vm._e()])])
  }))])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7695a880", module.exports)
  }
}

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "terrarium"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$tc('components.terraria', 1)) + "\n                    "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['terrarium.name']),
      expression: "filter['terrarium.name']"
    }],
    attrs: {
      "id": "filter_terrarium_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['terrarium.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'terrarium.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['terrarium.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_terrarium_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.action_sequences), function(action_sequence) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("playlist_play")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/action_sequences/' + action_sequence.id + '/edit'
      }
    }, [_vm._v(_vm._s(action_sequence.name))])])]), _vm._v(" "), _c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("video_label")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/terraria/' + action_sequence.terrarium.id
      }
    }, [_vm._v(_vm._s(action_sequence.terrarium.name))])])]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/action_sequences/' + action_sequence.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', {
      staticClass: "table-details-collapsible",
      attrs: {
        "colspan": "3"
      }
    }, [_c('ul', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (action_sequence.schedules.length > 0),
        expression: "action_sequence.schedules.length > 0"
      }]
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.action_sequence_schedules', 2)))]), _vm._v(" "), _vm._l((action_sequence.schedules), function(schedule, index) {
      return _c('li', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("schedule")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(schedule.timestamps.starts))]), _vm._v(" "), (schedule.timestamps.runonce) ? _c('span', [_vm._v("(" + _vm._s(_vm.$t('labels.runonce')) + ")")]) : _vm._e(), _vm._v(" "), (index < action_sequence.schedules.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    })], 2), _vm._v(" "), _c('ul', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (action_sequence.triggers.length > 0),
        expression: "action_sequence.triggers.length > 0"
      }]
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.action_sequence_triggers', 2)))]), _vm._v(" "), _vm._l((action_sequence.triggers), function(trigger, index) {
      return _c('li', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("flare")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.' + trigger.logical_sensor.type)))]), _vm._v(" "), (trigger.reference_value_comparison_type == 'greater') ? _c('span', [_vm._v(">")]) : _vm._e(), _vm._v(" "), (trigger.reference_value_comparison_type == 'lower') ? _c('span', [_vm._v("<")]) : _vm._e(), _vm._v(" "), _c('span', [_vm._v(_vm._s(trigger.reference_value))]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.between')) + " " + _vm._s(trigger.timeframe.start) + " " + _vm._s(_vm.$t('labels.and')) + " " + _vm._s(trigger.timeframe.end) + ",")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.minimum_timeout_minutes')) + ": " + _vm._s(trigger.minimum_timeout_minutes) + " " + _vm._s(_vm.$tc('units.minutes', trigger.minimum_timeout_minutes)))]), _vm._v(" "), (index < action_sequence.triggers.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    })], 2), _vm._v(" "), _c('ul', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (action_sequence.intentions.length > 0),
        expression: "action_sequence.intentions.length > 0"
      }]
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.action_sequence_intentions', 2)))]), _vm._v(" "), _vm._l((action_sequence.intentions), function(intention, index) {
      return _c('li', [_c('i', {
        staticClass: "material-icons"
      }, [_vm._v("flare")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.' + intention.intention)))]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.' + intention.type)))]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.between')) + " " + _vm._s(intention.timeframe.start) + " " + _vm._s(_vm.$t('labels.and')) + " " + _vm._s(intention.timeframe.end) + ",")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t('labels.minimum_timeout_minutes')) + ": " + _vm._s(intention.minimum_timeout_minutes) + " " + _vm._s(_vm.$tc('units.minutes', intention.minimum_timeout_minutes)))]), _vm._v(" "), (index < action_sequence.intentions.length - 1) ? [_vm._v(", ")] : _vm._e()], 2)
    })], 2)])])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-779a643c", module.exports)
  }
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "modal",
    staticStyle: {
      "min-height": "800px"
    },
    attrs: {
      "id": 'modal_add_weighing_' + _vm.animalId
    }
  }, [_c('form', {
    attrs: {
      "action": '/api/v1/animals/' + _vm.animalId + '/weighings',
      "data-method": "POST",
      "onsubmit": "window.submit_form"
    }
  }, [_c('div', {
    staticClass: "modal-content"
  }, [_c('h4', [_vm._v(_vm._s(_vm.$t("labels.add_weight")))]), _vm._v(" "), _c('p', [_c('input', {
    attrs: {
      "type": "text",
      "name": "weight",
      "id": "weight",
      "placeholder": _vm.$t('labels.weight'),
      "value": ""
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "weight"
    }
  }, [_vm._v(_vm._s(_vm.$t("labels.weight")) + "/g")]), _vm._v(" "), _c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.date'),
      "name": "created_at"
    }
  }), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t('labels.date')))])])]), _vm._v(" "), _c('div', {
    staticClass: "modal-footer"
  }, [_c('button', {
    staticClass: "btn modal-action modal-close waves-effect waves-light",
    attrs: {
      "type": "submit"
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.save")) + "\n                        "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("send")])])])])]), _vm._v(" "), _c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("vertical_align_bottom")]), _vm._v("\n                " + _vm._s(_vm.$tc("components.animal_weighings", 2)) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.animal_weighings", 2)))]), _vm._v(" "), _c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("more_vert")])]), _vm._v(" "), _vm._l((_vm.animal_weighings), function(af) {
    return _c('div', [_c('div', {
      staticClass: "row row-no-margin",
      staticStyle: {
        "width": "100%"
      }
    }, [(af.timestamps.created_diff.days > 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.days_ago', {
      val: af.timestamps.created_diff.days
    })))]) : _vm._e(), _vm._v(" "), (af.timestamps.created_diff.days <= 1 && af.timestamps.created_diff.hours > 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.hours_ago', {
      val: af.timestamps.created_diff.hours
    })))]) : _vm._e(), _vm._v(" "), (af.timestamps.created_diff.days <= 1 && af.timestamps.created_diff.hours <= 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.just_now')))]) : _vm._e(), _vm._v(" "), _c('span', [_vm._v(" - " + _vm._s(af.amount) + "g")]), _vm._v(" "), _c('span', {
      staticClass: "right"
    }, [_c('a', {
      staticClass: "red-text",
      attrs: {
        "href": '/animals/' + _vm.animalId + '/weighings/' + af.id + '/delete'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("delete")])])])])])
  }), _vm._v(" "), (_vm.animal_weighings.length < 1) ? _c('div', [_c('p', [_vm._v(_vm._s(_vm.$t('labels.no_data')))])]) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '#modal_add_weighing_' + _vm.animalId,
      "onclick": '$(\'#modal_add_weighing_' + _vm.animalId + '\').modal(); $(\'#modal_add_weighing_' + _vm.animalId + ' select\').material_select(); $(\'#modal_add_weighing_' + _vm.animalId + '\').modal(\'open\');'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))])]), _vm._v(" "), _vm._m(0)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7a4ba0b8", module.exports)
  }
}

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("schedule")]), _vm._v("\n                " + _vm._s(_vm.$tc("components.animal_feeding_schedules", 2)) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.animal_feeding_schedules", 2)))])]), _vm._v(" "), _vm._l((_vm.animal_feeding_schedules), function(afs) {
    return _c('div', [_c('p', [(afs.timestamps.next != null) ? _c('span', [_vm._v(_vm._s(afs.timestamps.next) + " - ")]) : _vm._e(), _vm._v(_vm._s(afs.type) + "\n                        "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (afs.due_days == 0),
        expression: "afs.due_days == 0"
      }]
    }, [_c('span', {
      staticClass: "new badge",
      attrs: {
        "data-badge-caption": _vm.$t('labels.due')
      }
    })]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (afs.due_days < 0),
        expression: "afs.due_days < 0"
      }]
    }, [_c('span', {
      staticClass: "new badge red",
      attrs: {
        "data-badge-caption": _vm.$t('labels.overdue')
      }
    })])])])
  }), _vm._v(" "), (_vm.animal_feeding_schedules.length < 1) ? _c('div', [_c('p', [_vm._v(_vm._s(_vm.$t('labels.no_data')))])]) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '/animals/' + _vm.animalId + '/feeding_schedules/create'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))]), _vm._v(" "), _c('a', {
    attrs: {
      "href": '/animals/' + _vm.animalId + '/edit'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _vm._m(0)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-82c4c0a0", module.exports)
  }
}

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses,
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.terraria), function(terrarium) {
    return _c('div', {
      class: _vm.wrapperClasses
    }, [_c('br'), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/terraria/' + terrarium.id
      }
    }, [_c('strong', [_vm._v(_vm._s(terrarium.display_name))])]), _vm._v(" "), _c('div', {
      staticStyle: {
        "margin-left": "20px"
      }
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.animals', 2)))]), _vm._v(" "), _vm._l((terrarium.animals), function(animal) {
      return _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/animals/' + animal.id
        }
      }, [_c('strong', [_vm._v(_vm._s(animal.display_name))])]), _vm._v(" "), _c('i', [_vm._v(_vm._s(animal.common_name) + " " + _vm._s(animal.latin_name))])])
    })], 2), _vm._v(" "), _c('div', {
      staticStyle: {
        "margin-left": "20px"
      }
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.action_sequences', 2)))]), _vm._v(" "), _vm._l((terrarium.action_sequences), function(action_sequence) {
      return _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/action_sequences/' + action_sequence.id
        }
      }, [_c('strong', [_vm._v(_vm._s(action_sequence.name))])]), _vm._v(" "), _vm._l((action_sequence.schedules), function(schedule) {
        return _c('i', [_vm._v(_vm._s(schedule.timestamps.starts))])
      }), _vm._v(" "), _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.actions', 2)))]), _vm._v(" "), _vm._l((action_sequence.actions), function(action) {
        return _c('div', {
          staticStyle: {
            "margin-left": "20px"
          }
        }, [(action.target_object != undefined) ? _c('div', [_c('a', {
          attrs: {
            "href": '/actions/' + action.id
          }
        }, [_c('strong', [_vm._v(_vm._s(action.target_object.name))])]), _vm._v(" "), _c('i', {
          staticClass: "material-icons"
        }, [_vm._v("keyboard_arrow_right")]), _vm._v("\n                            " + _vm._s(action.desired_state) + "\n                            "), _c('i', [_vm._v(_vm._s(action.duration_minutes) + " " + _vm._s(_vm.$tc('units.minutes', action.duration_minutes)))]), _vm._v(" "), (action.target_object == undefined) ? _c('div', [_c('strong', {
          staticClass: "red-text"
        }, [_vm._v("unknown")])]) : _vm._e()]) : _vm._e()])
      })], 2)], 2)
    })], 2), _vm._v(" "), _c('div', {
      staticStyle: {
        "margin-left": "20px"
      }
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.physical_sensors', 2)))]), _vm._v(" "), _vm._l((terrarium.physical_sensors), function(physical_sensor) {
      return _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/physical_sensors/' + physical_sensor.id
        }
      }, [_c('strong', [_vm._v(_vm._s(physical_sensor.name))])]), _vm._v(" "), _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), (physical_sensor.controlunit != undefined) ? _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/controlunits/' + physical_sensor.controlunit.id
        }
      }, [_c('strong', [_vm._v(_vm._s(physical_sensor.controlunit.name))])])]) : _vm._e(), _vm._v(" "), _c('strong', [_vm._v(_vm._s(_vm.$tc('components.logical_sensors', 2)))]), _vm._v(" "), _vm._l((physical_sensor.logical_sensors), function(logical_sensor) {
        return _c('div', {
          staticStyle: {
            "margin-left": "20px"
          }
        }, [_c('a', {
          attrs: {
            "href": '/logical_sensors/' + logical_sensor.id
          }
        }, [_c('strong', [_vm._v(_vm._s(logical_sensor.name))])]), _vm._v(" "), _c('i', [_vm._v(_vm._s(logical_sensor.type))]), _vm._v(" "), _c('br'), _vm._v("\n                        " + _vm._s(logical_sensor.rawvalue) + "\n                    ")])
      })], 2)])
    })], 2), _vm._v(" "), _c('div', {
      staticStyle: {
        "margin-left": "20px"
      }
    }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.valves', 2)))]), _vm._v(" "), _vm._l((terrarium.valves), function(valve) {
      return _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/valves/' + valve.id
        }
      }, [_c('strong', [_vm._v(_vm._s(valve.name))]), _vm._v(" "), _c('i', [_vm._v(_vm._s(valve.state))])]), _vm._v(" "), _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), (valve.controlunit != undefined) ? _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/controlunits/' + valve.controlunit.id
        }
      }, [_c('strong', [_vm._v(_vm._s(valve.controlunit.name))])])]) : _vm._e(), _vm._v(" "), _c('strong', [_vm._v(_vm._s(_vm.$tc('components.pumps', 2)))]), _vm._v(" "), (valve.pump != undefined) ? _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/pumps/' + valve.pump.id
        }
      }, [_c('strong', [_vm._v(_vm._s(valve.pump.name))])]), _vm._v(" "), _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('strong', [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), (valve.pump.controlunit != undefined) ? _c('div', {
        staticStyle: {
          "margin-left": "20px"
        }
      }, [_c('a', {
        attrs: {
          "href": '/controlunits/' + valve.pump.controlunit.id
        }
      }, [_c('strong', [_vm._v(_vm._s(valve.pump.controlunit.name))])])]) : _vm._e()])]) : _vm._e()])])
    })], 2)])
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-830273d0", module.exports)
  }
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('span', [_c('peity', {
    attrs: {
      "type": _vm.type,
      "options": _vm.options,
      "data": _vm.graphData
    }
  })], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-8768f226", module.exports)
  }
}

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c("div")
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-91b9b8bc", module.exports)
  }
}

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "generic_component.type.name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('type.name_singular')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.type')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'type.name_singular' && _vm.order.direction == 'asc'),
      expression: "order.field == 'type.name_singular' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'type.name_singular' && _vm.order.direction == 'desc'),
      expression: "order.field == 'type.name_singular' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['type.name_singular']),
      expression: "filter['type.name_singular']"
    }],
    attrs: {
      "id": "filter_generic_component_type_name_singular",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['type.name_singular'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'type.name_singular';
        if (!Array.isArray($$exp)) {
          _vm.filter['type.name_singular'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_generic_component_type_name_singular"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "controlunit"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('controlunit')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'asc'),
      expression: "order.field == 'controlunit' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'desc'),
      expression: "order.field == 'controlunit' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['controlunit.name']),
      expression: "filter['controlunit.name']"
    }],
    attrs: {
      "id": "filter_controlunit",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['controlunit.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'controlunit.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['controlunit.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_controlunit"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.generic_components), function(generic_component) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(generic_component.type.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/generic_components/' + generic_component.id
      }
    }, [_vm._v(_vm._s(generic_component.name))])])]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/generic_component_types/' + generic_component.type.id
      }
    }, [_vm._v(_vm._s(generic_component.type.name_singular))])])]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(generic_component.controlunit) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + generic_component.controlunit.id
      }
    }, [_vm._v(_vm._s(generic_component.controlunit.name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/generic_components/' + generic_component.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [_c('td', {
      attrs: {
        "colspan": "4"
      }
    }, _vm._l((generic_component.properties), function(value, name) {
      return _c('span', [_vm._v("\n                                " + _vm._s(name) + ": " + _vm._s(value) + "\n                                "), _c('br')])
    }))])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-9bc6f4d2", module.exports)
  }
}

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [(_vm.showOptionSelect) ? _c('th', {
    attrs: {
      "width": "100"
    }
  }) : _vm._e(), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "display_name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.display_name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'display_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'display_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'display_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'display_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.display_name),
      expression: "filter.display_name"
    }],
    attrs: {
      "id": "filter_display_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.display_name)
    },
    on: {
      "keydown": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.display_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_display_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "mimetype"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.type')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'mimetype' && _vm.order.direction == 'mimetype'),
      expression: "order.field == 'mimetype' && order.direction == 'mimetype'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'mimetype' && _vm.order.direction == 'mimetype'),
      expression: "order.field == 'mimetype' && order.direction == 'mimetype'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.mimetype),
      expression: "filter.mimetype"
    }],
    attrs: {
      "id": "filter_mimetype",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.mimetype)
    },
    on: {
      "keydown": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.mimetype = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_mimetype"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "size"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.size')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'size' && _vm.order.direction == 'size'),
      expression: "order.field == 'size' && order.direction == 'size'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'size' && _vm.order.direction == 'size'),
      expression: "order.field == 'size' && order.direction == 'size'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.size),
      expression: "filter.size"
    }],
    attrs: {
      "id": "filter_size",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.size)
    },
    on: {
      "keydown": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.size = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_size"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "timestamps.created_at"
    }
  }, [_vm._v("\n                    " + _vm._s(_vm.$t('labels.created_at')) + "\n                ")])])]), _vm._v(" "), _vm._l((_vm.files), function(file) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [(_vm.showOptionSelect) ? _c('td', [_c('span', [_c('input', {
      attrs: {
        "name": "file",
        "type": "radio",
        "id": file.id
      },
      domProps: {
        "value": file.id
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": file.id
      }
    })])]) : _vm._e(), _vm._v(" "), _c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(file.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/files/' + file.id
      }
    }, [_vm._v(_vm._s(file.display_name))])])]), _vm._v(" "), _c('td', [_c('span', [_vm._v("\n                                " + _vm._s(file.mimetype) + "\n                            ")])]), _vm._v(" "), _c('td', [(file.size / 1024 > 1024) ? _c('span', [_vm._v("\n                                " + _vm._s(Math.round(file.size / 1024 / 1024, 1)) + " MB\n                            ")]) : _c('span', [_vm._v("\n                                " + _vm._s(Math.round(file.size / 1024, 0)) + " KB\n                            ")])]), _vm._v(" "), _c('td', [_vm._v("\n                            " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(file.timestamps.created_diff).unit, {
        val: _vm.$getMatchingTimeDiff(file.timestamps.created_diff).val
      }
    )) + "\n                        ")]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": '/files/' + file.id + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _c('tr', {
      staticClass: "collapsible-body"
    }, [(_vm.showOptionSelect) ? _c('td') : _vm._e(), _vm._v(" "), _c('td', {
      attrs: {
        "colspan": "4"
      }
    }, [(file.mimetype.startsWith('image') && file.thumb != undefined) ? _c('img', {
      attrs: {
        "src": file.thumb.path_external
      }
    }) : _vm._e()])])])]
  })], 2), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-a1773e8c", module.exports)
  }
}

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: _vm.containerClasses
  }, _vm._l((_vm.files), function(file) {
    return _c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "col s12 m12 l4"
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("attach_file")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.files", 1)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(file.display_name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])]), _vm._v(" "), _c('p', [_c('span', [_vm._v(_vm._s(_vm.$t("labels.size")) + ": " + _vm._s((file.size / 1024 / 1024).toFixed(2)) + " MB")]), _c('br'), _vm._v(" "), _c('span', [_vm._v(_vm._s(_vm.$t("labels.type")) + ": " + _vm._s(file.mimetype))])])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/files/' + file.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/files/' + file.id + '/download/' + file.display_name
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.download")))])]), _vm._v(" "), _vm._m(0, true)])]), _vm._v(" "), (file.is_image && file.thumb !== _vm.undefiend) ? _c('div', {
      staticClass: "col s12 m12 l8"
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('span', [_vm._v(_vm._s(_vm.$t('labels.preview')))])]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('img', {
      attrs: {
        "src": file.thumb.path_external
      }
    })])])]) : _vm._e()])
  }))
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c121560a", module.exports)
  }
}

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.pumps), function(pump) {
    return _c('div', [_c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-header"
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("rotate_right")]), _vm._v("\n                    " + _vm._s(_vm.$tc("components.pumps", 2)) + "\n                ")]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_vm._v(_vm._s(pump.name))]), _vm._v(" "), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")])])]), _vm._v(" "), _c('div', {
      staticClass: "card-action"
    }, [_c('a', {
      attrs: {
        "href": '/pumps/' + pump.id
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.details")))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/pumps/' + pump.id + '/edit'
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.edit")))])]), _vm._v(" "), _vm._m(0, true)])])])
  }))
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-ca2e39ce", module.exports)
  }
}

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('div', {
    staticClass: "modal",
    staticStyle: {
      "min-height": "800px"
    },
    attrs: {
      "id": 'modal_add_feeding_' + _vm.animalId
    }
  }, [_c('form', {
    attrs: {
      "action": '/api/v1/animals/' + _vm.animalId + '/feedings',
      "data-method": "POST",
      "onsubmit": "window.submit_form"
    }
  }, [_c('div', {
    staticClass: "modal-content"
  }, [_c('h4', [_vm._v(_vm._s(_vm.$t("labels.just_fed")))]), _vm._v(" "), _c('select', {
    attrs: {
      "name": "meal_type",
      "id": "meal_type"
    }
  }, _vm._l((_vm.animal_feeding_types), function(ft) {
    return _c('option', {
      domProps: {
        "value": ft
      }
    }, [_vm._v(_vm._s(ft))])
  })), _vm._v(" "), _c('label', {
    attrs: {
      "for": "meal_type"
    }
  }, [_vm._v(_vm._s(_vm.$t("labels.meal_type")))]), _vm._v(" "), _c('input', {
    staticClass: "datepicker",
    attrs: {
      "type": "date",
      "placeholder": _vm.$t('labels.date'),
      "name": "created_at"
    }
  }), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t('labels.date')))])]), _vm._v(" "), _c('div', {
    staticClass: "modal-footer"
  }, [_c('button', {
    staticClass: "btn modal-action modal-close waves-effect waves-light",
    attrs: {
      "type": "submit"
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.save")) + "\n                        "), _c('i', {
    staticClass: "material-icons left"
  }, [_vm._v("send")])])])])]), _vm._v(" "), _c('div', {
    staticClass: "card"
  }, [_c('div', {
    staticClass: "card-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("local_dining")]), _vm._v("\n                " + _vm._s(_vm.$tc("components.animal_feedings", 2)) + "\n            ")]), _vm._v(" "), _c('div', {
    staticClass: "card-content"
  }, [_c('span', {
    staticClass: "card-title activator truncate"
  }, [_c('span', [_vm._v(_vm._s(_vm.$tc("components.animal_feedings", 2)))]), _vm._v(" "), _c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("more_vert")])]), _vm._v(" "), _vm._l((_vm.animal_feedings), function(af) {
    return _c('div', [_c('div', {
      staticClass: "row row-no-margin"
    }, [(af.timestamps.created_diff.days > 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.days_ago', {
      val: af.timestamps.created_diff.days
    })))]) : _vm._e(), _vm._v(" "), (af.timestamps.created_diff.days <= 1 && af.timestamps.created_diff.hours > 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.hours_ago', {
      val: af.timestamps.created_diff.hours
    })))]) : _vm._e(), _vm._v(" "), (af.timestamps.created_diff.days <= 1 && af.timestamps.created_diff.hours <= 1) ? _c('span', [_vm._v(_vm._s(_vm.$t('units.just_now')))]) : _vm._e(), _vm._v(" "), _c('span', [_vm._v(" - " + _vm._s(af.type))]), _vm._v(" "), _c('span', {
      staticClass: "right"
    }, [_c('a', {
      staticClass: "red-text",
      attrs: {
        "href": '/animals/' + _vm.animalId + '/feedings/' + af.id + '/delete'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("delete")])])])])])
  }), _vm._v(" "), (_vm.animal_feedings.length < 1) ? _c('div', [_c('p', [_vm._v(_vm._s(_vm.$t('labels.no_data')))])]) : _vm._e()], 2), _vm._v(" "), _c('div', {
    staticClass: "card-action"
  }, [_c('a', {
    attrs: {
      "href": '#modal_add_feeding_' + _vm.animalId,
      "onclick": '$(\'#modal_add_feeding_' + _vm.animalId + '\').modal(); $(\'#modal_add_feeding_' + _vm.animalId + ' select\').material_select(); $(\'#modal_add_feeding_' + _vm.animalId + '\').modal(\'open\');'
    }
  }, [_vm._v(_vm._s(_vm.$t("buttons.add")))])]), _vm._v(" "), _vm._m(0)])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "card-reveal"
  }, [_c('span', {
    staticClass: "card-title"
  }, [_c('i', {
    staticClass: "material-icons right"
  }, [_vm._v("close")])]), _vm._v(" "), _c('p')])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-cd3f709c", module.exports)
  }
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [(!_vm.animalId) ? _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.showFilters),
      expression: "showFilters"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s10 m8 l8"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.display_name),
      expression: "filter.display_name"
    }],
    attrs: {
      "id": "filter_display_name",
      "type": "text",
      "placeholder": _vm.$t('labels.display_name')
    },
    domProps: {
      "value": (_vm.filter.display_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.display_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_display_name"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.display_name')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.lat_name),
      expression: "filter.lat_name"
    }],
    attrs: {
      "id": "filter_lat_name",
      "type": "text",
      "placeholder": _vm.$t('labels.latin_name')
    },
    domProps: {
      "value": (_vm.filter.lat_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.lat_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_lat_name"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.latin_name')))])]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.common_name),
      expression: "filter.common_name"
    }],
    attrs: {
      "id": "filter_common_name",
      "type": "text",
      "placeholder": _vm.$t('labels.common_name')
    },
    domProps: {
      "value": (_vm.filter.common_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.common_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_common_name"
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.common_name')))])])]), _vm._v(" "), _c('div', {
    staticClass: "col s2 m4 l4 right-align"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_c('i', {
    staticClass: "material-icons",
    on: {
      "click": _vm.toggle_filters
    }
  }, [_vm._v("filter_list")])])])])]) : _vm._e(), _vm._v(" "), (!_vm.animalId) ? _c('div', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.showFilters),
      expression: "!showFilters"
    }],
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col s12 right-align"
  }, [_c('div', {
    staticClass: "input-field inline"
  }, [_vm._v("\n                " + _vm._s(_vm.$t('labels.filter')) + "\n                "), _c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_c('i', {
    staticClass: "material-icons",
    on: {
      "click": _vm.toggle_filters
    }
  }, [_vm._v("filter_list")])])])])]) : _vm._e(), _vm._v(" "), _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, _vm._l((_vm.animals), function(animal) {
    return _c('div', {
      class: _vm.wrapperClasses
    }, [_c('div', {
      staticClass: "modal",
      staticStyle: {
        "min-height": "800px"
      },
      attrs: {
        "id": 'modal_just_fed_' + animal.id
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/animals/' + animal.id + '/feedings',
        "data-method": "POST"
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t("labels.just_fed")))]), _vm._v(" "), (_vm.feeding_types.length > 0) ? _c('select', {
      attrs: {
        "name": "meal_type"
      }
    }, _vm._l((_vm.feeding_types), function(ft) {
      return _c('option', {
        domProps: {
          "value": ft.name
        }
      }, [_vm._v(_vm._s(ft.name))])
    })) : _c('span', [_c('strong', [_vm._v(_vm._s(_vm.$t('tooltips.no_feeding_types')))])]), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t("labels.meal_type")))]), _vm._v(" "), _c('input', {
      staticClass: "datepicker",
      attrs: {
        "type": "date",
        "placeholder": _vm.$t('labels.date'),
        "name": "created_at"
      }
    }), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t('labels.date')))])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [(_vm.feeding_types.length > 0) ? _c('button', {
      staticClass: "btn modal-action modal-close waves-effect waves-light",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.save")) + "\n                            "), _c('i', {
      staticClass: "material-icons left"
    }, [_vm._v("send")])]) : _vm._e()])])]), _vm._v(" "), _c('div', {
      staticClass: "modal",
      staticStyle: {
        "min-height": "800px"
      },
      attrs: {
        "id": 'modal_add_weight_' + animal.id
      }
    }, [_c('form', {
      attrs: {
        "action": '/api/v1/animals/' + animal.id + '/weighings',
        "data-method": "POST"
      },
      on: {
        "submit": _vm.submit
      }
    }, [_c('div', {
      staticClass: "modal-content"
    }, [_c('h4', [_vm._v(_vm._s(_vm.$t("labels.add_weight")))]), _vm._v(" "), _c('input', {
      attrs: {
        "name": "weight",
        "id": "weight",
        "placeholder": _vm.$t('labels.weight') + '/g'
      }
    }), _vm._v(" "), _c('label', {
      attrs: {
        "for": "weight"
      }
    }, [_vm._v(_vm._s(_vm.$t("labels.weight")) + "/g")]), _vm._v(" "), _c('input', {
      staticClass: "datepicker",
      attrs: {
        "type": "date",
        "placeholder": _vm.$t('labels.date'),
        "name": "created_at"
      }
    }), _vm._v(" "), _c('label', [_vm._v(_vm._s(_vm.$t('labels.date')))])]), _vm._v(" "), _c('div', {
      staticClass: "modal-footer"
    }, [_c('button', {
      staticClass: "btn modal-action modal-close waves-effect waves-light",
      attrs: {
        "type": "submit"
      }
    }, [_vm._v(_vm._s(_vm.$t("buttons.save")) + "\n                            "), _c('i', {
      staticClass: "material-icons left"
    }, [_vm._v("send")])])])])]), _vm._v(" "), _c('div', {
      staticClass: "card"
    }, [_c('div', {
      staticClass: "card-image terrarium-card-image",
      style: (animal.default_background_filepath ? 'background-image: url(\'' + animal.default_background_filepath + '\');' : 'background-image: url(\'/svg/Ciliatus_Logo.svg\'); background-position: top center;')
    }, [_c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (animal.loading_data),
        expression: "animal.loading_data"
      }],
      staticClass: "tiny right",
      staticStyle: {
        "position": "relative",
        "top": "120px"
      }
    }, [_c('loading-indicator', {
      attrs: {
        "size": 20
      }
    })], 1)]), _vm._v(" "), _c('div', {
      staticClass: "card-content"
    }, [_c('span', {
      staticClass: "card-title activator truncate"
    }, [_c('span', [_c('a', {
      attrs: {
        "href": '/animals/' + animal.id
      }
    }, [_vm._v(_vm._s(animal.display_name))])]), _vm._v(" "), (!animal.death_date) ? _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("more_vert")]) : _vm._e()]), _vm._v(" "), _c('p', [_c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (animal.latin_name),
        expression: "animal.latin_name"
      }]
    }, [_vm._v(_vm._s(animal.latin_name) + ",")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (animal.common_name && !animal.latin_name),
        expression: "animal.common_name && !animal.latin_name"
      }]
    }, [_vm._v(_vm._s(animal.common_name) + ",")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (animal.birth_date || animal.death_date),
        expression: "animal.birth_date || animal.death_date"
      }]
    }, [_vm._v(_vm._s(animal.age_value) + " " + _vm._s(_vm.$tc("units." + animal.age_unit, animal.age_value)))]), _vm._v(" "), (animal.last_feeding && !animal.death_date) ? _c('span', [_c('br'), _vm._v(" "), _c('i', {
      staticClass: "material-icons tiny"
    }, [_vm._v("local_dining")]), _vm._v("\n                            " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(animal.last_feeding.timestamps.created_diff).unit, {
        val: _vm.$getMatchingTimeDiff(animal.last_feeding.timestamps.created_diff).val
      }
    )) + "\n                            " + _vm._s(animal.last_feeding.name) + "\n                        ")]) : _vm._e(), _vm._v(" "), (animal.last_weighing && !animal.death_date) ? _c('span', [_c('br'), _vm._v(" "), _c('i', {
      staticClass: "material-icons tiny"
    }, [_vm._v("file_download")]), _vm._v("\n                            " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(animal.last_weighing.timestamps.created_diff).unit, {
        val: _vm.$getMatchingTimeDiff(animal.last_weighing.timestamps.created_diff).val
      }
    )) + "\n                            " + _vm._s(animal.last_weighing.value) + _vm._s(animal.last_weighing.name) + "\n                            "), (animal.last_weighing.trend && animal.last_weighing.trend > 0) ? _c('span', {
      staticClass: "green-text"
    }, [_vm._v("\n                                (+ " + _vm._s(animal.last_weighing.trend) + "%)\n                            ")]) : _vm._e(), _vm._v(" "), (animal.last_weighing.trend && animal.last_weighing.trend < 0) ? _c('span', {
      staticClass: "red-text"
    }, [_vm._v("\n                                (" + _vm._s(animal.last_weighing.trend) + "%)\n                            ")]) : _vm._e(), _vm._v(" "), (animal.last_weighing.trend && animal.last_weighing.trend == 0) ? _c('span', [_vm._v("\n                                (+/- 0%)\n                            ")]) : _vm._e()]) : _vm._e()])]), _vm._v(" "), (!animal.death_date) ? _c('div', {
      staticClass: "card-reveal"
    }, [_c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$tc("components.terraria", 1))), _c('i', {
      staticClass: "material-icons right"
    }, [_vm._v("close")])]), _vm._v(" "), _c('p', [(animal.terrarium) ? _c('a', {
      attrs: {
        "href": '/terraria/' + animal.terrarium.id
      }
    }, [_vm._v(_vm._s(animal.terrarium.display_name))]) : _vm._e()]), _vm._v(" "), _c('span', {
      staticClass: "card-title"
    }, [_vm._v(_vm._s(_vm.$t("labels.just_fed")))]), _vm._v(" "), _c('p', [_c('a', {
      attrs: {
        "href": "#",
        "href": '#modal_just_fed_' + animal.id,
        "onclick": '$(\'#modal_just_fed_' + animal.id + '\').modal(); $(\'#modal_just_fed_' + animal.id + ' select\').material_select(); $(\'#modal_just_fed_' + animal.id + '\').modal(\'open\');'
      }
    }, [_vm._v(_vm._s(_vm.$t("labels.just_fed")))])]), _vm._v(" "), _c('p', [_c('a', {
      attrs: {
        "href": "#",
        "href": '#modal_add_weight_' + animal.id,
        "onclick": '$(\'#modal_add_weight_' + animal.id + '\').modal(); $(\'#modal_add_weight_' + animal.id + ' select\').material_select(); $(\'#modal_add_weight_' + animal.id + '\').modal(\'open\');'
      }
    }, [_vm._v(_vm._s(_vm.$t("labels.add_weight")))])])]) : _vm._e()])])
  })), _vm._v(" "), (!_vm.animalId) ? _c('div', {
    staticClass: "row"
  }, [(_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()]) : _vm._e()])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-d9003c26", module.exports)
  }
}

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight collapsible",
    attrs: {
      "data-collapsible": "expandable"
    }
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "name"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.name')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.name),
      expression: "filter.name"
    }],
    attrs: {
      "id": "filter_name",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_name"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticClass: "hide-on-small-only",
    attrs: {
      "data-field": "controlunit"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('controlunit')
      }
    }
  }, [_vm._v(_vm._s(_vm.$tc('components.controlunit', 1)))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'asc'),
      expression: "order.field == 'controlunit' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'controlunit' && _vm.order.direction == 'desc'),
      expression: "order.field == 'controlunit' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter['controlunit.name']),
      expression: "filter['controlunit.name']"
    }],
    attrs: {
      "id": "filter_controlunit",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter['controlunit.name'])
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        var $$exp = _vm.filter,
          $$idx = 'controlunit.name';
        if (!Array.isArray($$exp)) {
          _vm.filter['controlunit.name'] = $event.target.value
        } else {
          $$exp.splice($$idx, 1, $event.target.value)
        }
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_controlunit"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    staticStyle: {
      "width": "40px"
    }
  })])]), _vm._v(" "), _vm._l((_vm.components), function(component) {
    return [_c('tbody', [_c('tr', {
      staticClass: "collapsible-header"
    }, [_c('td', [_c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(component.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": component.url
      }
    }, [_vm._v(_vm._s(component.name))])])]), _vm._v(" "), _c('td', {
      staticClass: "hide-on-small-only"
    }, [(component.controlunit) ? _c('span', [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("developer_board")]), _vm._v(" "), _c('a', {
      attrs: {
        "href": '/controlunits/' + component.controlunit.id
      }
    }, [_vm._v(_vm._s(component.controlunit.name))])]) : _vm._e()]), _vm._v(" "), _c('td', [_c('span', [_c('a', {
      attrs: {
        "href": component.url + '/edit'
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("edit")])])])])]), _vm._v(" "), _vm._m(0, true)])]
  })], 2)])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('tr', {
    staticClass: "collapsible-body"
  }, [_c('td', {
    attrs: {
      "colspan": "3"
    }
  })])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-dddd1da2", module.exports)
  }
}

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('div', {
    class: _vm.wrapperClasses
  }, [_c('table', {
    staticClass: "responsive highlight"
  }, [_c('thead', [_c('tr', [_c('th', {
    attrs: {
      "data-field": "source"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('source_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.source')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'source_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'source_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'source_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'source_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.source_name),
      expression: "filter.source_name"
    }],
    attrs: {
      "id": "filter_source",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.source_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.source_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_source"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "action"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('action')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.action')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'action' && _vm.order.direction == 'asc'),
      expression: "order.field == 'action' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'action' && _vm.order.direction == 'desc'),
      expression: "order.field == 'action' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.action),
      expression: "filter.action"
    }],
    attrs: {
      "id": "filter_action",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.action)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.action = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_action"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "target"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('target_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.target')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'target_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'target_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'target_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'target_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.target_name),
      expression: "filter.target_name"
    }],
    attrs: {
      "id": "filter_target",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.target_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.target_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_target"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', {
    attrs: {
      "data-field": "associated"
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('associatedWith_name')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.associated_with')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'associatedWith_name' && _vm.order.direction == 'asc'),
      expression: "order.field == 'associatedWith_name' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'associatedWith_name' && _vm.order.direction == 'desc'),
      expression: "order.field == 'associatedWith_name' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")]), _vm._v(" "), _c('div', {
    staticClass: "input-field inline"
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: (_vm.filter.associatedWith_name),
      expression: "filter.associatedWith_name"
    }],
    attrs: {
      "id": "filter_associated_with",
      "type": "text"
    },
    domProps: {
      "value": (_vm.filter.associatedWith_name)
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13)) { return null; }
        _vm.set_filter($event)
      },
      "input": function($event) {
        if ($event.target.composing) { return; }
        _vm.filter.associatedWith_name = $event.target.value
      }
    }
  }), _vm._v(" "), _c('label', {
    attrs: {
      "for": "filter_associated_with"
    }
  }, [_vm._v("Filter")])])]), _vm._v(" "), _c('th', [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_order('created_at')
      }
    }
  }, [_vm._v(_vm._s(_vm.$t('labels.created_at')))]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'created_at' && _vm.order.direction == 'asc'),
      expression: "order.field == 'created_at' && order.direction == 'asc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_up")]), _vm._v(" "), _c('i', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (_vm.order.field == 'created_at' && _vm.order.direction == 'desc'),
      expression: "order.field == 'created_at' && order.direction == 'desc'"
    }],
    staticClass: "material-icons"
  }, [_vm._v("arrow_drop_down")])])])]), _vm._v(" "), _c('tbody', _vm._l((_vm.logs), function(log) {
    return _c('tr', [_c('td', [(log.source != null) ? _c('span', [_c('i', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (log.source),
        expression: "log.source"
      }],
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(log.source.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": log.source.url
      }
    }, [_vm._v(_vm._s(log.source.name))])]) : _c('span', [_vm._v("\n                        " + _vm._s(log.source_name) + "\n                    ")])]), _vm._v(" "), _c('td', [(log.action == 'start') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("play_arrow")]) : _vm._e(), _vm._v(" "), (log.action == 'finish') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("done")]) : _vm._e(), _vm._v(" "), (log.action == 'create') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("add")]) : _vm._e(), _vm._v(" "), (log.action == 'delete') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("delete")]) : _vm._e(), _vm._v(" "), (log.action == 'update') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("update")]) : _vm._e(), _vm._v(" "), (log.action == 'recover') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("settings_backup_restore")]) : _vm._e(), _vm._v(" "), (log.action == 'notify_recovered') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("notifications_none")]) : _vm._e(), _vm._v(" "), (log.action == 'notify') ? _c('span', {
      staticClass: "material-icons"
    }, [_vm._v("notifications_active")]) : _vm._e(), _vm._v("\n                    " + _vm._s(log.action) + "\n                ")]), _vm._v(" "), _c('td', [(log.target != null) ? _c('span', [_c('i', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (log.target),
        expression: "log.target"
      }],
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(log.target.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": log.target.url
      }
    }, [_vm._v(_vm._s(log.target.name))])]) : _c('span', [_vm._v("\n                        " + _vm._s(log.target_name) + "\n                    ")])]), _vm._v(" "), _c('td', [(log.associated != null) ? _c('span', [_c('i', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (log.associated),
        expression: "log.associated"
      }],
      staticClass: "material-icons"
    }, [_vm._v(_vm._s(log.associated.icon))]), _vm._v(" "), _c('a', {
      attrs: {
        "href": log.associated.url
      }
    }, [_vm._v(_vm._s(log.associated.name))])]) : _c('span', [_vm._v("\n                        " + _vm._s(log.associated_name) + "\n                    ")])]), _vm._v(" "), _c('td', [_vm._v("\n                    " + _vm._s(log.timestamps.created) + "\n                ")])])
  }))]), _vm._v(" "), (_vm.meta.hasOwnProperty('pagination')) ? _c('ul', {
    staticClass: "pagination"
  }, [_c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("first_page")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == 1, 'waves-effect': _vm.meta.pagination.current_page != 1
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_left")])])]), _vm._v(" "), (_vm.meta.pagination.current_page - 3 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 3))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 2 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page - 1 > 0) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page - 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page - 1))])]) : _vm._e(), _vm._v(" "), _c('li', {
    staticClass: "active"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page))])]), _vm._v(" "), (_vm.meta.pagination.current_page + 1 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 1))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 2 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 2)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 2))])]) : _vm._e(), _vm._v(" "), (_vm.meta.pagination.current_page + 3 <= _vm.meta.pagination.total_pages) ? _c('li', {
    staticClass: "waves-effect"
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 3)
      }
    }
  }, [_vm._v(_vm._s(_vm.meta.pagination.current_page + 3))])]) : _vm._e(), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.current_page + 1)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("chevron_right")])])]), _vm._v(" "), _c('li', {
    class: {
      'disabled': _vm.meta.pagination.current_page == _vm.meta.pagination.total_pages, 'waves-effect': _vm.meta.pagination.current_page != _vm.meta.pagination.total_pages
    }
  }, [_c('a', {
    attrs: {
      "href": "#!"
    },
    on: {
      "click": function($event) {
        _vm.set_page(_vm.meta.pagination.total_pages)
      }
    }
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("last_page")])])])]) : _vm._e()])])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-e6784bc2", module.exports)
  }
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    class: [_vm.containerClasses, 'masonry-grid'],
    attrs: {
      "id": _vm.containerId
    }
  }, [(_vm.dashboard.suggestions.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection info with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("lightbulb_outline")]), _vm._v("\n                " + _vm._s(_vm.dashboard.suggestions.length) + " " + _vm._s(_vm.$tc("components.suggestions", _vm.dashboard.suggestions.length)) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.suggestions), function(suggestion) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 60px)"
      }
    }, [_c('a', {
      staticClass: "white-text",
      attrs: {
        "href": suggestion.belongsTo_object.url
      }
    }, [_vm._v("\n                            " + _vm._s(suggestion.belongsTo_object.display_name || suggestion.belongsTo_object.name) + ":\n                        ")]), _vm._v("\n                        " + _vm._s(_vm.$t('messages.suggestions.' + suggestion.name, {
      hour: suggestion.value,
      name: suggestion
    })) + "\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/properties/read/Event/' + suggestion.id
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("done")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.controlunits.critical.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection critical with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("developer_board")]), _vm._v("\n                " + _vm._s(_vm.dashboard.controlunits.critical.length) + " " + _vm._s(_vm.$tc("components.controlunits", _vm.dashboard.controlunits.critical.length)) + " " + _vm._s(_vm.$t("labels.critical")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.controlunits.critical), function(controlunit) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', [_c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/controlunits/' + controlunit.id
      }
    }, [_vm._v(_vm._s(controlunit.name))]), _vm._v(" "), _c('span', [_vm._v("(" + _vm._s(_vm.$t("labels.last_heartbeat")) + ": " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(controlunit.timestamps.last_heartbeat_diff).unit, {
        val: _vm.$getMatchingTimeDiff(controlunit.timestamps.last_heartbeat_diff).val
      }
    )) + ")")])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.terraria.critical.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection critical with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("video_label")]), _vm._v("\n                " + _vm._s(_vm.dashboard.terraria.critical.length) + " " + _vm._s(_vm.$tc("components.terraria", _vm.dashboard.terraria.critical.length)) + " " + _vm._s(_vm.$t("labels.critical")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.terraria.critical), function(terrarium) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', [_c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/terraria/' + terrarium.id
      }
    }, [_vm._v(_vm._s(terrarium.display_name))]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.humidity_critical === true && terrarium.temperature_critical !== true),
        expression: "terrarium.humidity_critical === true && terrarium.temperature_critical !== true"
      }]
    }, [_vm._v("(" + _vm._s(_vm.$t("labels.humidity")) + ": " + _vm._s(terrarium.cooked_humidity_percent) + "%)")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.humidity_critical === true && terrarium.temperature_critical === true),
        expression: "terrarium.humidity_critical === true && terrarium.temperature_critical === true"
      }]
    }, [_vm._v("(" + _vm._s(_vm.$t("labels.humidity")) + ": " + _vm._s(terrarium.cooked_humidity_percent) + "%, " + _vm._s(_vm.$t("labels.temperature")) + ": " + _vm._s(terrarium.cooked_temperature_celsius) + "°C)")]), _vm._v(" "), _c('span', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: (terrarium.humidity_critical !== true && terrarium.temperature_critical === true),
        expression: "terrarium.humidity_critical !== true && terrarium.temperature_critical === true"
      }]
    }, [_vm._v("(" + _vm._s(_vm.$t("labels.temperature")) + ": " + _vm._s(terrarium.cooked_temperature_celsius) + "°C)")])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.physical_sensors.critical.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection critical with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("memory")]), _vm._v("\n                " + _vm._s(_vm.dashboard.physical_sensors.critical.length) + " " + _vm._s(_vm.$tc("components.physical_sensors", _vm.dashboard.physical_sensors.critical.length)) + " " + _vm._s(_vm.$t("labels.critical")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.physical_sensors.critical), function(physical_sensor) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', [_c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/physical_sensors/' + physical_sensor.id
      }
    }, [_vm._v(_vm._s(physical_sensor.name))]), _vm._v(" "), _c('span', [_vm._v("(" + _vm._s(_vm.$t("labels.last_heartbeat")) + ":\n                    " + _vm._s(_vm.$t(
      'units.' + _vm.$getMatchingTimeDiff(physical_sensor.timestamps.last_heartbeat_diff).unit, {
        val: _vm.$getMatchingTimeDiff(physical_sensor.timestamps.last_heartbeat_diff).val
      }
    )) + ")")])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.animal_feeding_schedules.overdue.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection warning with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("local_dining")]), _vm._v("\n                " + _vm._s(_vm.dashboard.animal_feeding_schedules.overdue.length) + " " + _vm._s(_vm.$tc("components.animal_feedings", 2)) + " " + _vm._s(_vm.$t("labels.overdue")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.animal_feeding_schedules.overdue), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 60px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.animal.display_name) + ": " + _vm._s(schedule.type) + " (" + _vm._s(_vm.$t("labels.since")) + " " + _vm._s((schedule.due_days * -1)) + " " + _vm._s(_vm.$tc("units.days", (schedule.due_days * -1))) + ")\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/feeding_schedules/' + schedule.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/feeding_schedules/' + schedule.id + '/done'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("done")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.animal_weighing_schedules.overdue.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection warning with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("vertical_align_bottom")]), _vm._v("\n                " + _vm._s(_vm.dashboard.animal_weighing_schedules.overdue.length) + " " + _vm._s(_vm.$tc("components.animal_weighings", 2)) + " " + _vm._s(_vm.$t("labels.overdue")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.animal_weighing_schedules.overdue), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 60px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.animal.display_name) + " (" + _vm._s(_vm.$t("labels.since")) + " " + _vm._s((schedule.due_days * -1)) + " " + _vm._s(_vm.$tc("units.days", (schedule.due_days * -1))) + ")\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/weighing_schedules/' + schedule.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])]), _vm._v(" "), _vm._m(0, true)])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.action_sequence_schedules.overdue.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection warning with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("playlist_play")]), _vm._v("\n                " + _vm._s(_vm.dashboard.action_sequence_schedules.overdue.length) + " " + _vm._s(_vm.$tc("components.action_sequences", 2)) + " " + _vm._s(_vm.$t("labels.overdue")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.action_sequence_schedules.overdue), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 30px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.timestamps.starts) + ": " + _vm._s(schedule.sequence.name) + "\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text tooltipped",
      attrs: {
        "href": '/api/v1/action_sequence_schedules/' + schedule.id + '/skip',
        "data-delay": "50",
        "data-html": "true",
        "data-tooltip": '<div style=\'max-width: 300px\'>' + _vm.$t('tooltips.action_sequence_schedules.skip') + '</div>'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.animal_feeding_schedules.due.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection ok with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("local_dining")]), _vm._v("\n                " + _vm._s(_vm.dashboard.animal_feeding_schedules.due.length) + " " + _vm._s(_vm.$tc("components.animal_feedings", 2)) + " " + _vm._s(_vm.$t("labels.due")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.animal_feeding_schedules.due), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 60px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.animal.display_name) + ": " + _vm._s(schedule.type) + "\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/feeding_schedules/' + schedule.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/feeding_schedules/' + schedule.id + '/done'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("done")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.animal_weighing_schedules.due.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection ok with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("vertical_align_bottom")]), _vm._v("\n                " + _vm._s(_vm.dashboard.animal_weighing_schedules.due.length) + " " + _vm._s(_vm.$tc("components.animal_weighings", 2)) + " " + _vm._s(_vm.$t("labels.due")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.animal_weighing_schedules.due), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 60px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.animal.display_name) + " " + _vm._s(_vm.$t('labels.today')) + "\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/animals/' + schedule.animal.id + '/weighing_schedules/' + schedule.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])]), _vm._v(" "), _vm._m(1, true)])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.action_sequence_schedules.due.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection ok with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("playlist_play")]), _vm._v("\n                " + _vm._s(_vm.dashboard.action_sequence_schedules.due.length) + " " + _vm._s(_vm.$tc("components.action_sequences", 2)) + " " + _vm._s(_vm.$t("labels.due")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.action_sequence_schedules.due), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 30px)"
      }
    }, [_vm._v("\n                        " + _vm._s(schedule.timestamps.starts) + ": " + _vm._s(schedule.sequence.name) + "\n                    ")]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text tooltipped",
      attrs: {
        "href": '/api/v1/action_sequence_schedules/' + schedule.id + '/skip',
        "data-delay": "50",
        "data-html": "true",
        "data-tooltip": '<div style=\'max-width: 300px\'>' + _vm.$t('tooltips.action_sequence_schedules.skip') + '</div>'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.action_sequence_schedules.running.length > 0 ||
    _vm.dashboard.action_sequence_triggers.running.length > 0 ||
    _vm.dashboard.action_sequence_intentions.running.length > 0) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection ok with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("playlist_play")]), _vm._v("\n                " + _vm._s((_vm.dashboard.action_sequence_schedules.running.length + _vm.dashboard.action_sequence_triggers.running.length + _vm.dashboard.action_sequence_intentions.running.length)) + "\n                " + _vm._s(_vm.$tc("components.action_sequences", 2)) + " " + _vm._s(_vm.$t("labels.running")) + "\n            ")]), _vm._v(" "), _vm._l((_vm.dashboard.action_sequence_schedules.running), function(schedule) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 30px)"
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("schedule")]), _vm._v(" "), (schedule.timestamps.last_start !== null) ? _c('a', {
      staticClass: "white-text"
    }, [_vm._v(_vm._s(schedule.timestamps.last_start.split(" ")[1]))]) : _vm._e(), _vm._v(" "), _c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/action_sequences/' + schedule.sequence.id + '/edit'
      }
    }, [_vm._v("\n                            " + _vm._s(schedule.sequence.name) + "\n                        ")])]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/action_sequence_schedules/' + schedule.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])])])])
  }), _vm._v(" "), _vm._l((_vm.dashboard.action_sequence_triggers.running), function(trigger) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 30px)"
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("flare")]), _vm._v(" "), (trigger.timestamps.last_start !== null) ? _c('a', {
      staticClass: "white-text"
    }, [_vm._v(_vm._s(trigger.timestamps.last_start.split(" ")[1]))]) : _vm._e(), _vm._v(" "), _c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/action_sequences/' + trigger.sequence.id + '/edit'
      }
    }, [_vm._v("\n                            " + _vm._s(trigger.sequence.name) + "\n                        ")])]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/action_sequence_triggers/' + trigger.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])])])])
  }), _vm._v(" "), _vm._l((_vm.dashboard.action_sequence_intentions.running), function(intention) {
    return _c('li', {
      staticClass: "collection-item"
    }, [_c('div', {
      staticClass: "white-text"
    }, [_c('span', {
      staticStyle: {
        "display": "inline-block",
        "width": "calc(100% - 30px)"
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("explore")]), _vm._v(" "), (intention.timestamps.last_start !== null) ? _c('a', {
      staticClass: "white-text"
    }, [_vm._v(_vm._s(intention.timestamps.last_start.split(" ")[1]))]) : _vm._e(), _vm._v(" "), _c('a', {
      staticClass: "white-text",
      attrs: {
        "href": '/action_sequences/' + intention.sequence.id + '/edit'
      }
    }, [_vm._v("\n                            " + _vm._s(intention.sequence.name) + "\n                        ")])]), _vm._v(" "), _c('a', {
      staticClass: "secondary-content white-text",
      attrs: {
        "href": '/api/v1/action_sequence_intentions/' + intention.id + '/skip'
      },
      on: {
        "click": _vm.link_post
      }
    }, [_c('i', {
      staticClass: "material-icons"
    }, [_vm._v("update")])])])])
  })], 2)]) : _vm._e(), _vm._v(" "), (_vm.dashboard.terraria.critical.length < 1) ? _c('div', {
    class: _vm.wrapperClasses
  }, [_c('ul', {
    staticClass: "collection ok with-header"
  }, [_c('li', {
    staticClass: "collection-header"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("video_label")]), _vm._v("\n                " + _vm._s(_vm.dashboard.terraria.ok.length) + " " + _vm._s(_vm.$tc("components.terraria", 2)) + "\n            ")]), _vm._v(" "), _c('li', {
    staticClass: "collection-item"
  }, [_c('div', {
    staticClass: "white-text"
  }, [_vm._v("\n\n                    " + _vm._s(_vm.dashboard.terraria.ok.length) + " " + _vm._s(_vm.$tc("components.terraria", _vm.dashboard.terraria.ok.length)) + " " + _vm._s(_vm.$t("labels.ok")) + "\n\n                ")])])])]) : _vm._e()])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('a', {
    staticClass: "secondary-content white-text"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("done")])])
},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('a', {
    staticClass: "secondary-content white-text"
  }, [_c('i', {
    staticClass: "material-icons"
  }, [_vm._v("done")])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-fc69bb20", module.exports)
  }
}

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.3.3
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */


/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}
/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return typeof value === 'string' || typeof value === 'number'
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str
    .replace(hyphenateRE, '$1-$2')
    .replace(hyphenateRE, '$1-$2')
    .toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 */
function noop () {}

/**
 * Always return false.
 */
var no = function () { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      return JSON.stringify(a) === JSON.stringify(b)
    } catch (e) {
      // possible circular reference
      return a === b
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = (null); // work around flow check

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.error("[Vue warn]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var name = typeof vm === 'string'
      ? vm
      : typeof vm === 'function' && vm.options
        ? vm.options.name
        : vm._isVue
          ? vm.$options.name || vm.$options._componentTag
          : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  var generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

function handleError (err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    if (true) {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    } )); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = (function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function (err) { console.error(err); };
    timerFunc = function () {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
  } else if (typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS IE11, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function () {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      })
    }
  }
})();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */


var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
]
.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var arguments$1 = arguments;

    // avoid leaking arguments:
    // http://jsperf.com/closure-with-arguments
    var i = arguments.length;
    var args = new Array(i);
    while (i--) {
      args[i] = arguments$1[i];
    }
    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
        inserted = args;
        break
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true,
  isSettingProps: false
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value)) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (Array.isArray(value)) {
          dependArray(value);
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ("development" !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && typeof key === 'number') {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val
  }
  var ob = (target ).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && typeof key === 'number') {
    target.splice(key, 1);
    return
  }
  var ob = (target ).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (typeof childVal !== 'function') {
      "development" !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        childVal.call(this),
        parentVal.call(this)
      )
    }
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm)
        : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal
    ? extend(res, childVal)
    : res
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent
      ? parent.concat(child)
      : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.computed = function (parentVal, childVal) {
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  extend(ret, childVal);
  return ret
};

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + key
      );
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ("development" !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (true) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ("development" !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      'Invalid prop: type check failed for prop "' + name + '".' +
      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    valid = typeof value === expectedType.toLowerCase();
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      "referenced during render. Make sure to declare reactive data " +
      "properties in the data option.",
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function () {
  var node = new VNode();
  node.text = '';
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  return cloned
}

function cloneVNodes (vnodes) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i]);
  }
  return res
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      for (var i = 0; i < fns.length; i++) {
        fns[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      "development" !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        (last).text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      "development" !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && isDef(c.componentOptions)) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        this$1.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        cbs[i].apply(vm, args);
      }
    }
    return vm
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) &&
      child.data && child.data.slot != null
    ) {
      var name = child.data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots
}

function isWhitespace (node) {
  return node.isComment || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // remove reference to DOM nodes (prevents leak)
    vm.$options._parentElm = vm.$options._refElm = null;
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure((name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure((name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render
  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    if (true) {
      observerState.isSettingProps = true;
    }
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    if (true) {
      observerState.isSettingProps = false;
    }
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }
  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdateHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdateHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options
) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      "development" !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  if (this.user) {
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    }
  } else {
    value = this.getter.call(vm, vm);
  }
  // "touch" every property so they are all tracked as
  // dependencies for deep watching
  if (this.deep) {
    traverse(value);
  }
  popTarget();
  this.cleanupDeps();
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse (val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch) { initWatch(vm, opts.watch); }
}

var isReservedProp = {
  key: 1,
  ref: 1,
  slot: 1
};

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      if (isReservedProp[key] || config.isReservedAttr(key)) {
        warn(
          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !observerState.isSettingProps) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var i = keys.length;
  while (i--) {
    if (props && hasOwn(props, keys[i])) {
      "development" !== 'production' && warn(
        "The data property \"" + (keys[i]) + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(keys[i])) {
      proxy(vm, "_data", keys[i]);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  var watchers = vm._computedWatchers = Object.create(null);

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (true) {
      if (getter === undefined) {
        warn(
          ("No getter function has been defined for computed property \"" + key + "\"."),
          vm
        );
        getter = noop;
      }
    }
    // create internal watcher for the computed property.
    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (target, key, userDef) {
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = createComputedGetter(key);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    if (true) {
      if (methods[key] == null) {
        warn(
          "method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
    }
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (vm, key, handler) {
  var options;
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  vm.$watch(key, handler, options);
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    // isArray here
    var isArray = Array.isArray(inject);
    var result = Object.create(null);
    var keys = isArray
      ? inject
      : hasSymbol
        ? Reflect.ownKeys(inject)
        : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = isArray ? key : inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
    }
    return result
  }
}

/*  */

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  context,
  children
) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || {});
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || {},
    injections: resolveInject(Ctor.options.inject, context),
    slots: function () { return resolveSlots(children, context); }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  if (isUndef(Ctor.cid)) {
    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);
    if (Ctor === undefined) {
      // return nothing if this is indeed an async component
      // wait for the callback to trigger parent update.
      return
    }
  }

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  data = data || {};

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners
    data = {};
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }
  );
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    "development" !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      extend(props, bindObject);
    }
    return scopedSlotFn(props) || fallback
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && "development" !== 'production') {
      slotNodes._rendered && warn(
        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
        "- this will likely cause render errors.",
        this
      );
      slotNodes._rendered = true;
    }
    return slotNodes || fallback
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1
  } else {
    return keyCodes !== eventKeyCode
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp
) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      for (var key in value) {
        if (key === 'class' || key === 'style') {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];
        }
      }
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] =
    this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
}

function renderMixin (Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // clone slot nodes on re-renders
      for (var key in vm.$slots) {
        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (true) {
        vnode = vm.$options.renderError
          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
          : vm._vnode;
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
}

/*  */

var uid$1 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$1++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(((vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3 (options) {
  if ("development" !== 'production' &&
    !(this instanceof Vue$3)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    /* istanbul ignore if */
    if (plugin.installed) {
      return this
    }
    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    plugin.installed = true;
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (true) {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'can only contain alphanumeric characters and the hyphen, ' +
          'and must start with a letter.'
        );
      }
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (true) {
          if (type === 'component' && config.isReservedTag(id)) {
            warn(
              'Do not use built-in or reserved HTML elements as component ' +
              'id: ' + id
            );
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp];

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry (vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created () {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (
        (this.include && !matches(this.include, name)) ||
        (this.exclude && matches(this.exclude, name))
      )) {
        return vnode
      }
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode.ssrContext
  }
});

Vue$3.version = '2.3.3';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return genClassFromData(data)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function genClassFromData (data) {
  var dynamicClass = data.class;
  var staticClass = data.staticClass;
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (isUndef(value)) {
    return ''
  }
  if (typeof value === 'string') {
    return value
  }
  var res = '';
  if (Array.isArray(value)) {
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(value[i])) {
        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
          res += stringified + ' ';
        }
      }
    }
    return res.slice(0, -1)
  }
  if (isObject(value)) {
    for (var key in value) {
      if (value[key]) { res += key + ' '; }
    }
    return res.slice(0, -1)
  }
  /* istanbul ignore next */
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      "development" !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
        refs[key].push(ref);
      } else {
        refs[key] = [ref];
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *

/*
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.tag === b.tag &&
    a.isComment === b.isComment &&
    isDef(a.data) === isDef(b.data) &&
    sameInputType(a, b)
  )
}

// Some browsers do not support dynamically changing type for <input>
// so they need to be treated as different nodes
function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          inPre++;
        }
        if (
          !inPre &&
          !vnode.ns &&
          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
          config.isUnknownElement(tag)
        ) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref) {
    if (isDef(parent)) {
      if (isDef(ref)) {
        if (ref.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if ("development" !== 'production' && !elmToMove) {
            warn(
              'It seems there are duplicate keys that is causing an update error. ' +
              'Make sure each v-for item has a unique key.'
            );
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          }
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }
    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.elm = oldVnode.elm;
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }
    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue) {
    if (true) {
      if (!assertNodeMatch(elm, vnode)) {
        return false
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          var childrenMatch = true;
          var childNode = elm.firstChild;
          for (var i$1 = 0; i$1 < children.length; i$1++) {
            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
              childrenMatch = false;
              break
            }
            childNode = childNode.nextSibling;
          }
          // if childNode is not null, it means the actual childNodes list is
          // longer than the virtual children list.
          if (!childrenMatch || childNode) {
            if ("development" !== 'production' &&
              typeof console !== 'undefined' &&
              !bailed
            ) {
              bailed = true;
              console.warn('Parent: ', elm);
              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
            }
            return false
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode) {
    if (isDef(vnode.tag)) {
      return (
        vnode.tag.indexOf('vue-component') === 0 ||
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (true) {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          while (ancestor) {
            ancestor.elm = vnode.elm;
            ancestor = ancestor.parent;
          }
          if (isPatchable(vnode)) {
            for (var i = 0; i < cbs.create.length; ++i) {
              cbs.create[i](emptyNode, vnode.parent);
            }
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, key);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + "," + args)
  }
}

/*  */

function baseWarn (msg) {
  console.error(("[Vue compiler]: " + msg));
}

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value) {
  (el.props || (el.props = [])).push({ name: name, value: value });
}

function addAttr (el, name, value) {
  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  modifiers
) {
  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn
) {
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    "development" !== 'production' && warn &&
    modifiers && modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.'
    );
  }
  // check capture modifier
  if (modifiers && modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }
  if (modifiers && modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */
  if (modifiers && modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }
  var events;
  if (modifiers && modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }
  var newHandler = { value: value, modifiers: modifiers };
  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

function getAndRemoveAttr (el, name) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  return val
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
        "? " + baseValueExpression + ".trim()" +
        ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: ("\"" + value + "\""),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var modelRs = parseModel(value);
  if (modelRs.idx === null) {
    return (value + "=" + assignment)
  } else {
    return "var $$exp = " + (modelRs.exp) + ", $$idx = " + (modelRs.idx) + ";" +
      "if (!Array.isArray($$exp)){" +
        value + "=" + assignment + "}" +
      "else{$$exp.splice($$idx, 1, " + assignment + ")}"
  }
}

/**
 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
 *
 * for loop possible cases:
 *
 * - test
 * - test[idx]
 * - test[test1[idx]]
 * - test["a"][idx]
 * - xxx.test[a[a].test1[idx]]
 * - test.xxx.a["asa"][test1[idx]]
 *
 */

var len;
var str;
var chr;
var index$1;
var expressionPos;
var expressionEndPos;

function parseModel (val) {
  str = val;
  len = str.length;
  index$1 = expressionPos = expressionEndPos = 0;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    return {
      exp: val,
      idx: null
    }
  }

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.substring(0, expressionPos),
    idx: val.substring(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (true) {
    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (tag === 'input' && dynamicType) {
      warn$1(
        "<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" +
        "v-model does not support dynamic input types. Use v-if branches instead."
      );
    }
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead."
      );
    }
  }

  if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (true) {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.'
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
      "?_i(" + value + "," + valueBinding + ")>-1" + (
        trueValueBinding === 'true'
          ? (":(" + value + ")")
          : (":_q(" + value + "," + trueValueBinding + ")")
      )
  );
  addHandler(el, CHECKBOX_RADIO_TOKEN,
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$c){$$i<0&&(" + value + "=$$a.concat($$v))}" +
      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;
  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number || type === 'number') {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  if (once$$1) {
    var oldHandler = handler;
    var _target = target$1; // save current target element in closure
    handler = function (ev) {
      var res = arguments.length === 1
        ? oldHandler(ev)
        : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (
  elm,
  vnode,
  checkVal
) {
  return (!elm.composing && (
    vnode.tag === 'option' ||
    isDirty(elm, checkVal) ||
    isInputChanged(elm, checkVal)
  ))
}

function isDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value
  return document.activeElement !== elm && elm.value !== checkVal
}

function isInputChanged (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {
    return toNumber(value) !== toNumber(newVal)
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim()
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var prefixes = ['Webkit', 'Moz', 'ms'];

var testEl;
var normalize = cached(function (prop) {
  testEl = testEl || document.createElement('div');
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in testEl.style)) {
    return prop
  }
  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < prefixes.length; i++) {
    var prefixed = prefixes[i] + upper;
    if (prefixed in testEl.style) {
      return prefixed
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likley wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    el.setAttribute('class', cur.trim());
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame
  ? window.requestAnimationFrame.bind(window)
  : setTimeout;

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  (el._transitionClasses || (el._transitionClasses = [])).push(cls);
  addClass(el, cls);
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted (el, binding, vnode) {
    if (vnode.tag === 'select') {
      var cb = function () {
        setSelected(el, binding, vnode.context);
      };
      cb();
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(cb, 0);
      }
    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var needReset = el.multiple
        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })
        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
      if (needReset) {
        trigger(el, 'change');
      }
    }
  }
};

function setSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  for (var i = 0, l = options.length; i < l; i++) {
    if (looseEqual(getValue(options[i]), value)) {
      return false
    }
  }
  return true
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition && !isIE9) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    if (transition && !isIE9) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag; });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if ("development" !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if ("development" !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      if (this._hasMove != null) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if ("development" !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if ("development" !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/*  */

// check whether current browser encodes a char inside attribute values
function shouldDecode (content, encoded) {
  var div = document.createElement('div');
  div.innerHTML = "<div a=\"" + content + "\">";
  return div.innerHTML.indexOf(encoded) > 0
}

// #3663
// IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/*  */

var decoder;

function decode (html) {
  decoder = decoder || document.createElement('div');
  decoder.innerHTML = html;
  return decoder.textContent
}

/**
 * Not type-checking this file because it's mostly vendor code.
 */

/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

// Regular Expressions for parsing tags and attributes
var singleAttrIdentifier = /([^\s"'<>/=]+)/;
var singleAttrAssign = /(?:=)/;
var singleAttrValues = [
  // attr value double quotes
  /"([^"]*)"+/.source,
  // attr value, single quotes
  /'([^']*)'+/.source,
  // attr value, no quotes
  /([^\s"'=<>`]+)/.source
];
var attribute = new RegExp(
  '^\\s*' + singleAttrIdentifier.source +
  '(?:\\s*(' + singleAttrAssign.source + ')' +
  '\\s*(?:' + singleAttrValues.join('|') + '))?'
);

// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset
var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
var startTagOpen = new RegExp('^<' + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
var doctype = /^<!DOCTYPE [^>]+>/i;
var comment = /^<!--/;
var conditionalComment = /^<!\[/;

var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
});

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          continue
        }
      }

      var text = (void 0), rest$1 = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest$1 = html.slice(textEnd);
        while (
          !endTag.test(rest$1) &&
          !startTagOpen.test(rest$1) &&
          !comment.test(rest$1) &&
          !conditionalComment.test(rest$1)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest$1.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest$1 = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var endTagLength = 0;
      var rest = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!--([\s\S]*?)-->/g, '$1')
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest.length;
      html = rest;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if ("development" !== 'production' && !stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') { delete args[3]; }
        if (args[4] === '') { delete args[4]; }
        if (args[5] === '') { delete args[5]; }
      }
      var value = args[3] || args[4] || args[5] || '';
      attrs[i] = {
        name: args[1],
        value: decodeAttr(
          value,
          options.shouldDecodeNewlines
        )
      };
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    }

    // Find the closest opened tag of the same type
    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ("development" !== 'production' &&
          (i > pos || !tagName) &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag.")
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});

function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    tokens.push(JSON.stringify(text.slice(lastIndex)));
  }
  return tokens.join('+')
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;

var decodeHTMLCached = cached(decode);

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;
  platformGetTagNamespace = options.getTagNamespace || no;
  platformMustUseProp = options.mustUseProp || no;
  platformIsPreTag = options.isPreTag || no;
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg) {
    if (!warned) {
      warned = true;
      warn$2(msg);
    }
  }

  function endPre (element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    start: function start (tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = {
        type: 1,
        tag: tag,
        attrsList: attrs,
        attrsMap: makeAttrsMap(attrs),
        parent: currentParent,
        children: []
      };
      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        "development" !== 'production' && warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.'
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        preTransforms[i](element, options);
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else {
        processFor(element);
        processIf(element);
        processOnce(element);
        processKey(element);

        // determine whether this is a plain element after
        // removing structural attributes
        element.plain = !element.key && !attrs.length;

        processRef(element);
        processSlot(element);
        processComponent(element);
        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
          transforms[i$1](element, options);
        }
        processAttrs(element);
      }

      function checkRootConstraints (el) {
        if (true) {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce(
              "Cannot use <" + (el.tag) + "> as component root element because it may " +
              'contain multiple nodes.'
            );
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce(
              'Cannot use v-for on stateful component root element because ' +
              'it renders multiple elements.'
            );
          }
        }
      }

      // tree management
      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else if (true) {
          warnOnce(
            "Component template should contain exactly one root element. " +
            "If you are using v-if on multiple elements, " +
            "use v-else-if to chain them instead."
          );
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) { // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        endPre(element);
      }
      // apply post-transforms
      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
        postTransforms[i$2](element, options);
      }
    },

    end: function end () {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      }
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      endPre(element);
    },

    chars: function chars (text) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.'
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored.")
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      text = inPre || text.trim()
        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
      if (text) {
        var expression;
        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: expression,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var l = el.attrsList.length;
  if (l) {
    var attrs = el.attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if ("development" !== 'production' && el.tag === 'template') {
      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var inMatch = exp.match(forAliasRE);
    if (!inMatch) {
      "development" !== 'production' && warn$2(
        ("Invalid v-for expression: " + exp)
      );
      return
    }
    el.for = inMatch[2].trim();
    var alias = inMatch[1].trim();
    var iteratorMatch = alias.match(forIteratorRE);
    if (iteratorMatch) {
      el.alias = iteratorMatch[1].trim();
      el.iterator1 = iteratorMatch[2].trim();
      if (iteratorMatch[3]) {
        el.iterator2 = iteratorMatch[3].trim();
      }
    } else {
      el.alias = alias;
    }
  }
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if."
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if ("development" !== 'production' && children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored."
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if ("development" !== 'production' && el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead."
      );
    }
  } else {
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    }
    if (el.tag === 'template') {
      el.slotScope = getAndRemoveAttr(el, 'scope');
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name);
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;
        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            addHandler(
              el,
              ("update:" + (camelize(name))),
              genAssignmentCode(value, "$event")
            );
          }
        }
        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$2);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }
        addDirective(el, name, rawName, value, arg, modifiers);
        if ("development" !== 'production' && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var expression = parseText(value, delimiters);
        if (expression) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.'
          );
        }
      }
      addAttr(el, name, JSON.stringify(value));
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      "development" !== 'production' &&
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead."
      );
    }
    _el = _el.parent;
  }
}

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      walkThroughConditionsBlocks(node.ifConditions, isInFor);
    }
  }
}

function walkThroughConditionsBlocks (conditionBlocks, isInFor) {
  for (var i = 1, len = conditionBlocks.length; i < len; i++) {
    markStaticRoots(conditionBlocks[i].block, isInFor);
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

// keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative,
  warn
) {
  var res = isNative ? 'nativeOn:{' : 'on:{';
  for (var name in events) {
    var handler = events[name];
    // #5330: warn click.right, since right clicks do not actually fire click events.
    if ("development" !== 'production' &&
      name === 'click' &&
      handler && handler.modifiers && handler.modifiers.right
    ) {
      warn(
        "Use \"contextmenu\" instead of \"click.right\" since right clicks " +
        "do not actually fire \"click\" events."
      );
    }
    res += "\"" + name + "\":" + (genHandler(name, handler)) + ",";
  }
  return res.slice(0, -1) + '}'
}

function genHandler (
  name,
  handler
) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    return isMethodPath || isFunctionExpression
      ? handler.value
      : ("function($event){" + (handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? handler.value + '($event)'
      : isFunctionExpression
        ? ("(" + (handler.value) + ")($event)")
        : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var alias = keyCodes[key];
  return ("_k($event.keyCode," + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + ")")
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  bind: bind$1,
  cloak: noop
};

/*  */

// configurable state
var warn$3;
var transforms$1;
var dataGenFns;
var platformDirectives$1;
var isPlatformReservedTag$1;
var staticRenderFns;
var onceCount;
var currentOptions;

function generate (
  ast,
  options
) {
  // save previous staticRenderFns so generate calls can be nested
  var prevStaticRenderFns = staticRenderFns;
  var currentStaticRenderFns = staticRenderFns = [];
  var prevOnceCount = onceCount;
  onceCount = 0;
  currentOptions = options;
  warn$3 = options.warn || baseWarn;
  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');
  dataGenFns = pluckModuleFunction(options.modules, 'genData');
  platformDirectives$1 = options.directives || {};
  isPlatformReservedTag$1 = options.isReservedTag || no;
  var code = ast ? genElement(ast) : '_c("div")';
  staticRenderFns = prevStaticRenderFns;
  onceCount = prevOnceCount;
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: currentStaticRenderFns
  }
}

function genElement (el) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el)
  } else if (el.for && !el.forProcessed) {
    return genFor(el)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el)
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el);
    } else {
      var data = el.plain ? undefined : genData(el);

      var children = el.inlineTemplate ? null : genChildren(el, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < transforms$1.length; i++) {
      code = transforms$1[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el) {
  el.staticProcessed = true;
  staticRenderFns.push(("with(this){return " + (genElement(el)) + "}"));
  return ("_m(" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      "development" !== 'production' && warn$3(
        "v-once can only be used inside v-for that is keyed. "
      );
      return genElement(el)
    }
    return ("_o(" + (genElement(el)) + "," + (onceCount++) + (key ? ("," + key) : "") + ")")
  } else {
    return genStatic(el)
  }
}

function genIf (el) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice())
}

function genIfConditions (conditions) {
  if (!conditions.length) {
    return '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return el.once ? genOnce(el) : genElement(el)
  }
}

function genFor (el) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (
    "development" !== 'production' &&
    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key
  ) {
    warn$3(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + (genElement(el)) +
    '})'
}

function genData (el) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < dataGenFns.length; i++) {
    data += dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:{" + (genProps(el.attrs)) + "},";
  }
  // DOM props
  if (el.props) {
    data += "domProps:{" + (genProps(el.props)) + "},";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false, warn$3)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true, warn$3)) + ",";
  }
  // slot target
  if (el.slotTarget) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el.scopedSlots)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  return data
}

function genDirectives (el) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, warn$3);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el) {
  var ast = el.children[0];
  if ("development" !== 'production' && (
    el.children.length > 1 || ast.type !== 1
  )) {
    warn$3('Inline-template components must have exactly one child element.');
  }
  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, currentOptions);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (slots) {
  return ("scopedSlots:_u([" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + "])")
}

function genScopedSlot (key, el) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el)
  }
  return "{key:" + key + ",fn:function(" + (String(el.attrsMap.scope)) + "){" +
    "return " + (el.tag === 'template'
      ? genChildren(el) || 'void 0'
      : genElement(el)) + "}}"
}

function genForScopedSlot (key, el) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + (genScopedSlot(key, el)) +
    '})'
}

function genChildren (el, checkSkip) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      return genElement(el$1)
    }
    var normalizationType = checkSkip ? getNormalizationType(children) : 0;
    return ("[" + (children.map(genNode).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (children) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function maybeComponent (el) {
  return !isPlatformReservedTag$1(el.tag)
}

function genNode (node) {
  if (node.type === 1) {
    return genElement(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genSlot (el) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (componentName, el) {
  var children = el.inlineTemplate ? null : genChildren(el, true);
  return ("_c(" + componentName + "," + (genData(el)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var res = '';
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
  }
  return res.slice(0, -1)
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */

// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// check valid identifier for v-for
var identRE = /[A-Za-z_$][\w$]*/;

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast) {
  var errors = [];
  if (ast) {
    checkNode(ast, errors);
  }
  return errors
}

function checkNode (node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), errors);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), errors);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), errors);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent (exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
    );
  }
  checkExpression(exp, text, errors);
}

function checkFor (node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier (ident, type, text, errors) {
  if (typeof ident === 'string' && !identRE.test(ident)) {
    errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
  }
}

function checkExpression (exp, text, errors) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      errors.push(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
      );
    } else {
      errors.push(("invalid expression: " + (text.trim())));
    }
  }
}

/*  */

function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  optimize(ast, options);
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
}

function makeFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompiler (baseOptions) {
  var functionCompileCache = Object.create(null);

  function compile (
    template,
    options
  ) {
    var finalOptions = Object.create(baseOptions);
    var errors = [];
    var tips = [];
    finalOptions.warn = function (msg, tip$$1) {
      (tip$$1 ? tips : errors).push(msg);
    };

    if (options) {
      // merge custom modules
      if (options.modules) {
        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
      }
      // merge custom directives
      if (options.directives) {
        finalOptions.directives = extend(
          Object.create(baseOptions.directives),
          options.directives
        );
      }
      // copy other options
      for (var key in options) {
        if (key !== 'modules' && key !== 'directives') {
          finalOptions[key] = options[key];
        }
      }
    }

    var compiled = baseCompile(template, finalOptions);
    if (true) {
      errors.push.apply(errors, detectErrors(compiled.ast));
    }
    compiled.errors = errors;
    compiled.tips = tips;
    return compiled
  }

  function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = options || {};

    /* istanbul ignore if */
    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (functionCompileCache[key]) {
      return functionCompileCache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (true) {
      if (compiled.errors && compiled.errors.length) {
        warn(
          "Error compiling template:\n\n" + template + "\n\n" +
          compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
          vm
        );
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) { return tip(msg, vm); });
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = makeFunction(compiled.render, fnGenErrors);
    var l = compiled.staticRenderFns.length;
    res.staticRenderFns = new Array(l);
    for (var i = 0; i < l; i++) {
      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);
    }

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (functionCompileCache[key] = res)
  }

  return {
    compile: compile,
    compileToFunctions: compileToFunctions
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if ("development" !== 'production' && staticClass) {
    var expression = parseText(staticClass, options.delimiters);
    if (expression) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.'
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (true) {
      var expression = parseText(staticStyle, options.delimiters);
      if (expression) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.'
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$2 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

var modules$1 = [
  klass$1,
  style$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue$3.prototype.$mount;
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    "development" !== 'production' && warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if ("development" !== 'production' && !template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (true) {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        delimiters: options.delimiters
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        mark('compile end');
        measure(((this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue$3.compile = compileToFunctions;

module.exports = Vue$3;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 140 */,
/* 141 */,
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(7);


/***/ })
/******/ ]);